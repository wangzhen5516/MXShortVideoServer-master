/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package mx.j2.recommend.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2021-06-02")
public class Result implements org.apache.thrift.TBase<Result, Result._Fields>, java.io.Serializable, Cloneable, Comparable<Result> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Result");

  private static final org.apache.thrift.protocol.TField RESULT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("resultType", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField RECALL_SIGN_FIELD_DESC = new org.apache.thrift.protocol.TField("recallSign", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField SHORT_VIDEO_FIELD_DESC = new org.apache.thrift.protocol.TField("shortVideo", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField DEBUG_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("debugInfo", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField ATTACH_CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("attachContent", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField INTERNAL_USE_FIELD_DESC = new org.apache.thrift.protocol.TField("internalUse", org.apache.thrift.protocol.TType.STRUCT, (short)6);
  private static final org.apache.thrift.protocol.TField PUBLISHER_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("publisherInfo", org.apache.thrift.protocol.TType.STRUCT, (short)7);
  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField LIVE_STREAM_FIELD_DESC = new org.apache.thrift.protocol.TField("liveStream", org.apache.thrift.protocol.TType.STRUCT, (short)9);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ResultStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ResultTupleSchemeFactory();

  public java.lang.String resultType; // required
  public long recallSign; // optional
  public ShortVideo shortVideo; // required
  public java.lang.String debugInfo; // required
  public java.lang.String attachContent; // required
  public InternalUse internalUse; // required
  public PublisherInfo publisherInfo; // optional
  public java.lang.String id; // optional
  public LiveStream liveStream; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    RESULT_TYPE((short)1, "resultType"),
    RECALL_SIGN((short)2, "recallSign"),
    SHORT_VIDEO((short)3, "shortVideo"),
    DEBUG_INFO((short)4, "debugInfo"),
    ATTACH_CONTENT((short)5, "attachContent"),
    INTERNAL_USE((short)6, "internalUse"),
    PUBLISHER_INFO((short)7, "publisherInfo"),
    ID((short)8, "id"),
    LIVE_STREAM((short)9, "liveStream");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // RESULT_TYPE
          return RESULT_TYPE;
        case 2: // RECALL_SIGN
          return RECALL_SIGN;
        case 3: // SHORT_VIDEO
          return SHORT_VIDEO;
        case 4: // DEBUG_INFO
          return DEBUG_INFO;
        case 5: // ATTACH_CONTENT
          return ATTACH_CONTENT;
        case 6: // INTERNAL_USE
          return INTERNAL_USE;
        case 7: // PUBLISHER_INFO
          return PUBLISHER_INFO;
        case 8: // ID
          return ID;
        case 9: // LIVE_STREAM
          return LIVE_STREAM;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __RECALLSIGN_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.RECALL_SIGN,_Fields.PUBLISHER_INFO,_Fields.ID};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.RESULT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("resultType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RECALL_SIGN, new org.apache.thrift.meta_data.FieldMetaData("recallSign", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SHORT_VIDEO, new org.apache.thrift.meta_data.FieldMetaData("shortVideo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "ShortVideo")));
    tmpMap.put(_Fields.DEBUG_INFO, new org.apache.thrift.meta_data.FieldMetaData("debugInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ATTACH_CONTENT, new org.apache.thrift.meta_data.FieldMetaData("attachContent", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INTERNAL_USE, new org.apache.thrift.meta_data.FieldMetaData("internalUse", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, InternalUse.class)));
    tmpMap.put(_Fields.PUBLISHER_INFO, new org.apache.thrift.meta_data.FieldMetaData("publisherInfo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PublisherInfo.class)));
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LIVE_STREAM, new org.apache.thrift.meta_data.FieldMetaData("liveStream", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "LiveStream")));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Result.class, metaDataMap);
  }

  public Result() {
  }

  public Result(
    java.lang.String resultType,
    ShortVideo shortVideo,
    java.lang.String debugInfo,
    java.lang.String attachContent,
    InternalUse internalUse,
    LiveStream liveStream)
  {
    this();
    this.resultType = resultType;
    this.shortVideo = shortVideo;
    this.debugInfo = debugInfo;
    this.attachContent = attachContent;
    this.internalUse = internalUse;
    this.liveStream = liveStream;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Result(Result other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetResultType()) {
      this.resultType = other.resultType;
    }
    this.recallSign = other.recallSign;
    if (other.isSetShortVideo()) {
      this.shortVideo = new ShortVideo(other.shortVideo);
    }
    if (other.isSetDebugInfo()) {
      this.debugInfo = other.debugInfo;
    }
    if (other.isSetAttachContent()) {
      this.attachContent = other.attachContent;
    }
    if (other.isSetInternalUse()) {
      this.internalUse = new InternalUse(other.internalUse);
    }
    if (other.isSetPublisherInfo()) {
      this.publisherInfo = new PublisherInfo(other.publisherInfo);
    }
    if (other.isSetId()) {
      this.id = other.id;
    }
    if (other.isSetLiveStream()) {
      this.liveStream = new LiveStream(other.liveStream);
    }
  }

  public Result deepCopy() {
    return new Result(this);
  }

  @Override
  public void clear() {
    this.resultType = null;
    setRecallSignIsSet(false);
    this.recallSign = 0;
    this.shortVideo = null;
    this.debugInfo = null;
    this.attachContent = null;
    this.internalUse = null;
    this.publisherInfo = null;
    this.id = null;
    this.liveStream = null;
  }

  public java.lang.String getResultType() {
    return this.resultType;
  }

  public Result setResultType(java.lang.String resultType) {
    this.resultType = resultType;
    return this;
  }

  public void unsetResultType() {
    this.resultType = null;
  }

  /** Returns true if field resultType is set (has been assigned a value) and false otherwise */
  public boolean isSetResultType() {
    return this.resultType != null;
  }

  public void setResultTypeIsSet(boolean value) {
    if (!value) {
      this.resultType = null;
    }
  }

  public long getRecallSign() {
    return this.recallSign;
  }

  public Result setRecallSign(long recallSign) {
    this.recallSign = recallSign;
    setRecallSignIsSet(true);
    return this;
  }

  public void unsetRecallSign() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RECALLSIGN_ISSET_ID);
  }

  /** Returns true if field recallSign is set (has been assigned a value) and false otherwise */
  public boolean isSetRecallSign() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RECALLSIGN_ISSET_ID);
  }

  public void setRecallSignIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RECALLSIGN_ISSET_ID, value);
  }

  public ShortVideo getShortVideo() {
    return this.shortVideo;
  }

  public Result setShortVideo(ShortVideo shortVideo) {
    this.shortVideo = shortVideo;
    return this;
  }

  public void unsetShortVideo() {
    this.shortVideo = null;
  }

  /** Returns true if field shortVideo is set (has been assigned a value) and false otherwise */
  public boolean isSetShortVideo() {
    return this.shortVideo != null;
  }

  public void setShortVideoIsSet(boolean value) {
    if (!value) {
      this.shortVideo = null;
    }
  }

  public java.lang.String getDebugInfo() {
    return this.debugInfo;
  }

  public Result setDebugInfo(java.lang.String debugInfo) {
    this.debugInfo = debugInfo;
    return this;
  }

  public void unsetDebugInfo() {
    this.debugInfo = null;
  }

  /** Returns true if field debugInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetDebugInfo() {
    return this.debugInfo != null;
  }

  public void setDebugInfoIsSet(boolean value) {
    if (!value) {
      this.debugInfo = null;
    }
  }

  public java.lang.String getAttachContent() {
    return this.attachContent;
  }

  public Result setAttachContent(java.lang.String attachContent) {
    this.attachContent = attachContent;
    return this;
  }

  public void unsetAttachContent() {
    this.attachContent = null;
  }

  /** Returns true if field attachContent is set (has been assigned a value) and false otherwise */
  public boolean isSetAttachContent() {
    return this.attachContent != null;
  }

  public void setAttachContentIsSet(boolean value) {
    if (!value) {
      this.attachContent = null;
    }
  }

  public InternalUse getInternalUse() {
    return this.internalUse;
  }

  public Result setInternalUse(InternalUse internalUse) {
    this.internalUse = internalUse;
    return this;
  }

  public void unsetInternalUse() {
    this.internalUse = null;
  }

  /** Returns true if field internalUse is set (has been assigned a value) and false otherwise */
  public boolean isSetInternalUse() {
    return this.internalUse != null;
  }

  public void setInternalUseIsSet(boolean value) {
    if (!value) {
      this.internalUse = null;
    }
  }

  public PublisherInfo getPublisherInfo() {
    return this.publisherInfo;
  }

  public Result setPublisherInfo(PublisherInfo publisherInfo) {
    this.publisherInfo = publisherInfo;
    return this;
  }

  public void unsetPublisherInfo() {
    this.publisherInfo = null;
  }

  /** Returns true if field publisherInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetPublisherInfo() {
    return this.publisherInfo != null;
  }

  public void setPublisherInfoIsSet(boolean value) {
    if (!value) {
      this.publisherInfo = null;
    }
  }

  public java.lang.String getId() {
    return this.id;
  }

  public Result setId(java.lang.String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  public LiveStream getLiveStream() {
    return this.liveStream;
  }

  public Result setLiveStream(LiveStream liveStream) {
    this.liveStream = liveStream;
    return this;
  }

  public void unsetLiveStream() {
    this.liveStream = null;
  }

  /** Returns true if field liveStream is set (has been assigned a value) and false otherwise */
  public boolean isSetLiveStream() {
    return this.liveStream != null;
  }

  public void setLiveStreamIsSet(boolean value) {
    if (!value) {
      this.liveStream = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case RESULT_TYPE:
      if (value == null) {
        unsetResultType();
      } else {
        setResultType((java.lang.String)value);
      }
      break;

    case RECALL_SIGN:
      if (value == null) {
        unsetRecallSign();
      } else {
        setRecallSign((java.lang.Long)value);
      }
      break;

    case SHORT_VIDEO:
      if (value == null) {
        unsetShortVideo();
      } else {
        setShortVideo((ShortVideo)value);
      }
      break;

    case DEBUG_INFO:
      if (value == null) {
        unsetDebugInfo();
      } else {
        setDebugInfo((java.lang.String)value);
      }
      break;

    case ATTACH_CONTENT:
      if (value == null) {
        unsetAttachContent();
      } else {
        setAttachContent((java.lang.String)value);
      }
      break;

    case INTERNAL_USE:
      if (value == null) {
        unsetInternalUse();
      } else {
        setInternalUse((InternalUse)value);
      }
      break;

    case PUBLISHER_INFO:
      if (value == null) {
        unsetPublisherInfo();
      } else {
        setPublisherInfo((PublisherInfo)value);
      }
      break;

    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((java.lang.String)value);
      }
      break;

    case LIVE_STREAM:
      if (value == null) {
        unsetLiveStream();
      } else {
        setLiveStream((LiveStream)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case RESULT_TYPE:
      return getResultType();

    case RECALL_SIGN:
      return getRecallSign();

    case SHORT_VIDEO:
      return getShortVideo();

    case DEBUG_INFO:
      return getDebugInfo();

    case ATTACH_CONTENT:
      return getAttachContent();

    case INTERNAL_USE:
      return getInternalUse();

    case PUBLISHER_INFO:
      return getPublisherInfo();

    case ID:
      return getId();

    case LIVE_STREAM:
      return getLiveStream();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case RESULT_TYPE:
      return isSetResultType();
    case RECALL_SIGN:
      return isSetRecallSign();
    case SHORT_VIDEO:
      return isSetShortVideo();
    case DEBUG_INFO:
      return isSetDebugInfo();
    case ATTACH_CONTENT:
      return isSetAttachContent();
    case INTERNAL_USE:
      return isSetInternalUse();
    case PUBLISHER_INFO:
      return isSetPublisherInfo();
    case ID:
      return isSetId();
    case LIVE_STREAM:
      return isSetLiveStream();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof Result)
      return this.equals((Result)that);
    return false;
  }

  public boolean equals(Result that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_resultType = true && this.isSetResultType();
    boolean that_present_resultType = true && that.isSetResultType();
    if (this_present_resultType || that_present_resultType) {
      if (!(this_present_resultType && that_present_resultType))
        return false;
      if (!this.resultType.equals(that.resultType))
        return false;
    }

    boolean this_present_recallSign = true && this.isSetRecallSign();
    boolean that_present_recallSign = true && that.isSetRecallSign();
    if (this_present_recallSign || that_present_recallSign) {
      if (!(this_present_recallSign && that_present_recallSign))
        return false;
      if (this.recallSign != that.recallSign)
        return false;
    }

    boolean this_present_shortVideo = true && this.isSetShortVideo();
    boolean that_present_shortVideo = true && that.isSetShortVideo();
    if (this_present_shortVideo || that_present_shortVideo) {
      if (!(this_present_shortVideo && that_present_shortVideo))
        return false;
      if (!this.shortVideo.equals(that.shortVideo))
        return false;
    }

    boolean this_present_debugInfo = true && this.isSetDebugInfo();
    boolean that_present_debugInfo = true && that.isSetDebugInfo();
    if (this_present_debugInfo || that_present_debugInfo) {
      if (!(this_present_debugInfo && that_present_debugInfo))
        return false;
      if (!this.debugInfo.equals(that.debugInfo))
        return false;
    }

    boolean this_present_attachContent = true && this.isSetAttachContent();
    boolean that_present_attachContent = true && that.isSetAttachContent();
    if (this_present_attachContent || that_present_attachContent) {
      if (!(this_present_attachContent && that_present_attachContent))
        return false;
      if (!this.attachContent.equals(that.attachContent))
        return false;
    }

    boolean this_present_internalUse = true && this.isSetInternalUse();
    boolean that_present_internalUse = true && that.isSetInternalUse();
    if (this_present_internalUse || that_present_internalUse) {
      if (!(this_present_internalUse && that_present_internalUse))
        return false;
      if (!this.internalUse.equals(that.internalUse))
        return false;
    }

    boolean this_present_publisherInfo = true && this.isSetPublisherInfo();
    boolean that_present_publisherInfo = true && that.isSetPublisherInfo();
    if (this_present_publisherInfo || that_present_publisherInfo) {
      if (!(this_present_publisherInfo && that_present_publisherInfo))
        return false;
      if (!this.publisherInfo.equals(that.publisherInfo))
        return false;
    }

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_liveStream = true && this.isSetLiveStream();
    boolean that_present_liveStream = true && that.isSetLiveStream();
    if (this_present_liveStream || that_present_liveStream) {
      if (!(this_present_liveStream && that_present_liveStream))
        return false;
      if (!this.liveStream.equals(that.liveStream))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetResultType()) ? 131071 : 524287);
    if (isSetResultType())
      hashCode = hashCode * 8191 + resultType.hashCode();

    hashCode = hashCode * 8191 + ((isSetRecallSign()) ? 131071 : 524287);
    if (isSetRecallSign())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(recallSign);

    hashCode = hashCode * 8191 + ((isSetShortVideo()) ? 131071 : 524287);
    if (isSetShortVideo())
      hashCode = hashCode * 8191 + shortVideo.hashCode();

    hashCode = hashCode * 8191 + ((isSetDebugInfo()) ? 131071 : 524287);
    if (isSetDebugInfo())
      hashCode = hashCode * 8191 + debugInfo.hashCode();

    hashCode = hashCode * 8191 + ((isSetAttachContent()) ? 131071 : 524287);
    if (isSetAttachContent())
      hashCode = hashCode * 8191 + attachContent.hashCode();

    hashCode = hashCode * 8191 + ((isSetInternalUse()) ? 131071 : 524287);
    if (isSetInternalUse())
      hashCode = hashCode * 8191 + internalUse.hashCode();

    hashCode = hashCode * 8191 + ((isSetPublisherInfo()) ? 131071 : 524287);
    if (isSetPublisherInfo())
      hashCode = hashCode * 8191 + publisherInfo.hashCode();

    hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
    if (isSetId())
      hashCode = hashCode * 8191 + id.hashCode();

    hashCode = hashCode * 8191 + ((isSetLiveStream()) ? 131071 : 524287);
    if (isSetLiveStream())
      hashCode = hashCode * 8191 + liveStream.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(Result other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetResultType()).compareTo(other.isSetResultType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResultType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resultType, other.resultType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRecallSign()).compareTo(other.isSetRecallSign());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecallSign()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recallSign, other.recallSign);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetShortVideo()).compareTo(other.isSetShortVideo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShortVideo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shortVideo, other.shortVideo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDebugInfo()).compareTo(other.isSetDebugInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDebugInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.debugInfo, other.debugInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAttachContent()).compareTo(other.isSetAttachContent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAttachContent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attachContent, other.attachContent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetInternalUse()).compareTo(other.isSetInternalUse());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInternalUse()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.internalUse, other.internalUse);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPublisherInfo()).compareTo(other.isSetPublisherInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPublisherInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.publisherInfo, other.publisherInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLiveStream()).compareTo(other.isSetLiveStream());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLiveStream()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.liveStream, other.liveStream);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("Result(");
    boolean first = true;

    sb.append("resultType:");
    if (this.resultType == null) {
      sb.append("null");
    } else {
      sb.append(this.resultType);
    }
    first = false;
    if (isSetRecallSign()) {
      if (!first) sb.append(", ");
      sb.append("recallSign:");
      sb.append(this.recallSign);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("shortVideo:");
    if (this.shortVideo == null) {
      sb.append("null");
    } else {
      sb.append(this.shortVideo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("debugInfo:");
    if (this.debugInfo == null) {
      sb.append("null");
    } else {
      sb.append(this.debugInfo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("attachContent:");
    if (this.attachContent == null) {
      sb.append("null");
    } else {
      sb.append(this.attachContent);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("internalUse:");
    if (this.internalUse == null) {
      sb.append("null");
    } else {
      sb.append(this.internalUse);
    }
    first = false;
    if (isSetPublisherInfo()) {
      if (!first) sb.append(", ");
      sb.append("publisherInfo:");
      if (this.publisherInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.publisherInfo);
      }
      first = false;
    }
    if (isSetId()) {
      if (!first) sb.append(", ");
      sb.append("id:");
      if (this.id == null) {
        sb.append("null");
      } else {
        sb.append(this.id);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("liveStream:");
    if (this.liveStream == null) {
      sb.append("null");
    } else {
      sb.append(this.liveStream);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (internalUse != null) {
      internalUse.validate();
    }
    if (publisherInfo != null) {
      publisherInfo.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ResultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ResultStandardScheme getScheme() {
      return new ResultStandardScheme();
    }
  }

  private static class ResultStandardScheme extends org.apache.thrift.scheme.StandardScheme<Result> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Result struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // RESULT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.resultType = iprot.readString();
              struct.setResultTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // RECALL_SIGN
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.recallSign = iprot.readI64();
              struct.setRecallSignIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SHORT_VIDEO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.shortVideo = new ShortVideo();
              struct.shortVideo.read(iprot);
              struct.setShortVideoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DEBUG_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.debugInfo = iprot.readString();
              struct.setDebugInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ATTACH_CONTENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.attachContent = iprot.readString();
              struct.setAttachContentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // INTERNAL_USE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.internalUse = new InternalUse();
              struct.internalUse.read(iprot);
              struct.setInternalUseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PUBLISHER_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.publisherInfo = new PublisherInfo();
              struct.publisherInfo.read(iprot);
              struct.setPublisherInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // LIVE_STREAM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.liveStream = new LiveStream();
              struct.liveStream.read(iprot);
              struct.setLiveStreamIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Result struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.resultType != null) {
        oprot.writeFieldBegin(RESULT_TYPE_FIELD_DESC);
        oprot.writeString(struct.resultType);
        oprot.writeFieldEnd();
      }
      if (struct.isSetRecallSign()) {
        oprot.writeFieldBegin(RECALL_SIGN_FIELD_DESC);
        oprot.writeI64(struct.recallSign);
        oprot.writeFieldEnd();
      }
      if (struct.shortVideo != null) {
        oprot.writeFieldBegin(SHORT_VIDEO_FIELD_DESC);
        struct.shortVideo.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.debugInfo != null) {
        oprot.writeFieldBegin(DEBUG_INFO_FIELD_DESC);
        oprot.writeString(struct.debugInfo);
        oprot.writeFieldEnd();
      }
      if (struct.attachContent != null) {
        oprot.writeFieldBegin(ATTACH_CONTENT_FIELD_DESC);
        oprot.writeString(struct.attachContent);
        oprot.writeFieldEnd();
      }
      if (struct.internalUse != null) {
        oprot.writeFieldBegin(INTERNAL_USE_FIELD_DESC);
        struct.internalUse.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.publisherInfo != null) {
        if (struct.isSetPublisherInfo()) {
          oprot.writeFieldBegin(PUBLISHER_INFO_FIELD_DESC);
          struct.publisherInfo.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.id != null) {
        if (struct.isSetId()) {
          oprot.writeFieldBegin(ID_FIELD_DESC);
          oprot.writeString(struct.id);
          oprot.writeFieldEnd();
        }
      }
      if (struct.liveStream != null) {
        oprot.writeFieldBegin(LIVE_STREAM_FIELD_DESC);
        struct.liveStream.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ResultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ResultTupleScheme getScheme() {
      return new ResultTupleScheme();
    }
  }

  private static class ResultTupleScheme extends org.apache.thrift.scheme.TupleScheme<Result> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Result struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetResultType()) {
        optionals.set(0);
      }
      if (struct.isSetRecallSign()) {
        optionals.set(1);
      }
      if (struct.isSetShortVideo()) {
        optionals.set(2);
      }
      if (struct.isSetDebugInfo()) {
        optionals.set(3);
      }
      if (struct.isSetAttachContent()) {
        optionals.set(4);
      }
      if (struct.isSetInternalUse()) {
        optionals.set(5);
      }
      if (struct.isSetPublisherInfo()) {
        optionals.set(6);
      }
      if (struct.isSetId()) {
        optionals.set(7);
      }
      if (struct.isSetLiveStream()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetResultType()) {
        oprot.writeString(struct.resultType);
      }
      if (struct.isSetRecallSign()) {
        oprot.writeI64(struct.recallSign);
      }
      if (struct.isSetShortVideo()) {
        struct.shortVideo.write(oprot);
      }
      if (struct.isSetDebugInfo()) {
        oprot.writeString(struct.debugInfo);
      }
      if (struct.isSetAttachContent()) {
        oprot.writeString(struct.attachContent);
      }
      if (struct.isSetInternalUse()) {
        struct.internalUse.write(oprot);
      }
      if (struct.isSetPublisherInfo()) {
        struct.publisherInfo.write(oprot);
      }
      if (struct.isSetId()) {
        oprot.writeString(struct.id);
      }
      if (struct.isSetLiveStream()) {
        struct.liveStream.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Result struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.resultType = iprot.readString();
        struct.setResultTypeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.recallSign = iprot.readI64();
        struct.setRecallSignIsSet(true);
      }
      if (incoming.get(2)) {
        struct.shortVideo = new ShortVideo();
        struct.shortVideo.read(iprot);
        struct.setShortVideoIsSet(true);
      }
      if (incoming.get(3)) {
        struct.debugInfo = iprot.readString();
        struct.setDebugInfoIsSet(true);
      }
      if (incoming.get(4)) {
        struct.attachContent = iprot.readString();
        struct.setAttachContentIsSet(true);
      }
      if (incoming.get(5)) {
        struct.internalUse = new InternalUse();
        struct.internalUse.read(iprot);
        struct.setInternalUseIsSet(true);
      }
      if (incoming.get(6)) {
        struct.publisherInfo = new PublisherInfo();
        struct.publisherInfo.read(iprot);
        struct.setPublisherInfoIsSet(true);
      }
      if (incoming.get(7)) {
        struct.id = iprot.readString();
        struct.setIdIsSet(true);
      }
      if (incoming.get(8)) {
        struct.liveStream = new LiveStream();
        struct.liveStream.read(iprot);
        struct.setLiveStreamIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

