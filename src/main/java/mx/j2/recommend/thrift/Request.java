/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package mx.j2.recommend.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2021-06-02")
public class Request implements org.apache.thrift.TBase<Request, Request._Fields>, java.io.Serializable, Cloneable, Comparable<Request> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Request");

  private static final org.apache.thrift.protocol.TField INTERFACE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("interfaceName", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField USER_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("userInfo", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField PLATFORM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("platformId", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField TAB_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("tabId", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("num", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.BYTE, (short)6);
  private static final org.apache.thrift.protocol.TField LOG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("logId", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField RESOURCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("resourceId", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField RESOURCE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("resourceType", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField LANGUAGE_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("languageList", org.apache.thrift.protocol.TType.LIST, (short)10);
  private static final org.apache.thrift.protocol.TField APP_SOURCE_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("appSourceList", org.apache.thrift.protocol.TType.LIST, (short)11);
  private static final org.apache.thrift.protocol.TField NEXT_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("nextToken", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField TIME_ZONE_FIELD_DESC = new org.apache.thrift.protocol.TField("timeZone", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField CLIENT_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("clientVersion", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField IS_DEBUG_MODE_OPEN_FIELD_DESC = new org.apache.thrift.protocol.TField("isDebugModeOpen", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField TIME_SIGN_FIELD_DESC = new org.apache.thrift.protocol.TField("timeSign", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField EXEC_TIME_SIGN_FIELD_DESC = new org.apache.thrift.protocol.TField("execTimeSign", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField EXEC_TIME_DELAY_FIELD_DESC = new org.apache.thrift.protocol.TField("execTimeDelay", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField ORIGINAL_INTERFACE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("originalInterfaceName", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField LAST_REFRESH_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("lastRefreshTime", org.apache.thrift.protocol.TType.STRING, (short)20);
  private static final org.apache.thrift.protocol.TField EXTRA_CLIENT_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("extraClientInfo", org.apache.thrift.protocol.TType.STRUCT, (short)21);
  private static final org.apache.thrift.protocol.TField LOCATION_FIELD_DESC = new org.apache.thrift.protocol.TField("location", org.apache.thrift.protocol.TType.STRUCT, (short)22);
  private static final org.apache.thrift.protocol.TField BLOCK_PUBLISHER_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("blockPublisherList", org.apache.thrift.protocol.TType.LIST, (short)23);
  private static final org.apache.thrift.protocol.TField REAL_TIME_CLICK_VIDEO_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("realTimeClickVideoList", org.apache.thrift.protocol.TType.LIST, (short)24);
  private static final org.apache.thrift.protocol.TField REQUEST_FROM_APP_FIELD_DESC = new org.apache.thrift.protocol.TField("requestFromApp", org.apache.thrift.protocol.TType.STRING, (short)25);
  private static final org.apache.thrift.protocol.TField IS_RETRY_REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("isRetryRequest", org.apache.thrift.protocol.TType.BOOL, (short)26);
  private static final org.apache.thrift.protocol.TField IS_ROBOT_REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("isRobotRequest", org.apache.thrift.protocol.TType.BOOL, (short)27);
  private static final org.apache.thrift.protocol.TField OLD_LANGUAGE_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("oldLanguageList", org.apache.thrift.protocol.TType.LIST, (short)28);
  private static final org.apache.thrift.protocol.TField INTEREST_TAG_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("interestTagList", org.apache.thrift.protocol.TType.LIST, (short)29);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new RequestStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new RequestTupleSchemeFactory();

  public java.lang.String interfaceName; // required
  public UserInfo userInfo; // required
  public java.lang.String platformId; // required
  public java.lang.String tabId; // required
  public int num; // required
  public byte type; // required
  public java.lang.String logId; // optional
  public java.lang.String resourceId; // optional
  public java.lang.String resourceType; // optional
  public java.util.List<java.lang.String> languageList; // optional
  public java.util.List<java.lang.String> appSourceList; // optional
  public java.lang.String nextToken; // optional
  public java.lang.String timeZone; // optional
  public java.lang.String clientVersion; // optional
  public java.lang.String isDebugModeOpen; // optional
  public java.lang.String timeSign; // optional
  public java.lang.String execTimeSign; // optional
  public java.lang.String execTimeDelay; // optional
  public java.lang.String originalInterfaceName; // required
  public java.lang.String lastRefreshTime; // optional
  public ExtraClientInfo extraClientInfo; // optional
  public Location location; // optional
  public java.util.List<java.lang.String> blockPublisherList; // optional
  public java.util.List<java.lang.String> realTimeClickVideoList; // optional
  public java.lang.String requestFromApp; // optional
  public boolean isRetryRequest; // optional
  public boolean isRobotRequest; // optional
  public java.util.List<java.lang.String> oldLanguageList; // optional
  public java.util.List<java.lang.String> interestTagList; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    INTERFACE_NAME((short)1, "interfaceName"),
    USER_INFO((short)2, "userInfo"),
    PLATFORM_ID((short)3, "platformId"),
    TAB_ID((short)4, "tabId"),
    NUM((short)5, "num"),
    TYPE((short)6, "type"),
    LOG_ID((short)7, "logId"),
    RESOURCE_ID((short)8, "resourceId"),
    RESOURCE_TYPE((short)9, "resourceType"),
    LANGUAGE_LIST((short)10, "languageList"),
    APP_SOURCE_LIST((short)11, "appSourceList"),
    NEXT_TOKEN((short)12, "nextToken"),
    TIME_ZONE((short)13, "timeZone"),
    CLIENT_VERSION((short)14, "clientVersion"),
    IS_DEBUG_MODE_OPEN((short)15, "isDebugModeOpen"),
    TIME_SIGN((short)16, "timeSign"),
    EXEC_TIME_SIGN((short)17, "execTimeSign"),
    EXEC_TIME_DELAY((short)18, "execTimeDelay"),
    ORIGINAL_INTERFACE_NAME((short)19, "originalInterfaceName"),
    LAST_REFRESH_TIME((short)20, "lastRefreshTime"),
    EXTRA_CLIENT_INFO((short)21, "extraClientInfo"),
    LOCATION((short)22, "location"),
    BLOCK_PUBLISHER_LIST((short)23, "blockPublisherList"),
    REAL_TIME_CLICK_VIDEO_LIST((short)24, "realTimeClickVideoList"),
    REQUEST_FROM_APP((short)25, "requestFromApp"),
    IS_RETRY_REQUEST((short)26, "isRetryRequest"),
    IS_ROBOT_REQUEST((short)27, "isRobotRequest"),
    OLD_LANGUAGE_LIST((short)28, "oldLanguageList"),
    INTEREST_TAG_LIST((short)29, "interestTagList");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // INTERFACE_NAME
          return INTERFACE_NAME;
        case 2: // USER_INFO
          return USER_INFO;
        case 3: // PLATFORM_ID
          return PLATFORM_ID;
        case 4: // TAB_ID
          return TAB_ID;
        case 5: // NUM
          return NUM;
        case 6: // TYPE
          return TYPE;
        case 7: // LOG_ID
          return LOG_ID;
        case 8: // RESOURCE_ID
          return RESOURCE_ID;
        case 9: // RESOURCE_TYPE
          return RESOURCE_TYPE;
        case 10: // LANGUAGE_LIST
          return LANGUAGE_LIST;
        case 11: // APP_SOURCE_LIST
          return APP_SOURCE_LIST;
        case 12: // NEXT_TOKEN
          return NEXT_TOKEN;
        case 13: // TIME_ZONE
          return TIME_ZONE;
        case 14: // CLIENT_VERSION
          return CLIENT_VERSION;
        case 15: // IS_DEBUG_MODE_OPEN
          return IS_DEBUG_MODE_OPEN;
        case 16: // TIME_SIGN
          return TIME_SIGN;
        case 17: // EXEC_TIME_SIGN
          return EXEC_TIME_SIGN;
        case 18: // EXEC_TIME_DELAY
          return EXEC_TIME_DELAY;
        case 19: // ORIGINAL_INTERFACE_NAME
          return ORIGINAL_INTERFACE_NAME;
        case 20: // LAST_REFRESH_TIME
          return LAST_REFRESH_TIME;
        case 21: // EXTRA_CLIENT_INFO
          return EXTRA_CLIENT_INFO;
        case 22: // LOCATION
          return LOCATION;
        case 23: // BLOCK_PUBLISHER_LIST
          return BLOCK_PUBLISHER_LIST;
        case 24: // REAL_TIME_CLICK_VIDEO_LIST
          return REAL_TIME_CLICK_VIDEO_LIST;
        case 25: // REQUEST_FROM_APP
          return REQUEST_FROM_APP;
        case 26: // IS_RETRY_REQUEST
          return IS_RETRY_REQUEST;
        case 27: // IS_ROBOT_REQUEST
          return IS_ROBOT_REQUEST;
        case 28: // OLD_LANGUAGE_LIST
          return OLD_LANGUAGE_LIST;
        case 29: // INTEREST_TAG_LIST
          return INTEREST_TAG_LIST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __NUM_ISSET_ID = 0;
  private static final int __TYPE_ISSET_ID = 1;
  private static final int __ISRETRYREQUEST_ISSET_ID = 2;
  private static final int __ISROBOTREQUEST_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.LOG_ID,_Fields.RESOURCE_ID,_Fields.RESOURCE_TYPE,_Fields.LANGUAGE_LIST,_Fields.APP_SOURCE_LIST,_Fields.NEXT_TOKEN,_Fields.TIME_ZONE,_Fields.CLIENT_VERSION,_Fields.IS_DEBUG_MODE_OPEN,_Fields.TIME_SIGN,_Fields.EXEC_TIME_SIGN,_Fields.EXEC_TIME_DELAY,_Fields.LAST_REFRESH_TIME,_Fields.EXTRA_CLIENT_INFO,_Fields.LOCATION,_Fields.BLOCK_PUBLISHER_LIST,_Fields.REAL_TIME_CLICK_VIDEO_LIST,_Fields.REQUEST_FROM_APP,_Fields.IS_RETRY_REQUEST,_Fields.IS_ROBOT_REQUEST,_Fields.OLD_LANGUAGE_LIST,_Fields.INTEREST_TAG_LIST};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.INTERFACE_NAME, new org.apache.thrift.meta_data.FieldMetaData("interfaceName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_INFO, new org.apache.thrift.meta_data.FieldMetaData("userInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UserInfo.class)));
    tmpMap.put(_Fields.PLATFORM_ID, new org.apache.thrift.meta_data.FieldMetaData("platformId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TAB_ID, new org.apache.thrift.meta_data.FieldMetaData("tabId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NUM, new org.apache.thrift.meta_data.FieldMetaData("num", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.LOG_ID, new org.apache.thrift.meta_data.FieldMetaData("logId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RESOURCE_ID, new org.apache.thrift.meta_data.FieldMetaData("resourceId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RESOURCE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("resourceType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LANGUAGE_LIST, new org.apache.thrift.meta_data.FieldMetaData("languageList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.APP_SOURCE_LIST, new org.apache.thrift.meta_data.FieldMetaData("appSourceList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.NEXT_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("nextToken", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TIME_ZONE, new org.apache.thrift.meta_data.FieldMetaData("timeZone", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CLIENT_VERSION, new org.apache.thrift.meta_data.FieldMetaData("clientVersion", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_DEBUG_MODE_OPEN, new org.apache.thrift.meta_data.FieldMetaData("isDebugModeOpen", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TIME_SIGN, new org.apache.thrift.meta_data.FieldMetaData("timeSign", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXEC_TIME_SIGN, new org.apache.thrift.meta_data.FieldMetaData("execTimeSign", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXEC_TIME_DELAY, new org.apache.thrift.meta_data.FieldMetaData("execTimeDelay", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORIGINAL_INTERFACE_NAME, new org.apache.thrift.meta_data.FieldMetaData("originalInterfaceName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LAST_REFRESH_TIME, new org.apache.thrift.meta_data.FieldMetaData("lastRefreshTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXTRA_CLIENT_INFO, new org.apache.thrift.meta_data.FieldMetaData("extraClientInfo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ExtraClientInfo.class)));
    tmpMap.put(_Fields.LOCATION, new org.apache.thrift.meta_data.FieldMetaData("location", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Location.class)));
    tmpMap.put(_Fields.BLOCK_PUBLISHER_LIST, new org.apache.thrift.meta_data.FieldMetaData("blockPublisherList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.REAL_TIME_CLICK_VIDEO_LIST, new org.apache.thrift.meta_data.FieldMetaData("realTimeClickVideoList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.REQUEST_FROM_APP, new org.apache.thrift.meta_data.FieldMetaData("requestFromApp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_RETRY_REQUEST, new org.apache.thrift.meta_data.FieldMetaData("isRetryRequest", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IS_ROBOT_REQUEST, new org.apache.thrift.meta_data.FieldMetaData("isRobotRequest", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.OLD_LANGUAGE_LIST, new org.apache.thrift.meta_data.FieldMetaData("oldLanguageList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.INTEREST_TAG_LIST, new org.apache.thrift.meta_data.FieldMetaData("interestTagList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Request.class, metaDataMap);
  }

  public Request() {
  }

  public Request(
    java.lang.String interfaceName,
    UserInfo userInfo,
    java.lang.String platformId,
    java.lang.String tabId,
    int num,
    byte type,
    java.lang.String originalInterfaceName)
  {
    this();
    this.interfaceName = interfaceName;
    this.userInfo = userInfo;
    this.platformId = platformId;
    this.tabId = tabId;
    this.num = num;
    setNumIsSet(true);
    this.type = type;
    setTypeIsSet(true);
    this.originalInterfaceName = originalInterfaceName;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Request(Request other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetInterfaceName()) {
      this.interfaceName = other.interfaceName;
    }
    if (other.isSetUserInfo()) {
      this.userInfo = new UserInfo(other.userInfo);
    }
    if (other.isSetPlatformId()) {
      this.platformId = other.platformId;
    }
    if (other.isSetTabId()) {
      this.tabId = other.tabId;
    }
    this.num = other.num;
    this.type = other.type;
    if (other.isSetLogId()) {
      this.logId = other.logId;
    }
    if (other.isSetResourceId()) {
      this.resourceId = other.resourceId;
    }
    if (other.isSetResourceType()) {
      this.resourceType = other.resourceType;
    }
    if (other.isSetLanguageList()) {
      java.util.List<java.lang.String> __this__languageList = new java.util.ArrayList<java.lang.String>(other.languageList);
      this.languageList = __this__languageList;
    }
    if (other.isSetAppSourceList()) {
      java.util.List<java.lang.String> __this__appSourceList = new java.util.ArrayList<java.lang.String>(other.appSourceList);
      this.appSourceList = __this__appSourceList;
    }
    if (other.isSetNextToken()) {
      this.nextToken = other.nextToken;
    }
    if (other.isSetTimeZone()) {
      this.timeZone = other.timeZone;
    }
    if (other.isSetClientVersion()) {
      this.clientVersion = other.clientVersion;
    }
    if (other.isSetIsDebugModeOpen()) {
      this.isDebugModeOpen = other.isDebugModeOpen;
    }
    if (other.isSetTimeSign()) {
      this.timeSign = other.timeSign;
    }
    if (other.isSetExecTimeSign()) {
      this.execTimeSign = other.execTimeSign;
    }
    if (other.isSetExecTimeDelay()) {
      this.execTimeDelay = other.execTimeDelay;
    }
    if (other.isSetOriginalInterfaceName()) {
      this.originalInterfaceName = other.originalInterfaceName;
    }
    if (other.isSetLastRefreshTime()) {
      this.lastRefreshTime = other.lastRefreshTime;
    }
    if (other.isSetExtraClientInfo()) {
      this.extraClientInfo = new ExtraClientInfo(other.extraClientInfo);
    }
    if (other.isSetLocation()) {
      this.location = new Location(other.location);
    }
    if (other.isSetBlockPublisherList()) {
      java.util.List<java.lang.String> __this__blockPublisherList = new java.util.ArrayList<java.lang.String>(other.blockPublisherList);
      this.blockPublisherList = __this__blockPublisherList;
    }
    if (other.isSetRealTimeClickVideoList()) {
      java.util.List<java.lang.String> __this__realTimeClickVideoList = new java.util.ArrayList<java.lang.String>(other.realTimeClickVideoList);
      this.realTimeClickVideoList = __this__realTimeClickVideoList;
    }
    if (other.isSetRequestFromApp()) {
      this.requestFromApp = other.requestFromApp;
    }
    this.isRetryRequest = other.isRetryRequest;
    this.isRobotRequest = other.isRobotRequest;
    if (other.isSetOldLanguageList()) {
      java.util.List<java.lang.String> __this__oldLanguageList = new java.util.ArrayList<java.lang.String>(other.oldLanguageList);
      this.oldLanguageList = __this__oldLanguageList;
    }
    if (other.isSetInterestTagList()) {
      java.util.List<java.lang.String> __this__interestTagList = new java.util.ArrayList<java.lang.String>(other.interestTagList);
      this.interestTagList = __this__interestTagList;
    }
  }

  public Request deepCopy() {
    return new Request(this);
  }

  @Override
  public void clear() {
    this.interfaceName = null;
    this.userInfo = null;
    this.platformId = null;
    this.tabId = null;
    setNumIsSet(false);
    this.num = 0;
    setTypeIsSet(false);
    this.type = 0;
    this.logId = null;
    this.resourceId = null;
    this.resourceType = null;
    this.languageList = null;
    this.appSourceList = null;
    this.nextToken = null;
    this.timeZone = null;
    this.clientVersion = null;
    this.isDebugModeOpen = null;
    this.timeSign = null;
    this.execTimeSign = null;
    this.execTimeDelay = null;
    this.originalInterfaceName = null;
    this.lastRefreshTime = null;
    this.extraClientInfo = null;
    this.location = null;
    this.blockPublisherList = null;
    this.realTimeClickVideoList = null;
    this.requestFromApp = null;
    setIsRetryRequestIsSet(false);
    this.isRetryRequest = false;
    setIsRobotRequestIsSet(false);
    this.isRobotRequest = false;
    this.oldLanguageList = null;
    this.interestTagList = null;
  }

  public java.lang.String getInterfaceName() {
    return this.interfaceName;
  }

  public Request setInterfaceName(java.lang.String interfaceName) {
    this.interfaceName = interfaceName;
    return this;
  }

  public void unsetInterfaceName() {
    this.interfaceName = null;
  }

  /** Returns true if field interfaceName is set (has been assigned a value) and false otherwise */
  public boolean isSetInterfaceName() {
    return this.interfaceName != null;
  }

  public void setInterfaceNameIsSet(boolean value) {
    if (!value) {
      this.interfaceName = null;
    }
  }

  public UserInfo getUserInfo() {
    return this.userInfo;
  }

  public Request setUserInfo(UserInfo userInfo) {
    this.userInfo = userInfo;
    return this;
  }

  public void unsetUserInfo() {
    this.userInfo = null;
  }

  /** Returns true if field userInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetUserInfo() {
    return this.userInfo != null;
  }

  public void setUserInfoIsSet(boolean value) {
    if (!value) {
      this.userInfo = null;
    }
  }

  public java.lang.String getPlatformId() {
    return this.platformId;
  }

  public Request setPlatformId(java.lang.String platformId) {
    this.platformId = platformId;
    return this;
  }

  public void unsetPlatformId() {
    this.platformId = null;
  }

  /** Returns true if field platformId is set (has been assigned a value) and false otherwise */
  public boolean isSetPlatformId() {
    return this.platformId != null;
  }

  public void setPlatformIdIsSet(boolean value) {
    if (!value) {
      this.platformId = null;
    }
  }

  public java.lang.String getTabId() {
    return this.tabId;
  }

  public Request setTabId(java.lang.String tabId) {
    this.tabId = tabId;
    return this;
  }

  public void unsetTabId() {
    this.tabId = null;
  }

  /** Returns true if field tabId is set (has been assigned a value) and false otherwise */
  public boolean isSetTabId() {
    return this.tabId != null;
  }

  public void setTabIdIsSet(boolean value) {
    if (!value) {
      this.tabId = null;
    }
  }

  public int getNum() {
    return this.num;
  }

  public Request setNum(int num) {
    this.num = num;
    setNumIsSet(true);
    return this;
  }

  public void unsetNum() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUM_ISSET_ID);
  }

  /** Returns true if field num is set (has been assigned a value) and false otherwise */
  public boolean isSetNum() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUM_ISSET_ID);
  }

  public void setNumIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUM_ISSET_ID, value);
  }

  public byte getType() {
    return this.type;
  }

  public Request setType(byte type) {
    this.type = type;
    setTypeIsSet(true);
    return this;
  }

  public void unsetType() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TYPE_ISSET_ID);
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TYPE_ISSET_ID);
  }

  public void setTypeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TYPE_ISSET_ID, value);
  }

  public java.lang.String getLogId() {
    return this.logId;
  }

  public Request setLogId(java.lang.String logId) {
    this.logId = logId;
    return this;
  }

  public void unsetLogId() {
    this.logId = null;
  }

  /** Returns true if field logId is set (has been assigned a value) and false otherwise */
  public boolean isSetLogId() {
    return this.logId != null;
  }

  public void setLogIdIsSet(boolean value) {
    if (!value) {
      this.logId = null;
    }
  }

  public java.lang.String getResourceId() {
    return this.resourceId;
  }

  public Request setResourceId(java.lang.String resourceId) {
    this.resourceId = resourceId;
    return this;
  }

  public void unsetResourceId() {
    this.resourceId = null;
  }

  /** Returns true if field resourceId is set (has been assigned a value) and false otherwise */
  public boolean isSetResourceId() {
    return this.resourceId != null;
  }

  public void setResourceIdIsSet(boolean value) {
    if (!value) {
      this.resourceId = null;
    }
  }

  public java.lang.String getResourceType() {
    return this.resourceType;
  }

  public Request setResourceType(java.lang.String resourceType) {
    this.resourceType = resourceType;
    return this;
  }

  public void unsetResourceType() {
    this.resourceType = null;
  }

  /** Returns true if field resourceType is set (has been assigned a value) and false otherwise */
  public boolean isSetResourceType() {
    return this.resourceType != null;
  }

  public void setResourceTypeIsSet(boolean value) {
    if (!value) {
      this.resourceType = null;
    }
  }

  public int getLanguageListSize() {
    return (this.languageList == null) ? 0 : this.languageList.size();
  }

  public java.util.Iterator<java.lang.String> getLanguageListIterator() {
    return (this.languageList == null) ? null : this.languageList.iterator();
  }

  public void addToLanguageList(java.lang.String elem) {
    if (this.languageList == null) {
      this.languageList = new java.util.ArrayList<java.lang.String>();
    }
    this.languageList.add(elem);
  }

  public java.util.List<java.lang.String> getLanguageList() {
    return this.languageList;
  }

  public Request setLanguageList(java.util.List<java.lang.String> languageList) {
    this.languageList = languageList;
    return this;
  }

  public void unsetLanguageList() {
    this.languageList = null;
  }

  /** Returns true if field languageList is set (has been assigned a value) and false otherwise */
  public boolean isSetLanguageList() {
    return this.languageList != null;
  }

  public void setLanguageListIsSet(boolean value) {
    if (!value) {
      this.languageList = null;
    }
  }

  public int getAppSourceListSize() {
    return (this.appSourceList == null) ? 0 : this.appSourceList.size();
  }

  public java.util.Iterator<java.lang.String> getAppSourceListIterator() {
    return (this.appSourceList == null) ? null : this.appSourceList.iterator();
  }

  public void addToAppSourceList(java.lang.String elem) {
    if (this.appSourceList == null) {
      this.appSourceList = new java.util.ArrayList<java.lang.String>();
    }
    this.appSourceList.add(elem);
  }

  public java.util.List<java.lang.String> getAppSourceList() {
    return this.appSourceList;
  }

  public Request setAppSourceList(java.util.List<java.lang.String> appSourceList) {
    this.appSourceList = appSourceList;
    return this;
  }

  public void unsetAppSourceList() {
    this.appSourceList = null;
  }

  /** Returns true if field appSourceList is set (has been assigned a value) and false otherwise */
  public boolean isSetAppSourceList() {
    return this.appSourceList != null;
  }

  public void setAppSourceListIsSet(boolean value) {
    if (!value) {
      this.appSourceList = null;
    }
  }

  public java.lang.String getNextToken() {
    return this.nextToken;
  }

  public Request setNextToken(java.lang.String nextToken) {
    this.nextToken = nextToken;
    return this;
  }

  public void unsetNextToken() {
    this.nextToken = null;
  }

  /** Returns true if field nextToken is set (has been assigned a value) and false otherwise */
  public boolean isSetNextToken() {
    return this.nextToken != null;
  }

  public void setNextTokenIsSet(boolean value) {
    if (!value) {
      this.nextToken = null;
    }
  }

  public java.lang.String getTimeZone() {
    return this.timeZone;
  }

  public Request setTimeZone(java.lang.String timeZone) {
    this.timeZone = timeZone;
    return this;
  }

  public void unsetTimeZone() {
    this.timeZone = null;
  }

  /** Returns true if field timeZone is set (has been assigned a value) and false otherwise */
  public boolean isSetTimeZone() {
    return this.timeZone != null;
  }

  public void setTimeZoneIsSet(boolean value) {
    if (!value) {
      this.timeZone = null;
    }
  }

  public java.lang.String getClientVersion() {
    return this.clientVersion;
  }

  public Request setClientVersion(java.lang.String clientVersion) {
    this.clientVersion = clientVersion;
    return this;
  }

  public void unsetClientVersion() {
    this.clientVersion = null;
  }

  /** Returns true if field clientVersion is set (has been assigned a value) and false otherwise */
  public boolean isSetClientVersion() {
    return this.clientVersion != null;
  }

  public void setClientVersionIsSet(boolean value) {
    if (!value) {
      this.clientVersion = null;
    }
  }

  public java.lang.String getIsDebugModeOpen() {
    return this.isDebugModeOpen;
  }

  public Request setIsDebugModeOpen(java.lang.String isDebugModeOpen) {
    this.isDebugModeOpen = isDebugModeOpen;
    return this;
  }

  public void unsetIsDebugModeOpen() {
    this.isDebugModeOpen = null;
  }

  /** Returns true if field isDebugModeOpen is set (has been assigned a value) and false otherwise */
  public boolean isSetIsDebugModeOpen() {
    return this.isDebugModeOpen != null;
  }

  public void setIsDebugModeOpenIsSet(boolean value) {
    if (!value) {
      this.isDebugModeOpen = null;
    }
  }

  public java.lang.String getTimeSign() {
    return this.timeSign;
  }

  public Request setTimeSign(java.lang.String timeSign) {
    this.timeSign = timeSign;
    return this;
  }

  public void unsetTimeSign() {
    this.timeSign = null;
  }

  /** Returns true if field timeSign is set (has been assigned a value) and false otherwise */
  public boolean isSetTimeSign() {
    return this.timeSign != null;
  }

  public void setTimeSignIsSet(boolean value) {
    if (!value) {
      this.timeSign = null;
    }
  }

  public java.lang.String getExecTimeSign() {
    return this.execTimeSign;
  }

  public Request setExecTimeSign(java.lang.String execTimeSign) {
    this.execTimeSign = execTimeSign;
    return this;
  }

  public void unsetExecTimeSign() {
    this.execTimeSign = null;
  }

  /** Returns true if field execTimeSign is set (has been assigned a value) and false otherwise */
  public boolean isSetExecTimeSign() {
    return this.execTimeSign != null;
  }

  public void setExecTimeSignIsSet(boolean value) {
    if (!value) {
      this.execTimeSign = null;
    }
  }

  public java.lang.String getExecTimeDelay() {
    return this.execTimeDelay;
  }

  public Request setExecTimeDelay(java.lang.String execTimeDelay) {
    this.execTimeDelay = execTimeDelay;
    return this;
  }

  public void unsetExecTimeDelay() {
    this.execTimeDelay = null;
  }

  /** Returns true if field execTimeDelay is set (has been assigned a value) and false otherwise */
  public boolean isSetExecTimeDelay() {
    return this.execTimeDelay != null;
  }

  public void setExecTimeDelayIsSet(boolean value) {
    if (!value) {
      this.execTimeDelay = null;
    }
  }

  public java.lang.String getOriginalInterfaceName() {
    return this.originalInterfaceName;
  }

  public Request setOriginalInterfaceName(java.lang.String originalInterfaceName) {
    this.originalInterfaceName = originalInterfaceName;
    return this;
  }

  public void unsetOriginalInterfaceName() {
    this.originalInterfaceName = null;
  }

  /** Returns true if field originalInterfaceName is set (has been assigned a value) and false otherwise */
  public boolean isSetOriginalInterfaceName() {
    return this.originalInterfaceName != null;
  }

  public void setOriginalInterfaceNameIsSet(boolean value) {
    if (!value) {
      this.originalInterfaceName = null;
    }
  }

  public java.lang.String getLastRefreshTime() {
    return this.lastRefreshTime;
  }

  public Request setLastRefreshTime(java.lang.String lastRefreshTime) {
    this.lastRefreshTime = lastRefreshTime;
    return this;
  }

  public void unsetLastRefreshTime() {
    this.lastRefreshTime = null;
  }

  /** Returns true if field lastRefreshTime is set (has been assigned a value) and false otherwise */
  public boolean isSetLastRefreshTime() {
    return this.lastRefreshTime != null;
  }

  public void setLastRefreshTimeIsSet(boolean value) {
    if (!value) {
      this.lastRefreshTime = null;
    }
  }

  public ExtraClientInfo getExtraClientInfo() {
    return this.extraClientInfo;
  }

  public Request setExtraClientInfo(ExtraClientInfo extraClientInfo) {
    this.extraClientInfo = extraClientInfo;
    return this;
  }

  public void unsetExtraClientInfo() {
    this.extraClientInfo = null;
  }

  /** Returns true if field extraClientInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetExtraClientInfo() {
    return this.extraClientInfo != null;
  }

  public void setExtraClientInfoIsSet(boolean value) {
    if (!value) {
      this.extraClientInfo = null;
    }
  }

  public Location getLocation() {
    return this.location;
  }

  public Request setLocation(Location location) {
    this.location = location;
    return this;
  }

  public void unsetLocation() {
    this.location = null;
  }

  /** Returns true if field location is set (has been assigned a value) and false otherwise */
  public boolean isSetLocation() {
    return this.location != null;
  }

  public void setLocationIsSet(boolean value) {
    if (!value) {
      this.location = null;
    }
  }

  public int getBlockPublisherListSize() {
    return (this.blockPublisherList == null) ? 0 : this.blockPublisherList.size();
  }

  public java.util.Iterator<java.lang.String> getBlockPublisherListIterator() {
    return (this.blockPublisherList == null) ? null : this.blockPublisherList.iterator();
  }

  public void addToBlockPublisherList(java.lang.String elem) {
    if (this.blockPublisherList == null) {
      this.blockPublisherList = new java.util.ArrayList<java.lang.String>();
    }
    this.blockPublisherList.add(elem);
  }

  public java.util.List<java.lang.String> getBlockPublisherList() {
    return this.blockPublisherList;
  }

  public Request setBlockPublisherList(java.util.List<java.lang.String> blockPublisherList) {
    this.blockPublisherList = blockPublisherList;
    return this;
  }

  public void unsetBlockPublisherList() {
    this.blockPublisherList = null;
  }

  /** Returns true if field blockPublisherList is set (has been assigned a value) and false otherwise */
  public boolean isSetBlockPublisherList() {
    return this.blockPublisherList != null;
  }

  public void setBlockPublisherListIsSet(boolean value) {
    if (!value) {
      this.blockPublisherList = null;
    }
  }

  public int getRealTimeClickVideoListSize() {
    return (this.realTimeClickVideoList == null) ? 0 : this.realTimeClickVideoList.size();
  }

  public java.util.Iterator<java.lang.String> getRealTimeClickVideoListIterator() {
    return (this.realTimeClickVideoList == null) ? null : this.realTimeClickVideoList.iterator();
  }

  public void addToRealTimeClickVideoList(java.lang.String elem) {
    if (this.realTimeClickVideoList == null) {
      this.realTimeClickVideoList = new java.util.ArrayList<java.lang.String>();
    }
    this.realTimeClickVideoList.add(elem);
  }

  public java.util.List<java.lang.String> getRealTimeClickVideoList() {
    return this.realTimeClickVideoList;
  }

  public Request setRealTimeClickVideoList(java.util.List<java.lang.String> realTimeClickVideoList) {
    this.realTimeClickVideoList = realTimeClickVideoList;
    return this;
  }

  public void unsetRealTimeClickVideoList() {
    this.realTimeClickVideoList = null;
  }

  /** Returns true if field realTimeClickVideoList is set (has been assigned a value) and false otherwise */
  public boolean isSetRealTimeClickVideoList() {
    return this.realTimeClickVideoList != null;
  }

  public void setRealTimeClickVideoListIsSet(boolean value) {
    if (!value) {
      this.realTimeClickVideoList = null;
    }
  }

  public java.lang.String getRequestFromApp() {
    return this.requestFromApp;
  }

  public Request setRequestFromApp(java.lang.String requestFromApp) {
    this.requestFromApp = requestFromApp;
    return this;
  }

  public void unsetRequestFromApp() {
    this.requestFromApp = null;
  }

  /** Returns true if field requestFromApp is set (has been assigned a value) and false otherwise */
  public boolean isSetRequestFromApp() {
    return this.requestFromApp != null;
  }

  public void setRequestFromAppIsSet(boolean value) {
    if (!value) {
      this.requestFromApp = null;
    }
  }

  public boolean isIsRetryRequest() {
    return this.isRetryRequest;
  }

  public Request setIsRetryRequest(boolean isRetryRequest) {
    this.isRetryRequest = isRetryRequest;
    setIsRetryRequestIsSet(true);
    return this;
  }

  public void unsetIsRetryRequest() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISRETRYREQUEST_ISSET_ID);
  }

  /** Returns true if field isRetryRequest is set (has been assigned a value) and false otherwise */
  public boolean isSetIsRetryRequest() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISRETRYREQUEST_ISSET_ID);
  }

  public void setIsRetryRequestIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISRETRYREQUEST_ISSET_ID, value);
  }

  public boolean isIsRobotRequest() {
    return this.isRobotRequest;
  }

  public Request setIsRobotRequest(boolean isRobotRequest) {
    this.isRobotRequest = isRobotRequest;
    setIsRobotRequestIsSet(true);
    return this;
  }

  public void unsetIsRobotRequest() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISROBOTREQUEST_ISSET_ID);
  }

  /** Returns true if field isRobotRequest is set (has been assigned a value) and false otherwise */
  public boolean isSetIsRobotRequest() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISROBOTREQUEST_ISSET_ID);
  }

  public void setIsRobotRequestIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISROBOTREQUEST_ISSET_ID, value);
  }

  public int getOldLanguageListSize() {
    return (this.oldLanguageList == null) ? 0 : this.oldLanguageList.size();
  }

  public java.util.Iterator<java.lang.String> getOldLanguageListIterator() {
    return (this.oldLanguageList == null) ? null : this.oldLanguageList.iterator();
  }

  public void addToOldLanguageList(java.lang.String elem) {
    if (this.oldLanguageList == null) {
      this.oldLanguageList = new java.util.ArrayList<java.lang.String>();
    }
    this.oldLanguageList.add(elem);
  }

  public java.util.List<java.lang.String> getOldLanguageList() {
    return this.oldLanguageList;
  }

  public Request setOldLanguageList(java.util.List<java.lang.String> oldLanguageList) {
    this.oldLanguageList = oldLanguageList;
    return this;
  }

  public void unsetOldLanguageList() {
    this.oldLanguageList = null;
  }

  /** Returns true if field oldLanguageList is set (has been assigned a value) and false otherwise */
  public boolean isSetOldLanguageList() {
    return this.oldLanguageList != null;
  }

  public void setOldLanguageListIsSet(boolean value) {
    if (!value) {
      this.oldLanguageList = null;
    }
  }

  public int getInterestTagListSize() {
    return (this.interestTagList == null) ? 0 : this.interestTagList.size();
  }

  public java.util.Iterator<java.lang.String> getInterestTagListIterator() {
    return (this.interestTagList == null) ? null : this.interestTagList.iterator();
  }

  public void addToInterestTagList(java.lang.String elem) {
    if (this.interestTagList == null) {
      this.interestTagList = new java.util.ArrayList<java.lang.String>();
    }
    this.interestTagList.add(elem);
  }

  public java.util.List<java.lang.String> getInterestTagList() {
    return this.interestTagList;
  }

  public Request setInterestTagList(java.util.List<java.lang.String> interestTagList) {
    this.interestTagList = interestTagList;
    return this;
  }

  public void unsetInterestTagList() {
    this.interestTagList = null;
  }

  /** Returns true if field interestTagList is set (has been assigned a value) and false otherwise */
  public boolean isSetInterestTagList() {
    return this.interestTagList != null;
  }

  public void setInterestTagListIsSet(boolean value) {
    if (!value) {
      this.interestTagList = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case INTERFACE_NAME:
      if (value == null) {
        unsetInterfaceName();
      } else {
        setInterfaceName((java.lang.String)value);
      }
      break;

    case USER_INFO:
      if (value == null) {
        unsetUserInfo();
      } else {
        setUserInfo((UserInfo)value);
      }
      break;

    case PLATFORM_ID:
      if (value == null) {
        unsetPlatformId();
      } else {
        setPlatformId((java.lang.String)value);
      }
      break;

    case TAB_ID:
      if (value == null) {
        unsetTabId();
      } else {
        setTabId((java.lang.String)value);
      }
      break;

    case NUM:
      if (value == null) {
        unsetNum();
      } else {
        setNum((java.lang.Integer)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((java.lang.Byte)value);
      }
      break;

    case LOG_ID:
      if (value == null) {
        unsetLogId();
      } else {
        setLogId((java.lang.String)value);
      }
      break;

    case RESOURCE_ID:
      if (value == null) {
        unsetResourceId();
      } else {
        setResourceId((java.lang.String)value);
      }
      break;

    case RESOURCE_TYPE:
      if (value == null) {
        unsetResourceType();
      } else {
        setResourceType((java.lang.String)value);
      }
      break;

    case LANGUAGE_LIST:
      if (value == null) {
        unsetLanguageList();
      } else {
        setLanguageList((java.util.List<java.lang.String>)value);
      }
      break;

    case APP_SOURCE_LIST:
      if (value == null) {
        unsetAppSourceList();
      } else {
        setAppSourceList((java.util.List<java.lang.String>)value);
      }
      break;

    case NEXT_TOKEN:
      if (value == null) {
        unsetNextToken();
      } else {
        setNextToken((java.lang.String)value);
      }
      break;

    case TIME_ZONE:
      if (value == null) {
        unsetTimeZone();
      } else {
        setTimeZone((java.lang.String)value);
      }
      break;

    case CLIENT_VERSION:
      if (value == null) {
        unsetClientVersion();
      } else {
        setClientVersion((java.lang.String)value);
      }
      break;

    case IS_DEBUG_MODE_OPEN:
      if (value == null) {
        unsetIsDebugModeOpen();
      } else {
        setIsDebugModeOpen((java.lang.String)value);
      }
      break;

    case TIME_SIGN:
      if (value == null) {
        unsetTimeSign();
      } else {
        setTimeSign((java.lang.String)value);
      }
      break;

    case EXEC_TIME_SIGN:
      if (value == null) {
        unsetExecTimeSign();
      } else {
        setExecTimeSign((java.lang.String)value);
      }
      break;

    case EXEC_TIME_DELAY:
      if (value == null) {
        unsetExecTimeDelay();
      } else {
        setExecTimeDelay((java.lang.String)value);
      }
      break;

    case ORIGINAL_INTERFACE_NAME:
      if (value == null) {
        unsetOriginalInterfaceName();
      } else {
        setOriginalInterfaceName((java.lang.String)value);
      }
      break;

    case LAST_REFRESH_TIME:
      if (value == null) {
        unsetLastRefreshTime();
      } else {
        setLastRefreshTime((java.lang.String)value);
      }
      break;

    case EXTRA_CLIENT_INFO:
      if (value == null) {
        unsetExtraClientInfo();
      } else {
        setExtraClientInfo((ExtraClientInfo)value);
      }
      break;

    case LOCATION:
      if (value == null) {
        unsetLocation();
      } else {
        setLocation((Location)value);
      }
      break;

    case BLOCK_PUBLISHER_LIST:
      if (value == null) {
        unsetBlockPublisherList();
      } else {
        setBlockPublisherList((java.util.List<java.lang.String>)value);
      }
      break;

    case REAL_TIME_CLICK_VIDEO_LIST:
      if (value == null) {
        unsetRealTimeClickVideoList();
      } else {
        setRealTimeClickVideoList((java.util.List<java.lang.String>)value);
      }
      break;

    case REQUEST_FROM_APP:
      if (value == null) {
        unsetRequestFromApp();
      } else {
        setRequestFromApp((java.lang.String)value);
      }
      break;

    case IS_RETRY_REQUEST:
      if (value == null) {
        unsetIsRetryRequest();
      } else {
        setIsRetryRequest((java.lang.Boolean)value);
      }
      break;

    case IS_ROBOT_REQUEST:
      if (value == null) {
        unsetIsRobotRequest();
      } else {
        setIsRobotRequest((java.lang.Boolean)value);
      }
      break;

    case OLD_LANGUAGE_LIST:
      if (value == null) {
        unsetOldLanguageList();
      } else {
        setOldLanguageList((java.util.List<java.lang.String>)value);
      }
      break;

    case INTEREST_TAG_LIST:
      if (value == null) {
        unsetInterestTagList();
      } else {
        setInterestTagList((java.util.List<java.lang.String>)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case INTERFACE_NAME:
      return getInterfaceName();

    case USER_INFO:
      return getUserInfo();

    case PLATFORM_ID:
      return getPlatformId();

    case TAB_ID:
      return getTabId();

    case NUM:
      return getNum();

    case TYPE:
      return getType();

    case LOG_ID:
      return getLogId();

    case RESOURCE_ID:
      return getResourceId();

    case RESOURCE_TYPE:
      return getResourceType();

    case LANGUAGE_LIST:
      return getLanguageList();

    case APP_SOURCE_LIST:
      return getAppSourceList();

    case NEXT_TOKEN:
      return getNextToken();

    case TIME_ZONE:
      return getTimeZone();

    case CLIENT_VERSION:
      return getClientVersion();

    case IS_DEBUG_MODE_OPEN:
      return getIsDebugModeOpen();

    case TIME_SIGN:
      return getTimeSign();

    case EXEC_TIME_SIGN:
      return getExecTimeSign();

    case EXEC_TIME_DELAY:
      return getExecTimeDelay();

    case ORIGINAL_INTERFACE_NAME:
      return getOriginalInterfaceName();

    case LAST_REFRESH_TIME:
      return getLastRefreshTime();

    case EXTRA_CLIENT_INFO:
      return getExtraClientInfo();

    case LOCATION:
      return getLocation();

    case BLOCK_PUBLISHER_LIST:
      return getBlockPublisherList();

    case REAL_TIME_CLICK_VIDEO_LIST:
      return getRealTimeClickVideoList();

    case REQUEST_FROM_APP:
      return getRequestFromApp();

    case IS_RETRY_REQUEST:
      return isIsRetryRequest();

    case IS_ROBOT_REQUEST:
      return isIsRobotRequest();

    case OLD_LANGUAGE_LIST:
      return getOldLanguageList();

    case INTEREST_TAG_LIST:
      return getInterestTagList();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case INTERFACE_NAME:
      return isSetInterfaceName();
    case USER_INFO:
      return isSetUserInfo();
    case PLATFORM_ID:
      return isSetPlatformId();
    case TAB_ID:
      return isSetTabId();
    case NUM:
      return isSetNum();
    case TYPE:
      return isSetType();
    case LOG_ID:
      return isSetLogId();
    case RESOURCE_ID:
      return isSetResourceId();
    case RESOURCE_TYPE:
      return isSetResourceType();
    case LANGUAGE_LIST:
      return isSetLanguageList();
    case APP_SOURCE_LIST:
      return isSetAppSourceList();
    case NEXT_TOKEN:
      return isSetNextToken();
    case TIME_ZONE:
      return isSetTimeZone();
    case CLIENT_VERSION:
      return isSetClientVersion();
    case IS_DEBUG_MODE_OPEN:
      return isSetIsDebugModeOpen();
    case TIME_SIGN:
      return isSetTimeSign();
    case EXEC_TIME_SIGN:
      return isSetExecTimeSign();
    case EXEC_TIME_DELAY:
      return isSetExecTimeDelay();
    case ORIGINAL_INTERFACE_NAME:
      return isSetOriginalInterfaceName();
    case LAST_REFRESH_TIME:
      return isSetLastRefreshTime();
    case EXTRA_CLIENT_INFO:
      return isSetExtraClientInfo();
    case LOCATION:
      return isSetLocation();
    case BLOCK_PUBLISHER_LIST:
      return isSetBlockPublisherList();
    case REAL_TIME_CLICK_VIDEO_LIST:
      return isSetRealTimeClickVideoList();
    case REQUEST_FROM_APP:
      return isSetRequestFromApp();
    case IS_RETRY_REQUEST:
      return isSetIsRetryRequest();
    case IS_ROBOT_REQUEST:
      return isSetIsRobotRequest();
    case OLD_LANGUAGE_LIST:
      return isSetOldLanguageList();
    case INTEREST_TAG_LIST:
      return isSetInterestTagList();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof Request)
      return this.equals((Request)that);
    return false;
  }

  public boolean equals(Request that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_interfaceName = true && this.isSetInterfaceName();
    boolean that_present_interfaceName = true && that.isSetInterfaceName();
    if (this_present_interfaceName || that_present_interfaceName) {
      if (!(this_present_interfaceName && that_present_interfaceName))
        return false;
      if (!this.interfaceName.equals(that.interfaceName))
        return false;
    }

    boolean this_present_userInfo = true && this.isSetUserInfo();
    boolean that_present_userInfo = true && that.isSetUserInfo();
    if (this_present_userInfo || that_present_userInfo) {
      if (!(this_present_userInfo && that_present_userInfo))
        return false;
      if (!this.userInfo.equals(that.userInfo))
        return false;
    }

    boolean this_present_platformId = true && this.isSetPlatformId();
    boolean that_present_platformId = true && that.isSetPlatformId();
    if (this_present_platformId || that_present_platformId) {
      if (!(this_present_platformId && that_present_platformId))
        return false;
      if (!this.platformId.equals(that.platformId))
        return false;
    }

    boolean this_present_tabId = true && this.isSetTabId();
    boolean that_present_tabId = true && that.isSetTabId();
    if (this_present_tabId || that_present_tabId) {
      if (!(this_present_tabId && that_present_tabId))
        return false;
      if (!this.tabId.equals(that.tabId))
        return false;
    }

    boolean this_present_num = true;
    boolean that_present_num = true;
    if (this_present_num || that_present_num) {
      if (!(this_present_num && that_present_num))
        return false;
      if (this.num != that.num)
        return false;
    }

    boolean this_present_type = true;
    boolean that_present_type = true;
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (this.type != that.type)
        return false;
    }

    boolean this_present_logId = true && this.isSetLogId();
    boolean that_present_logId = true && that.isSetLogId();
    if (this_present_logId || that_present_logId) {
      if (!(this_present_logId && that_present_logId))
        return false;
      if (!this.logId.equals(that.logId))
        return false;
    }

    boolean this_present_resourceId = true && this.isSetResourceId();
    boolean that_present_resourceId = true && that.isSetResourceId();
    if (this_present_resourceId || that_present_resourceId) {
      if (!(this_present_resourceId && that_present_resourceId))
        return false;
      if (!this.resourceId.equals(that.resourceId))
        return false;
    }

    boolean this_present_resourceType = true && this.isSetResourceType();
    boolean that_present_resourceType = true && that.isSetResourceType();
    if (this_present_resourceType || that_present_resourceType) {
      if (!(this_present_resourceType && that_present_resourceType))
        return false;
      if (!this.resourceType.equals(that.resourceType))
        return false;
    }

    boolean this_present_languageList = true && this.isSetLanguageList();
    boolean that_present_languageList = true && that.isSetLanguageList();
    if (this_present_languageList || that_present_languageList) {
      if (!(this_present_languageList && that_present_languageList))
        return false;
      if (!this.languageList.equals(that.languageList))
        return false;
    }

    boolean this_present_appSourceList = true && this.isSetAppSourceList();
    boolean that_present_appSourceList = true && that.isSetAppSourceList();
    if (this_present_appSourceList || that_present_appSourceList) {
      if (!(this_present_appSourceList && that_present_appSourceList))
        return false;
      if (!this.appSourceList.equals(that.appSourceList))
        return false;
    }

    boolean this_present_nextToken = true && this.isSetNextToken();
    boolean that_present_nextToken = true && that.isSetNextToken();
    if (this_present_nextToken || that_present_nextToken) {
      if (!(this_present_nextToken && that_present_nextToken))
        return false;
      if (!this.nextToken.equals(that.nextToken))
        return false;
    }

    boolean this_present_timeZone = true && this.isSetTimeZone();
    boolean that_present_timeZone = true && that.isSetTimeZone();
    if (this_present_timeZone || that_present_timeZone) {
      if (!(this_present_timeZone && that_present_timeZone))
        return false;
      if (!this.timeZone.equals(that.timeZone))
        return false;
    }

    boolean this_present_clientVersion = true && this.isSetClientVersion();
    boolean that_present_clientVersion = true && that.isSetClientVersion();
    if (this_present_clientVersion || that_present_clientVersion) {
      if (!(this_present_clientVersion && that_present_clientVersion))
        return false;
      if (!this.clientVersion.equals(that.clientVersion))
        return false;
    }

    boolean this_present_isDebugModeOpen = true && this.isSetIsDebugModeOpen();
    boolean that_present_isDebugModeOpen = true && that.isSetIsDebugModeOpen();
    if (this_present_isDebugModeOpen || that_present_isDebugModeOpen) {
      if (!(this_present_isDebugModeOpen && that_present_isDebugModeOpen))
        return false;
      if (!this.isDebugModeOpen.equals(that.isDebugModeOpen))
        return false;
    }

    boolean this_present_timeSign = true && this.isSetTimeSign();
    boolean that_present_timeSign = true && that.isSetTimeSign();
    if (this_present_timeSign || that_present_timeSign) {
      if (!(this_present_timeSign && that_present_timeSign))
        return false;
      if (!this.timeSign.equals(that.timeSign))
        return false;
    }

    boolean this_present_execTimeSign = true && this.isSetExecTimeSign();
    boolean that_present_execTimeSign = true && that.isSetExecTimeSign();
    if (this_present_execTimeSign || that_present_execTimeSign) {
      if (!(this_present_execTimeSign && that_present_execTimeSign))
        return false;
      if (!this.execTimeSign.equals(that.execTimeSign))
        return false;
    }

    boolean this_present_execTimeDelay = true && this.isSetExecTimeDelay();
    boolean that_present_execTimeDelay = true && that.isSetExecTimeDelay();
    if (this_present_execTimeDelay || that_present_execTimeDelay) {
      if (!(this_present_execTimeDelay && that_present_execTimeDelay))
        return false;
      if (!this.execTimeDelay.equals(that.execTimeDelay))
        return false;
    }

    boolean this_present_originalInterfaceName = true && this.isSetOriginalInterfaceName();
    boolean that_present_originalInterfaceName = true && that.isSetOriginalInterfaceName();
    if (this_present_originalInterfaceName || that_present_originalInterfaceName) {
      if (!(this_present_originalInterfaceName && that_present_originalInterfaceName))
        return false;
      if (!this.originalInterfaceName.equals(that.originalInterfaceName))
        return false;
    }

    boolean this_present_lastRefreshTime = true && this.isSetLastRefreshTime();
    boolean that_present_lastRefreshTime = true && that.isSetLastRefreshTime();
    if (this_present_lastRefreshTime || that_present_lastRefreshTime) {
      if (!(this_present_lastRefreshTime && that_present_lastRefreshTime))
        return false;
      if (!this.lastRefreshTime.equals(that.lastRefreshTime))
        return false;
    }

    boolean this_present_extraClientInfo = true && this.isSetExtraClientInfo();
    boolean that_present_extraClientInfo = true && that.isSetExtraClientInfo();
    if (this_present_extraClientInfo || that_present_extraClientInfo) {
      if (!(this_present_extraClientInfo && that_present_extraClientInfo))
        return false;
      if (!this.extraClientInfo.equals(that.extraClientInfo))
        return false;
    }

    boolean this_present_location = true && this.isSetLocation();
    boolean that_present_location = true && that.isSetLocation();
    if (this_present_location || that_present_location) {
      if (!(this_present_location && that_present_location))
        return false;
      if (!this.location.equals(that.location))
        return false;
    }

    boolean this_present_blockPublisherList = true && this.isSetBlockPublisherList();
    boolean that_present_blockPublisherList = true && that.isSetBlockPublisherList();
    if (this_present_blockPublisherList || that_present_blockPublisherList) {
      if (!(this_present_blockPublisherList && that_present_blockPublisherList))
        return false;
      if (!this.blockPublisherList.equals(that.blockPublisherList))
        return false;
    }

    boolean this_present_realTimeClickVideoList = true && this.isSetRealTimeClickVideoList();
    boolean that_present_realTimeClickVideoList = true && that.isSetRealTimeClickVideoList();
    if (this_present_realTimeClickVideoList || that_present_realTimeClickVideoList) {
      if (!(this_present_realTimeClickVideoList && that_present_realTimeClickVideoList))
        return false;
      if (!this.realTimeClickVideoList.equals(that.realTimeClickVideoList))
        return false;
    }

    boolean this_present_requestFromApp = true && this.isSetRequestFromApp();
    boolean that_present_requestFromApp = true && that.isSetRequestFromApp();
    if (this_present_requestFromApp || that_present_requestFromApp) {
      if (!(this_present_requestFromApp && that_present_requestFromApp))
        return false;
      if (!this.requestFromApp.equals(that.requestFromApp))
        return false;
    }

    boolean this_present_isRetryRequest = true && this.isSetIsRetryRequest();
    boolean that_present_isRetryRequest = true && that.isSetIsRetryRequest();
    if (this_present_isRetryRequest || that_present_isRetryRequest) {
      if (!(this_present_isRetryRequest && that_present_isRetryRequest))
        return false;
      if (this.isRetryRequest != that.isRetryRequest)
        return false;
    }

    boolean this_present_isRobotRequest = true && this.isSetIsRobotRequest();
    boolean that_present_isRobotRequest = true && that.isSetIsRobotRequest();
    if (this_present_isRobotRequest || that_present_isRobotRequest) {
      if (!(this_present_isRobotRequest && that_present_isRobotRequest))
        return false;
      if (this.isRobotRequest != that.isRobotRequest)
        return false;
    }

    boolean this_present_oldLanguageList = true && this.isSetOldLanguageList();
    boolean that_present_oldLanguageList = true && that.isSetOldLanguageList();
    if (this_present_oldLanguageList || that_present_oldLanguageList) {
      if (!(this_present_oldLanguageList && that_present_oldLanguageList))
        return false;
      if (!this.oldLanguageList.equals(that.oldLanguageList))
        return false;
    }

    boolean this_present_interestTagList = true && this.isSetInterestTagList();
    boolean that_present_interestTagList = true && that.isSetInterestTagList();
    if (this_present_interestTagList || that_present_interestTagList) {
      if (!(this_present_interestTagList && that_present_interestTagList))
        return false;
      if (!this.interestTagList.equals(that.interestTagList))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetInterfaceName()) ? 131071 : 524287);
    if (isSetInterfaceName())
      hashCode = hashCode * 8191 + interfaceName.hashCode();

    hashCode = hashCode * 8191 + ((isSetUserInfo()) ? 131071 : 524287);
    if (isSetUserInfo())
      hashCode = hashCode * 8191 + userInfo.hashCode();

    hashCode = hashCode * 8191 + ((isSetPlatformId()) ? 131071 : 524287);
    if (isSetPlatformId())
      hashCode = hashCode * 8191 + platformId.hashCode();

    hashCode = hashCode * 8191 + ((isSetTabId()) ? 131071 : 524287);
    if (isSetTabId())
      hashCode = hashCode * 8191 + tabId.hashCode();

    hashCode = hashCode * 8191 + num;

    hashCode = hashCode * 8191 + (int) (type);

    hashCode = hashCode * 8191 + ((isSetLogId()) ? 131071 : 524287);
    if (isSetLogId())
      hashCode = hashCode * 8191 + logId.hashCode();

    hashCode = hashCode * 8191 + ((isSetResourceId()) ? 131071 : 524287);
    if (isSetResourceId())
      hashCode = hashCode * 8191 + resourceId.hashCode();

    hashCode = hashCode * 8191 + ((isSetResourceType()) ? 131071 : 524287);
    if (isSetResourceType())
      hashCode = hashCode * 8191 + resourceType.hashCode();

    hashCode = hashCode * 8191 + ((isSetLanguageList()) ? 131071 : 524287);
    if (isSetLanguageList())
      hashCode = hashCode * 8191 + languageList.hashCode();

    hashCode = hashCode * 8191 + ((isSetAppSourceList()) ? 131071 : 524287);
    if (isSetAppSourceList())
      hashCode = hashCode * 8191 + appSourceList.hashCode();

    hashCode = hashCode * 8191 + ((isSetNextToken()) ? 131071 : 524287);
    if (isSetNextToken())
      hashCode = hashCode * 8191 + nextToken.hashCode();

    hashCode = hashCode * 8191 + ((isSetTimeZone()) ? 131071 : 524287);
    if (isSetTimeZone())
      hashCode = hashCode * 8191 + timeZone.hashCode();

    hashCode = hashCode * 8191 + ((isSetClientVersion()) ? 131071 : 524287);
    if (isSetClientVersion())
      hashCode = hashCode * 8191 + clientVersion.hashCode();

    hashCode = hashCode * 8191 + ((isSetIsDebugModeOpen()) ? 131071 : 524287);
    if (isSetIsDebugModeOpen())
      hashCode = hashCode * 8191 + isDebugModeOpen.hashCode();

    hashCode = hashCode * 8191 + ((isSetTimeSign()) ? 131071 : 524287);
    if (isSetTimeSign())
      hashCode = hashCode * 8191 + timeSign.hashCode();

    hashCode = hashCode * 8191 + ((isSetExecTimeSign()) ? 131071 : 524287);
    if (isSetExecTimeSign())
      hashCode = hashCode * 8191 + execTimeSign.hashCode();

    hashCode = hashCode * 8191 + ((isSetExecTimeDelay()) ? 131071 : 524287);
    if (isSetExecTimeDelay())
      hashCode = hashCode * 8191 + execTimeDelay.hashCode();

    hashCode = hashCode * 8191 + ((isSetOriginalInterfaceName()) ? 131071 : 524287);
    if (isSetOriginalInterfaceName())
      hashCode = hashCode * 8191 + originalInterfaceName.hashCode();

    hashCode = hashCode * 8191 + ((isSetLastRefreshTime()) ? 131071 : 524287);
    if (isSetLastRefreshTime())
      hashCode = hashCode * 8191 + lastRefreshTime.hashCode();

    hashCode = hashCode * 8191 + ((isSetExtraClientInfo()) ? 131071 : 524287);
    if (isSetExtraClientInfo())
      hashCode = hashCode * 8191 + extraClientInfo.hashCode();

    hashCode = hashCode * 8191 + ((isSetLocation()) ? 131071 : 524287);
    if (isSetLocation())
      hashCode = hashCode * 8191 + location.hashCode();

    hashCode = hashCode * 8191 + ((isSetBlockPublisherList()) ? 131071 : 524287);
    if (isSetBlockPublisherList())
      hashCode = hashCode * 8191 + blockPublisherList.hashCode();

    hashCode = hashCode * 8191 + ((isSetRealTimeClickVideoList()) ? 131071 : 524287);
    if (isSetRealTimeClickVideoList())
      hashCode = hashCode * 8191 + realTimeClickVideoList.hashCode();

    hashCode = hashCode * 8191 + ((isSetRequestFromApp()) ? 131071 : 524287);
    if (isSetRequestFromApp())
      hashCode = hashCode * 8191 + requestFromApp.hashCode();

    hashCode = hashCode * 8191 + ((isSetIsRetryRequest()) ? 131071 : 524287);
    if (isSetIsRetryRequest())
      hashCode = hashCode * 8191 + ((isRetryRequest) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetIsRobotRequest()) ? 131071 : 524287);
    if (isSetIsRobotRequest())
      hashCode = hashCode * 8191 + ((isRobotRequest) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetOldLanguageList()) ? 131071 : 524287);
    if (isSetOldLanguageList())
      hashCode = hashCode * 8191 + oldLanguageList.hashCode();

    hashCode = hashCode * 8191 + ((isSetInterestTagList()) ? 131071 : 524287);
    if (isSetInterestTagList())
      hashCode = hashCode * 8191 + interestTagList.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(Request other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetInterfaceName()).compareTo(other.isSetInterfaceName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInterfaceName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.interfaceName, other.interfaceName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetUserInfo()).compareTo(other.isSetUserInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userInfo, other.userInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPlatformId()).compareTo(other.isSetPlatformId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlatformId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.platformId, other.platformId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTabId()).compareTo(other.isSetTabId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTabId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tabId, other.tabId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetNum()).compareTo(other.isSetNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num, other.num);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLogId()).compareTo(other.isSetLogId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLogId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.logId, other.logId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetResourceId()).compareTo(other.isSetResourceId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResourceId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resourceId, other.resourceId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetResourceType()).compareTo(other.isSetResourceType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResourceType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resourceType, other.resourceType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLanguageList()).compareTo(other.isSetLanguageList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLanguageList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.languageList, other.languageList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAppSourceList()).compareTo(other.isSetAppSourceList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAppSourceList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appSourceList, other.appSourceList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetNextToken()).compareTo(other.isSetNextToken());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNextToken()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nextToken, other.nextToken);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTimeZone()).compareTo(other.isSetTimeZone());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimeZone()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timeZone, other.timeZone);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetClientVersion()).compareTo(other.isSetClientVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClientVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientVersion, other.clientVersion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetIsDebugModeOpen()).compareTo(other.isSetIsDebugModeOpen());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsDebugModeOpen()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isDebugModeOpen, other.isDebugModeOpen);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTimeSign()).compareTo(other.isSetTimeSign());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimeSign()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timeSign, other.timeSign);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetExecTimeSign()).compareTo(other.isSetExecTimeSign());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExecTimeSign()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.execTimeSign, other.execTimeSign);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetExecTimeDelay()).compareTo(other.isSetExecTimeDelay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExecTimeDelay()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.execTimeDelay, other.execTimeDelay);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetOriginalInterfaceName()).compareTo(other.isSetOriginalInterfaceName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOriginalInterfaceName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originalInterfaceName, other.originalInterfaceName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLastRefreshTime()).compareTo(other.isSetLastRefreshTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastRefreshTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastRefreshTime, other.lastRefreshTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetExtraClientInfo()).compareTo(other.isSetExtraClientInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExtraClientInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.extraClientInfo, other.extraClientInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLocation()).compareTo(other.isSetLocation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLocation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.location, other.location);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetBlockPublisherList()).compareTo(other.isSetBlockPublisherList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBlockPublisherList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.blockPublisherList, other.blockPublisherList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRealTimeClickVideoList()).compareTo(other.isSetRealTimeClickVideoList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRealTimeClickVideoList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.realTimeClickVideoList, other.realTimeClickVideoList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRequestFromApp()).compareTo(other.isSetRequestFromApp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequestFromApp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestFromApp, other.requestFromApp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetIsRetryRequest()).compareTo(other.isSetIsRetryRequest());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsRetryRequest()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isRetryRequest, other.isRetryRequest);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetIsRobotRequest()).compareTo(other.isSetIsRobotRequest());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsRobotRequest()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isRobotRequest, other.isRobotRequest);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetOldLanguageList()).compareTo(other.isSetOldLanguageList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOldLanguageList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oldLanguageList, other.oldLanguageList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetInterestTagList()).compareTo(other.isSetInterestTagList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInterestTagList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.interestTagList, other.interestTagList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("Request(");
    boolean first = true;

    sb.append("interfaceName:");
    if (this.interfaceName == null) {
      sb.append("null");
    } else {
      sb.append(this.interfaceName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("userInfo:");
    if (this.userInfo == null) {
      sb.append("null");
    } else {
      sb.append(this.userInfo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("platformId:");
    if (this.platformId == null) {
      sb.append("null");
    } else {
      sb.append(this.platformId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tabId:");
    if (this.tabId == null) {
      sb.append("null");
    } else {
      sb.append(this.tabId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("num:");
    sb.append(this.num);
    first = false;
    if (!first) sb.append(", ");
    sb.append("type:");
    sb.append(this.type);
    first = false;
    if (isSetLogId()) {
      if (!first) sb.append(", ");
      sb.append("logId:");
      if (this.logId == null) {
        sb.append("null");
      } else {
        sb.append(this.logId);
      }
      first = false;
    }
    if (isSetResourceId()) {
      if (!first) sb.append(", ");
      sb.append("resourceId:");
      if (this.resourceId == null) {
        sb.append("null");
      } else {
        sb.append(this.resourceId);
      }
      first = false;
    }
    if (isSetResourceType()) {
      if (!first) sb.append(", ");
      sb.append("resourceType:");
      if (this.resourceType == null) {
        sb.append("null");
      } else {
        sb.append(this.resourceType);
      }
      first = false;
    }
    if (isSetLanguageList()) {
      if (!first) sb.append(", ");
      sb.append("languageList:");
      if (this.languageList == null) {
        sb.append("null");
      } else {
        sb.append(this.languageList);
      }
      first = false;
    }
    if (isSetAppSourceList()) {
      if (!first) sb.append(", ");
      sb.append("appSourceList:");
      if (this.appSourceList == null) {
        sb.append("null");
      } else {
        sb.append(this.appSourceList);
      }
      first = false;
    }
    if (isSetNextToken()) {
      if (!first) sb.append(", ");
      sb.append("nextToken:");
      if (this.nextToken == null) {
        sb.append("null");
      } else {
        sb.append(this.nextToken);
      }
      first = false;
    }
    if (isSetTimeZone()) {
      if (!first) sb.append(", ");
      sb.append("timeZone:");
      if (this.timeZone == null) {
        sb.append("null");
      } else {
        sb.append(this.timeZone);
      }
      first = false;
    }
    if (isSetClientVersion()) {
      if (!first) sb.append(", ");
      sb.append("clientVersion:");
      if (this.clientVersion == null) {
        sb.append("null");
      } else {
        sb.append(this.clientVersion);
      }
      first = false;
    }
    if (isSetIsDebugModeOpen()) {
      if (!first) sb.append(", ");
      sb.append("isDebugModeOpen:");
      if (this.isDebugModeOpen == null) {
        sb.append("null");
      } else {
        sb.append(this.isDebugModeOpen);
      }
      first = false;
    }
    if (isSetTimeSign()) {
      if (!first) sb.append(", ");
      sb.append("timeSign:");
      if (this.timeSign == null) {
        sb.append("null");
      } else {
        sb.append(this.timeSign);
      }
      first = false;
    }
    if (isSetExecTimeSign()) {
      if (!first) sb.append(", ");
      sb.append("execTimeSign:");
      if (this.execTimeSign == null) {
        sb.append("null");
      } else {
        sb.append(this.execTimeSign);
      }
      first = false;
    }
    if (isSetExecTimeDelay()) {
      if (!first) sb.append(", ");
      sb.append("execTimeDelay:");
      if (this.execTimeDelay == null) {
        sb.append("null");
      } else {
        sb.append(this.execTimeDelay);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("originalInterfaceName:");
    if (this.originalInterfaceName == null) {
      sb.append("null");
    } else {
      sb.append(this.originalInterfaceName);
    }
    first = false;
    if (isSetLastRefreshTime()) {
      if (!first) sb.append(", ");
      sb.append("lastRefreshTime:");
      if (this.lastRefreshTime == null) {
        sb.append("null");
      } else {
        sb.append(this.lastRefreshTime);
      }
      first = false;
    }
    if (isSetExtraClientInfo()) {
      if (!first) sb.append(", ");
      sb.append("extraClientInfo:");
      if (this.extraClientInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.extraClientInfo);
      }
      first = false;
    }
    if (isSetLocation()) {
      if (!first) sb.append(", ");
      sb.append("location:");
      if (this.location == null) {
        sb.append("null");
      } else {
        sb.append(this.location);
      }
      first = false;
    }
    if (isSetBlockPublisherList()) {
      if (!first) sb.append(", ");
      sb.append("blockPublisherList:");
      if (this.blockPublisherList == null) {
        sb.append("null");
      } else {
        sb.append(this.blockPublisherList);
      }
      first = false;
    }
    if (isSetRealTimeClickVideoList()) {
      if (!first) sb.append(", ");
      sb.append("realTimeClickVideoList:");
      if (this.realTimeClickVideoList == null) {
        sb.append("null");
      } else {
        sb.append(this.realTimeClickVideoList);
      }
      first = false;
    }
    if (isSetRequestFromApp()) {
      if (!first) sb.append(", ");
      sb.append("requestFromApp:");
      if (this.requestFromApp == null) {
        sb.append("null");
      } else {
        sb.append(this.requestFromApp);
      }
      first = false;
    }
    if (isSetIsRetryRequest()) {
      if (!first) sb.append(", ");
      sb.append("isRetryRequest:");
      sb.append(this.isRetryRequest);
      first = false;
    }
    if (isSetIsRobotRequest()) {
      if (!first) sb.append(", ");
      sb.append("isRobotRequest:");
      sb.append(this.isRobotRequest);
      first = false;
    }
    if (isSetOldLanguageList()) {
      if (!first) sb.append(", ");
      sb.append("oldLanguageList:");
      if (this.oldLanguageList == null) {
        sb.append("null");
      } else {
        sb.append(this.oldLanguageList);
      }
      first = false;
    }
    if (isSetInterestTagList()) {
      if (!first) sb.append(", ");
      sb.append("interestTagList:");
      if (this.interestTagList == null) {
        sb.append("null");
      } else {
        sb.append(this.interestTagList);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (userInfo != null) {
      userInfo.validate();
    }
    if (extraClientInfo != null) {
      extraClientInfo.validate();
    }
    if (location != null) {
      location.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RequestStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public RequestStandardScheme getScheme() {
      return new RequestStandardScheme();
    }
  }

  private static class RequestStandardScheme extends org.apache.thrift.scheme.StandardScheme<Request> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Request struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // INTERFACE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.interfaceName = iprot.readString();
              struct.setInterfaceNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // USER_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.userInfo = new UserInfo();
              struct.userInfo.read(iprot);
              struct.setUserInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PLATFORM_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.platformId = iprot.readString();
              struct.setPlatformIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TAB_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tabId = iprot.readString();
              struct.setTabIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.num = iprot.readI32();
              struct.setNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.type = iprot.readByte();
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // LOG_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.logId = iprot.readString();
              struct.setLogIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // RESOURCE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.resourceId = iprot.readString();
              struct.setResourceIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // RESOURCE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.resourceType = iprot.readString();
              struct.setResourceTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // LANGUAGE_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                struct.languageList = new java.util.ArrayList<java.lang.String>(_list32.size);
                java.lang.String _elem33;
                for (int _i34 = 0; _i34 < _list32.size; ++_i34)
                {
                  _elem33 = iprot.readString();
                  struct.languageList.add(_elem33);
                }
                iprot.readListEnd();
              }
              struct.setLanguageListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // APP_SOURCE_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list35 = iprot.readListBegin();
                struct.appSourceList = new java.util.ArrayList<java.lang.String>(_list35.size);
                java.lang.String _elem36;
                for (int _i37 = 0; _i37 < _list35.size; ++_i37)
                {
                  _elem36 = iprot.readString();
                  struct.appSourceList.add(_elem36);
                }
                iprot.readListEnd();
              }
              struct.setAppSourceListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // NEXT_TOKEN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.nextToken = iprot.readString();
              struct.setNextTokenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // TIME_ZONE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.timeZone = iprot.readString();
              struct.setTimeZoneIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // CLIENT_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.clientVersion = iprot.readString();
              struct.setClientVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // IS_DEBUG_MODE_OPEN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.isDebugModeOpen = iprot.readString();
              struct.setIsDebugModeOpenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // TIME_SIGN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.timeSign = iprot.readString();
              struct.setTimeSignIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // EXEC_TIME_SIGN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.execTimeSign = iprot.readString();
              struct.setExecTimeSignIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // EXEC_TIME_DELAY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.execTimeDelay = iprot.readString();
              struct.setExecTimeDelayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // ORIGINAL_INTERFACE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.originalInterfaceName = iprot.readString();
              struct.setOriginalInterfaceNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // LAST_REFRESH_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lastRefreshTime = iprot.readString();
              struct.setLastRefreshTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // EXTRA_CLIENT_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.extraClientInfo = new ExtraClientInfo();
              struct.extraClientInfo.read(iprot);
              struct.setExtraClientInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // LOCATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.location = new Location();
              struct.location.read(iprot);
              struct.setLocationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // BLOCK_PUBLISHER_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list38 = iprot.readListBegin();
                struct.blockPublisherList = new java.util.ArrayList<java.lang.String>(_list38.size);
                java.lang.String _elem39;
                for (int _i40 = 0; _i40 < _list38.size; ++_i40)
                {
                  _elem39 = iprot.readString();
                  struct.blockPublisherList.add(_elem39);
                }
                iprot.readListEnd();
              }
              struct.setBlockPublisherListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // REAL_TIME_CLICK_VIDEO_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list41 = iprot.readListBegin();
                struct.realTimeClickVideoList = new java.util.ArrayList<java.lang.String>(_list41.size);
                java.lang.String _elem42;
                for (int _i43 = 0; _i43 < _list41.size; ++_i43)
                {
                  _elem42 = iprot.readString();
                  struct.realTimeClickVideoList.add(_elem42);
                }
                iprot.readListEnd();
              }
              struct.setRealTimeClickVideoListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // REQUEST_FROM_APP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.requestFromApp = iprot.readString();
              struct.setRequestFromAppIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // IS_RETRY_REQUEST
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isRetryRequest = iprot.readBool();
              struct.setIsRetryRequestIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // IS_ROBOT_REQUEST
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isRobotRequest = iprot.readBool();
              struct.setIsRobotRequestIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // OLD_LANGUAGE_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list44 = iprot.readListBegin();
                struct.oldLanguageList = new java.util.ArrayList<java.lang.String>(_list44.size);
                java.lang.String _elem45;
                for (int _i46 = 0; _i46 < _list44.size; ++_i46)
                {
                  _elem45 = iprot.readString();
                  struct.oldLanguageList.add(_elem45);
                }
                iprot.readListEnd();
              }
              struct.setOldLanguageListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 29: // INTEREST_TAG_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list47 = iprot.readListBegin();
                struct.interestTagList = new java.util.ArrayList<java.lang.String>(_list47.size);
                java.lang.String _elem48;
                for (int _i49 = 0; _i49 < _list47.size; ++_i49)
                {
                  _elem48 = iprot.readString();
                  struct.interestTagList.add(_elem48);
                }
                iprot.readListEnd();
              }
              struct.setInterestTagListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Request struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.interfaceName != null) {
        oprot.writeFieldBegin(INTERFACE_NAME_FIELD_DESC);
        oprot.writeString(struct.interfaceName);
        oprot.writeFieldEnd();
      }
      if (struct.userInfo != null) {
        oprot.writeFieldBegin(USER_INFO_FIELD_DESC);
        struct.userInfo.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.platformId != null) {
        oprot.writeFieldBegin(PLATFORM_ID_FIELD_DESC);
        oprot.writeString(struct.platformId);
        oprot.writeFieldEnd();
      }
      if (struct.tabId != null) {
        oprot.writeFieldBegin(TAB_ID_FIELD_DESC);
        oprot.writeString(struct.tabId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(NUM_FIELD_DESC);
      oprot.writeI32(struct.num);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TYPE_FIELD_DESC);
      oprot.writeByte(struct.type);
      oprot.writeFieldEnd();
      if (struct.logId != null) {
        if (struct.isSetLogId()) {
          oprot.writeFieldBegin(LOG_ID_FIELD_DESC);
          oprot.writeString(struct.logId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.resourceId != null) {
        if (struct.isSetResourceId()) {
          oprot.writeFieldBegin(RESOURCE_ID_FIELD_DESC);
          oprot.writeString(struct.resourceId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.resourceType != null) {
        if (struct.isSetResourceType()) {
          oprot.writeFieldBegin(RESOURCE_TYPE_FIELD_DESC);
          oprot.writeString(struct.resourceType);
          oprot.writeFieldEnd();
        }
      }
      if (struct.languageList != null) {
        if (struct.isSetLanguageList()) {
          oprot.writeFieldBegin(LANGUAGE_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.languageList.size()));
            for (java.lang.String _iter50 : struct.languageList)
            {
              oprot.writeString(_iter50);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.appSourceList != null) {
        if (struct.isSetAppSourceList()) {
          oprot.writeFieldBegin(APP_SOURCE_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.appSourceList.size()));
            for (java.lang.String _iter51 : struct.appSourceList)
            {
              oprot.writeString(_iter51);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.nextToken != null) {
        if (struct.isSetNextToken()) {
          oprot.writeFieldBegin(NEXT_TOKEN_FIELD_DESC);
          oprot.writeString(struct.nextToken);
          oprot.writeFieldEnd();
        }
      }
      if (struct.timeZone != null) {
        if (struct.isSetTimeZone()) {
          oprot.writeFieldBegin(TIME_ZONE_FIELD_DESC);
          oprot.writeString(struct.timeZone);
          oprot.writeFieldEnd();
        }
      }
      if (struct.clientVersion != null) {
        if (struct.isSetClientVersion()) {
          oprot.writeFieldBegin(CLIENT_VERSION_FIELD_DESC);
          oprot.writeString(struct.clientVersion);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isDebugModeOpen != null) {
        if (struct.isSetIsDebugModeOpen()) {
          oprot.writeFieldBegin(IS_DEBUG_MODE_OPEN_FIELD_DESC);
          oprot.writeString(struct.isDebugModeOpen);
          oprot.writeFieldEnd();
        }
      }
      if (struct.timeSign != null) {
        if (struct.isSetTimeSign()) {
          oprot.writeFieldBegin(TIME_SIGN_FIELD_DESC);
          oprot.writeString(struct.timeSign);
          oprot.writeFieldEnd();
        }
      }
      if (struct.execTimeSign != null) {
        if (struct.isSetExecTimeSign()) {
          oprot.writeFieldBegin(EXEC_TIME_SIGN_FIELD_DESC);
          oprot.writeString(struct.execTimeSign);
          oprot.writeFieldEnd();
        }
      }
      if (struct.execTimeDelay != null) {
        if (struct.isSetExecTimeDelay()) {
          oprot.writeFieldBegin(EXEC_TIME_DELAY_FIELD_DESC);
          oprot.writeString(struct.execTimeDelay);
          oprot.writeFieldEnd();
        }
      }
      if (struct.originalInterfaceName != null) {
        oprot.writeFieldBegin(ORIGINAL_INTERFACE_NAME_FIELD_DESC);
        oprot.writeString(struct.originalInterfaceName);
        oprot.writeFieldEnd();
      }
      if (struct.lastRefreshTime != null) {
        if (struct.isSetLastRefreshTime()) {
          oprot.writeFieldBegin(LAST_REFRESH_TIME_FIELD_DESC);
          oprot.writeString(struct.lastRefreshTime);
          oprot.writeFieldEnd();
        }
      }
      if (struct.extraClientInfo != null) {
        if (struct.isSetExtraClientInfo()) {
          oprot.writeFieldBegin(EXTRA_CLIENT_INFO_FIELD_DESC);
          struct.extraClientInfo.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.location != null) {
        if (struct.isSetLocation()) {
          oprot.writeFieldBegin(LOCATION_FIELD_DESC);
          struct.location.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.blockPublisherList != null) {
        if (struct.isSetBlockPublisherList()) {
          oprot.writeFieldBegin(BLOCK_PUBLISHER_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.blockPublisherList.size()));
            for (java.lang.String _iter52 : struct.blockPublisherList)
            {
              oprot.writeString(_iter52);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.realTimeClickVideoList != null) {
        if (struct.isSetRealTimeClickVideoList()) {
          oprot.writeFieldBegin(REAL_TIME_CLICK_VIDEO_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.realTimeClickVideoList.size()));
            for (java.lang.String _iter53 : struct.realTimeClickVideoList)
            {
              oprot.writeString(_iter53);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.requestFromApp != null) {
        if (struct.isSetRequestFromApp()) {
          oprot.writeFieldBegin(REQUEST_FROM_APP_FIELD_DESC);
          oprot.writeString(struct.requestFromApp);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetIsRetryRequest()) {
        oprot.writeFieldBegin(IS_RETRY_REQUEST_FIELD_DESC);
        oprot.writeBool(struct.isRetryRequest);
        oprot.writeFieldEnd();
      }
      if (struct.isSetIsRobotRequest()) {
        oprot.writeFieldBegin(IS_ROBOT_REQUEST_FIELD_DESC);
        oprot.writeBool(struct.isRobotRequest);
        oprot.writeFieldEnd();
      }
      if (struct.oldLanguageList != null) {
        if (struct.isSetOldLanguageList()) {
          oprot.writeFieldBegin(OLD_LANGUAGE_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.oldLanguageList.size()));
            for (java.lang.String _iter54 : struct.oldLanguageList)
            {
              oprot.writeString(_iter54);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.interestTagList != null) {
        if (struct.isSetInterestTagList()) {
          oprot.writeFieldBegin(INTEREST_TAG_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.interestTagList.size()));
            for (java.lang.String _iter55 : struct.interestTagList)
            {
              oprot.writeString(_iter55);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RequestTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public RequestTupleScheme getScheme() {
      return new RequestTupleScheme();
    }
  }

  private static class RequestTupleScheme extends org.apache.thrift.scheme.TupleScheme<Request> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Request struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetInterfaceName()) {
        optionals.set(0);
      }
      if (struct.isSetUserInfo()) {
        optionals.set(1);
      }
      if (struct.isSetPlatformId()) {
        optionals.set(2);
      }
      if (struct.isSetTabId()) {
        optionals.set(3);
      }
      if (struct.isSetNum()) {
        optionals.set(4);
      }
      if (struct.isSetType()) {
        optionals.set(5);
      }
      if (struct.isSetLogId()) {
        optionals.set(6);
      }
      if (struct.isSetResourceId()) {
        optionals.set(7);
      }
      if (struct.isSetResourceType()) {
        optionals.set(8);
      }
      if (struct.isSetLanguageList()) {
        optionals.set(9);
      }
      if (struct.isSetAppSourceList()) {
        optionals.set(10);
      }
      if (struct.isSetNextToken()) {
        optionals.set(11);
      }
      if (struct.isSetTimeZone()) {
        optionals.set(12);
      }
      if (struct.isSetClientVersion()) {
        optionals.set(13);
      }
      if (struct.isSetIsDebugModeOpen()) {
        optionals.set(14);
      }
      if (struct.isSetTimeSign()) {
        optionals.set(15);
      }
      if (struct.isSetExecTimeSign()) {
        optionals.set(16);
      }
      if (struct.isSetExecTimeDelay()) {
        optionals.set(17);
      }
      if (struct.isSetOriginalInterfaceName()) {
        optionals.set(18);
      }
      if (struct.isSetLastRefreshTime()) {
        optionals.set(19);
      }
      if (struct.isSetExtraClientInfo()) {
        optionals.set(20);
      }
      if (struct.isSetLocation()) {
        optionals.set(21);
      }
      if (struct.isSetBlockPublisherList()) {
        optionals.set(22);
      }
      if (struct.isSetRealTimeClickVideoList()) {
        optionals.set(23);
      }
      if (struct.isSetRequestFromApp()) {
        optionals.set(24);
      }
      if (struct.isSetIsRetryRequest()) {
        optionals.set(25);
      }
      if (struct.isSetIsRobotRequest()) {
        optionals.set(26);
      }
      if (struct.isSetOldLanguageList()) {
        optionals.set(27);
      }
      if (struct.isSetInterestTagList()) {
        optionals.set(28);
      }
      oprot.writeBitSet(optionals, 29);
      if (struct.isSetInterfaceName()) {
        oprot.writeString(struct.interfaceName);
      }
      if (struct.isSetUserInfo()) {
        struct.userInfo.write(oprot);
      }
      if (struct.isSetPlatformId()) {
        oprot.writeString(struct.platformId);
      }
      if (struct.isSetTabId()) {
        oprot.writeString(struct.tabId);
      }
      if (struct.isSetNum()) {
        oprot.writeI32(struct.num);
      }
      if (struct.isSetType()) {
        oprot.writeByte(struct.type);
      }
      if (struct.isSetLogId()) {
        oprot.writeString(struct.logId);
      }
      if (struct.isSetResourceId()) {
        oprot.writeString(struct.resourceId);
      }
      if (struct.isSetResourceType()) {
        oprot.writeString(struct.resourceType);
      }
      if (struct.isSetLanguageList()) {
        {
          oprot.writeI32(struct.languageList.size());
          for (java.lang.String _iter56 : struct.languageList)
          {
            oprot.writeString(_iter56);
          }
        }
      }
      if (struct.isSetAppSourceList()) {
        {
          oprot.writeI32(struct.appSourceList.size());
          for (java.lang.String _iter57 : struct.appSourceList)
          {
            oprot.writeString(_iter57);
          }
        }
      }
      if (struct.isSetNextToken()) {
        oprot.writeString(struct.nextToken);
      }
      if (struct.isSetTimeZone()) {
        oprot.writeString(struct.timeZone);
      }
      if (struct.isSetClientVersion()) {
        oprot.writeString(struct.clientVersion);
      }
      if (struct.isSetIsDebugModeOpen()) {
        oprot.writeString(struct.isDebugModeOpen);
      }
      if (struct.isSetTimeSign()) {
        oprot.writeString(struct.timeSign);
      }
      if (struct.isSetExecTimeSign()) {
        oprot.writeString(struct.execTimeSign);
      }
      if (struct.isSetExecTimeDelay()) {
        oprot.writeString(struct.execTimeDelay);
      }
      if (struct.isSetOriginalInterfaceName()) {
        oprot.writeString(struct.originalInterfaceName);
      }
      if (struct.isSetLastRefreshTime()) {
        oprot.writeString(struct.lastRefreshTime);
      }
      if (struct.isSetExtraClientInfo()) {
        struct.extraClientInfo.write(oprot);
      }
      if (struct.isSetLocation()) {
        struct.location.write(oprot);
      }
      if (struct.isSetBlockPublisherList()) {
        {
          oprot.writeI32(struct.blockPublisherList.size());
          for (java.lang.String _iter58 : struct.blockPublisherList)
          {
            oprot.writeString(_iter58);
          }
        }
      }
      if (struct.isSetRealTimeClickVideoList()) {
        {
          oprot.writeI32(struct.realTimeClickVideoList.size());
          for (java.lang.String _iter59 : struct.realTimeClickVideoList)
          {
            oprot.writeString(_iter59);
          }
        }
      }
      if (struct.isSetRequestFromApp()) {
        oprot.writeString(struct.requestFromApp);
      }
      if (struct.isSetIsRetryRequest()) {
        oprot.writeBool(struct.isRetryRequest);
      }
      if (struct.isSetIsRobotRequest()) {
        oprot.writeBool(struct.isRobotRequest);
      }
      if (struct.isSetOldLanguageList()) {
        {
          oprot.writeI32(struct.oldLanguageList.size());
          for (java.lang.String _iter60 : struct.oldLanguageList)
          {
            oprot.writeString(_iter60);
          }
        }
      }
      if (struct.isSetInterestTagList()) {
        {
          oprot.writeI32(struct.interestTagList.size());
          for (java.lang.String _iter61 : struct.interestTagList)
          {
            oprot.writeString(_iter61);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Request struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(29);
      if (incoming.get(0)) {
        struct.interfaceName = iprot.readString();
        struct.setInterfaceNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.userInfo = new UserInfo();
        struct.userInfo.read(iprot);
        struct.setUserInfoIsSet(true);
      }
      if (incoming.get(2)) {
        struct.platformId = iprot.readString();
        struct.setPlatformIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.tabId = iprot.readString();
        struct.setTabIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.num = iprot.readI32();
        struct.setNumIsSet(true);
      }
      if (incoming.get(5)) {
        struct.type = iprot.readByte();
        struct.setTypeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.logId = iprot.readString();
        struct.setLogIdIsSet(true);
      }
      if (incoming.get(7)) {
        struct.resourceId = iprot.readString();
        struct.setResourceIdIsSet(true);
      }
      if (incoming.get(8)) {
        struct.resourceType = iprot.readString();
        struct.setResourceTypeIsSet(true);
      }
      if (incoming.get(9)) {
        {
          org.apache.thrift.protocol.TList _list62 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.languageList = new java.util.ArrayList<java.lang.String>(_list62.size);
          java.lang.String _elem63;
          for (int _i64 = 0; _i64 < _list62.size; ++_i64)
          {
            _elem63 = iprot.readString();
            struct.languageList.add(_elem63);
          }
        }
        struct.setLanguageListIsSet(true);
      }
      if (incoming.get(10)) {
        {
          org.apache.thrift.protocol.TList _list65 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.appSourceList = new java.util.ArrayList<java.lang.String>(_list65.size);
          java.lang.String _elem66;
          for (int _i67 = 0; _i67 < _list65.size; ++_i67)
          {
            _elem66 = iprot.readString();
            struct.appSourceList.add(_elem66);
          }
        }
        struct.setAppSourceListIsSet(true);
      }
      if (incoming.get(11)) {
        struct.nextToken = iprot.readString();
        struct.setNextTokenIsSet(true);
      }
      if (incoming.get(12)) {
        struct.timeZone = iprot.readString();
        struct.setTimeZoneIsSet(true);
      }
      if (incoming.get(13)) {
        struct.clientVersion = iprot.readString();
        struct.setClientVersionIsSet(true);
      }
      if (incoming.get(14)) {
        struct.isDebugModeOpen = iprot.readString();
        struct.setIsDebugModeOpenIsSet(true);
      }
      if (incoming.get(15)) {
        struct.timeSign = iprot.readString();
        struct.setTimeSignIsSet(true);
      }
      if (incoming.get(16)) {
        struct.execTimeSign = iprot.readString();
        struct.setExecTimeSignIsSet(true);
      }
      if (incoming.get(17)) {
        struct.execTimeDelay = iprot.readString();
        struct.setExecTimeDelayIsSet(true);
      }
      if (incoming.get(18)) {
        struct.originalInterfaceName = iprot.readString();
        struct.setOriginalInterfaceNameIsSet(true);
      }
      if (incoming.get(19)) {
        struct.lastRefreshTime = iprot.readString();
        struct.setLastRefreshTimeIsSet(true);
      }
      if (incoming.get(20)) {
        struct.extraClientInfo = new ExtraClientInfo();
        struct.extraClientInfo.read(iprot);
        struct.setExtraClientInfoIsSet(true);
      }
      if (incoming.get(21)) {
        struct.location = new Location();
        struct.location.read(iprot);
        struct.setLocationIsSet(true);
      }
      if (incoming.get(22)) {
        {
          org.apache.thrift.protocol.TList _list68 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.blockPublisherList = new java.util.ArrayList<java.lang.String>(_list68.size);
          java.lang.String _elem69;
          for (int _i70 = 0; _i70 < _list68.size; ++_i70)
          {
            _elem69 = iprot.readString();
            struct.blockPublisherList.add(_elem69);
          }
        }
        struct.setBlockPublisherListIsSet(true);
      }
      if (incoming.get(23)) {
        {
          org.apache.thrift.protocol.TList _list71 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.realTimeClickVideoList = new java.util.ArrayList<java.lang.String>(_list71.size);
          java.lang.String _elem72;
          for (int _i73 = 0; _i73 < _list71.size; ++_i73)
          {
            _elem72 = iprot.readString();
            struct.realTimeClickVideoList.add(_elem72);
          }
        }
        struct.setRealTimeClickVideoListIsSet(true);
      }
      if (incoming.get(24)) {
        struct.requestFromApp = iprot.readString();
        struct.setRequestFromAppIsSet(true);
      }
      if (incoming.get(25)) {
        struct.isRetryRequest = iprot.readBool();
        struct.setIsRetryRequestIsSet(true);
      }
      if (incoming.get(26)) {
        struct.isRobotRequest = iprot.readBool();
        struct.setIsRobotRequestIsSet(true);
      }
      if (incoming.get(27)) {
        {
          org.apache.thrift.protocol.TList _list74 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.oldLanguageList = new java.util.ArrayList<java.lang.String>(_list74.size);
          java.lang.String _elem75;
          for (int _i76 = 0; _i76 < _list74.size; ++_i76)
          {
            _elem75 = iprot.readString();
            struct.oldLanguageList.add(_elem75);
          }
        }
        struct.setOldLanguageListIsSet(true);
      }
      if (incoming.get(28)) {
        {
          org.apache.thrift.protocol.TList _list77 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.interestTagList = new java.util.ArrayList<java.lang.String>(_list77.size);
          java.lang.String _elem78;
          for (int _i79 = 0; _i79 < _list77.size; ++_i79)
          {
            _elem78 = iprot.readString();
            struct.interestTagList.add(_elem78);
          }
        }
        struct.setInterestTagListIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

