/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package mx.j2.recommend.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2021-06-02")
public class Badge implements org.apache.thrift.TBase<Badge, Badge._Fields>, java.io.Serializable, Cloneable, Comparable<Badge> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Badge");

  private static final org.apache.thrift.protocol.TField MAX_DAYS_FIELD_DESC = new org.apache.thrift.protocol.TField("maxDays", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField MAX_WEEKS_FIELD_DESC = new org.apache.thrift.protocol.TField("maxWeeks", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField TOTAL_DAYS_FIELD_DESC = new org.apache.thrift.protocol.TField("totalDays", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("timestamp", org.apache.thrift.protocol.TType.I64, (short)4);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new BadgeStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new BadgeTupleSchemeFactory();

  public int maxDays; // required
  public int maxWeeks; // required
  public int totalDays; // required
  public long timestamp; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MAX_DAYS((short)1, "maxDays"),
    MAX_WEEKS((short)2, "maxWeeks"),
    TOTAL_DAYS((short)3, "totalDays"),
    TIMESTAMP((short)4, "timestamp");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MAX_DAYS
          return MAX_DAYS;
        case 2: // MAX_WEEKS
          return MAX_WEEKS;
        case 3: // TOTAL_DAYS
          return TOTAL_DAYS;
        case 4: // TIMESTAMP
          return TIMESTAMP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MAXDAYS_ISSET_ID = 0;
  private static final int __MAXWEEKS_ISSET_ID = 1;
  private static final int __TOTALDAYS_ISSET_ID = 2;
  private static final int __TIMESTAMP_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MAX_DAYS, new org.apache.thrift.meta_data.FieldMetaData("maxDays", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MAX_WEEKS, new org.apache.thrift.meta_data.FieldMetaData("maxWeeks", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TOTAL_DAYS, new org.apache.thrift.meta_data.FieldMetaData("totalDays", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("timestamp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Badge.class, metaDataMap);
  }

  public Badge() {
  }

  public Badge(
    int maxDays,
    int maxWeeks,
    int totalDays,
    long timestamp)
  {
    this();
    this.maxDays = maxDays;
    setMaxDaysIsSet(true);
    this.maxWeeks = maxWeeks;
    setMaxWeeksIsSet(true);
    this.totalDays = totalDays;
    setTotalDaysIsSet(true);
    this.timestamp = timestamp;
    setTimestampIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Badge(Badge other) {
    __isset_bitfield = other.__isset_bitfield;
    this.maxDays = other.maxDays;
    this.maxWeeks = other.maxWeeks;
    this.totalDays = other.totalDays;
    this.timestamp = other.timestamp;
  }

  public Badge deepCopy() {
    return new Badge(this);
  }

  @Override
  public void clear() {
    setMaxDaysIsSet(false);
    this.maxDays = 0;
    setMaxWeeksIsSet(false);
    this.maxWeeks = 0;
    setTotalDaysIsSet(false);
    this.totalDays = 0;
    setTimestampIsSet(false);
    this.timestamp = 0;
  }

  public int getMaxDays() {
    return this.maxDays;
  }

  public Badge setMaxDays(int maxDays) {
    this.maxDays = maxDays;
    setMaxDaysIsSet(true);
    return this;
  }

  public void unsetMaxDays() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MAXDAYS_ISSET_ID);
  }

  /** Returns true if field maxDays is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxDays() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MAXDAYS_ISSET_ID);
  }

  public void setMaxDaysIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MAXDAYS_ISSET_ID, value);
  }

  public int getMaxWeeks() {
    return this.maxWeeks;
  }

  public Badge setMaxWeeks(int maxWeeks) {
    this.maxWeeks = maxWeeks;
    setMaxWeeksIsSet(true);
    return this;
  }

  public void unsetMaxWeeks() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MAXWEEKS_ISSET_ID);
  }

  /** Returns true if field maxWeeks is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxWeeks() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MAXWEEKS_ISSET_ID);
  }

  public void setMaxWeeksIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MAXWEEKS_ISSET_ID, value);
  }

  public int getTotalDays() {
    return this.totalDays;
  }

  public Badge setTotalDays(int totalDays) {
    this.totalDays = totalDays;
    setTotalDaysIsSet(true);
    return this;
  }

  public void unsetTotalDays() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TOTALDAYS_ISSET_ID);
  }

  /** Returns true if field totalDays is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalDays() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TOTALDAYS_ISSET_ID);
  }

  public void setTotalDaysIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TOTALDAYS_ISSET_ID, value);
  }

  public long getTimestamp() {
    return this.timestamp;
  }

  public Badge setTimestamp(long timestamp) {
    this.timestamp = timestamp;
    setTimestampIsSet(true);
    return this;
  }

  public void unsetTimestamp() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
  }

  /** Returns true if field timestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetTimestamp() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
  }

  public void setTimestampIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TIMESTAMP_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case MAX_DAYS:
      if (value == null) {
        unsetMaxDays();
      } else {
        setMaxDays((java.lang.Integer)value);
      }
      break;

    case MAX_WEEKS:
      if (value == null) {
        unsetMaxWeeks();
      } else {
        setMaxWeeks((java.lang.Integer)value);
      }
      break;

    case TOTAL_DAYS:
      if (value == null) {
        unsetTotalDays();
      } else {
        setTotalDays((java.lang.Integer)value);
      }
      break;

    case TIMESTAMP:
      if (value == null) {
        unsetTimestamp();
      } else {
        setTimestamp((java.lang.Long)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case MAX_DAYS:
      return getMaxDays();

    case MAX_WEEKS:
      return getMaxWeeks();

    case TOTAL_DAYS:
      return getTotalDays();

    case TIMESTAMP:
      return getTimestamp();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case MAX_DAYS:
      return isSetMaxDays();
    case MAX_WEEKS:
      return isSetMaxWeeks();
    case TOTAL_DAYS:
      return isSetTotalDays();
    case TIMESTAMP:
      return isSetTimestamp();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof Badge)
      return this.equals((Badge)that);
    return false;
  }

  public boolean equals(Badge that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_maxDays = true;
    boolean that_present_maxDays = true;
    if (this_present_maxDays || that_present_maxDays) {
      if (!(this_present_maxDays && that_present_maxDays))
        return false;
      if (this.maxDays != that.maxDays)
        return false;
    }

    boolean this_present_maxWeeks = true;
    boolean that_present_maxWeeks = true;
    if (this_present_maxWeeks || that_present_maxWeeks) {
      if (!(this_present_maxWeeks && that_present_maxWeeks))
        return false;
      if (this.maxWeeks != that.maxWeeks)
        return false;
    }

    boolean this_present_totalDays = true;
    boolean that_present_totalDays = true;
    if (this_present_totalDays || that_present_totalDays) {
      if (!(this_present_totalDays && that_present_totalDays))
        return false;
      if (this.totalDays != that.totalDays)
        return false;
    }

    boolean this_present_timestamp = true;
    boolean that_present_timestamp = true;
    if (this_present_timestamp || that_present_timestamp) {
      if (!(this_present_timestamp && that_present_timestamp))
        return false;
      if (this.timestamp != that.timestamp)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + maxDays;

    hashCode = hashCode * 8191 + maxWeeks;

    hashCode = hashCode * 8191 + totalDays;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(timestamp);

    return hashCode;
  }

  @Override
  public int compareTo(Badge other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetMaxDays()).compareTo(other.isSetMaxDays());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxDays()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxDays, other.maxDays);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMaxWeeks()).compareTo(other.isSetMaxWeeks());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxWeeks()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxWeeks, other.maxWeeks);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTotalDays()).compareTo(other.isSetTotalDays());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalDays()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalDays, other.totalDays);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTimestamp()).compareTo(other.isSetTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, other.timestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("Badge(");
    boolean first = true;

    sb.append("maxDays:");
    sb.append(this.maxDays);
    first = false;
    if (!first) sb.append(", ");
    sb.append("maxWeeks:");
    sb.append(this.maxWeeks);
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalDays:");
    sb.append(this.totalDays);
    first = false;
    if (!first) sb.append(", ");
    sb.append("timestamp:");
    sb.append(this.timestamp);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BadgeStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public BadgeStandardScheme getScheme() {
      return new BadgeStandardScheme();
    }
  }

  private static class BadgeStandardScheme extends org.apache.thrift.scheme.StandardScheme<Badge> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Badge struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MAX_DAYS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.maxDays = iprot.readI32();
              struct.setMaxDaysIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MAX_WEEKS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.maxWeeks = iprot.readI32();
              struct.setMaxWeeksIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TOTAL_DAYS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.totalDays = iprot.readI32();
              struct.setTotalDaysIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.timestamp = iprot.readI64();
              struct.setTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Badge struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(MAX_DAYS_FIELD_DESC);
      oprot.writeI32(struct.maxDays);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MAX_WEEKS_FIELD_DESC);
      oprot.writeI32(struct.maxWeeks);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOTAL_DAYS_FIELD_DESC);
      oprot.writeI32(struct.totalDays);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TIMESTAMP_FIELD_DESC);
      oprot.writeI64(struct.timestamp);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BadgeTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public BadgeTupleScheme getScheme() {
      return new BadgeTupleScheme();
    }
  }

  private static class BadgeTupleScheme extends org.apache.thrift.scheme.TupleScheme<Badge> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Badge struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetMaxDays()) {
        optionals.set(0);
      }
      if (struct.isSetMaxWeeks()) {
        optionals.set(1);
      }
      if (struct.isSetTotalDays()) {
        optionals.set(2);
      }
      if (struct.isSetTimestamp()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetMaxDays()) {
        oprot.writeI32(struct.maxDays);
      }
      if (struct.isSetMaxWeeks()) {
        oprot.writeI32(struct.maxWeeks);
      }
      if (struct.isSetTotalDays()) {
        oprot.writeI32(struct.totalDays);
      }
      if (struct.isSetTimestamp()) {
        oprot.writeI64(struct.timestamp);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Badge struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.maxDays = iprot.readI32();
        struct.setMaxDaysIsSet(true);
      }
      if (incoming.get(1)) {
        struct.maxWeeks = iprot.readI32();
        struct.setMaxWeeksIsSet(true);
      }
      if (incoming.get(2)) {
        struct.totalDays = iprot.readI32();
        struct.setTotalDaysIsSet(true);
      }
      if (incoming.get(3)) {
        struct.timestamp = iprot.readI64();
        struct.setTimestampIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

