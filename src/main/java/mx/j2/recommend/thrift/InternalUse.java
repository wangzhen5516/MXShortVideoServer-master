/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package mx.j2.recommend.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2021-06-09")
public class InternalUse implements org.apache.thrift.TBase<InternalUse, InternalUse._Fields>, java.io.Serializable, Cloneable, Comparable<InternalUse> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("InternalUse");

  private static final org.apache.thrift.protocol.TField APP_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("appName", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField SCORE_FIELD_DESC = new org.apache.thrift.protocol.TField("score", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField VIDEO_SOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("videoSource", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField PUBLISHER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("publisherId", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField TAGS_FIELD_DESC = new org.apache.thrift.protocol.TField("tags", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField UPDATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("updateTime", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField ONLINE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("onlineTime", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField LANGUAGE_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("languageList", org.apache.thrift.protocol.TType.LIST, (short)8);
  private static final org.apache.thrift.protocol.TField COUNTRIES_FIELD_DESC = new org.apache.thrift.protocol.TField("countries", org.apache.thrift.protocol.TType.LIST, (short)9);
  private static final org.apache.thrift.protocol.TField DISTANCE_FIELD_DESC = new org.apache.thrift.protocol.TField("distance", org.apache.thrift.protocol.TType.DOUBLE, (short)10);
  private static final org.apache.thrift.protocol.TField SMALL_FLOW_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("smallFlowName", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField USER_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("userCode", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField RECALL_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("recallName", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField RECALL_SCORE_FIELD_DESC = new org.apache.thrift.protocol.TField("recallScore", org.apache.thrift.protocol.TType.DOUBLE, (short)14);
  private static final org.apache.thrift.protocol.TField ORDER_FIELD_DESC = new org.apache.thrift.protocol.TField("order", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField HEAT_SCORE_FIELD_DESC = new org.apache.thrift.protocol.TField("heatScore", org.apache.thrift.protocol.TType.I32, (short)16);
  private static final org.apache.thrift.protocol.TField IS_TOPHOT_FIELD_DESC = new org.apache.thrift.protocol.TField("isTophot", org.apache.thrift.protocol.TType.I32, (short)17);
  private static final org.apache.thrift.protocol.TField HEAT_SCORE2_FIELD_DESC = new org.apache.thrift.protocol.TField("heatScore2", org.apache.thrift.protocol.TType.DOUBLE, (short)18);
  private static final org.apache.thrift.protocol.TField IS_FROM_INFINITE_HASHTAG_FIELD_DESC = new org.apache.thrift.protocol.TField("isFromInfiniteHashtag", org.apache.thrift.protocol.TType.BOOL, (short)19);
  private static final org.apache.thrift.protocol.TField MULTIPLE_SCORE_FIELD_DESC = new org.apache.thrift.protocol.TField("multipleScore", org.apache.thrift.protocol.TType.DOUBLE, (short)20);
  private static final org.apache.thrift.protocol.TField HASHTAG_HEAT_FIELD_DESC = new org.apache.thrift.protocol.TField("hashtagHeat", org.apache.thrift.protocol.TType.DOUBLE, (short)21);
  private static final org.apache.thrift.protocol.TField IS_BIG_V_FIELD_DESC = new org.apache.thrift.protocol.TField("isBigV", org.apache.thrift.protocol.TType.BOOL, (short)22);
  private static final org.apache.thrift.protocol.TField ONLINE_TIME_NEED_FIELD_DESC = new org.apache.thrift.protocol.TField("onlineTimeNeed", org.apache.thrift.protocol.TType.I64, (short)23);
  private static final org.apache.thrift.protocol.TField IS_UGC_FIELD_DESC = new org.apache.thrift.protocol.TField("isUgc", org.apache.thrift.protocol.TType.BOOL, (short)24);
  private static final org.apache.thrift.protocol.TField POOL_LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("poolLevel", org.apache.thrift.protocol.TType.STRING, (short)25);
  private static final org.apache.thrift.protocol.TField FINISH_RETENTION_SUM10S30D_FIELD_DESC = new org.apache.thrift.protocol.TField("finishRetentionSum10s30d", org.apache.thrift.protocol.TType.DOUBLE, (short)26);
  private static final org.apache.thrift.protocol.TField POOL_PRIORITY_FIELD_DESC = new org.apache.thrift.protocol.TField("poolPriority", org.apache.thrift.protocol.TType.I32, (short)27);
  private static final org.apache.thrift.protocol.TField SESSION_EXIT_RATE7D_FIELD_DESC = new org.apache.thrift.protocol.TField("sessionExitRate7d", org.apache.thrift.protocol.TType.STRING, (short)28);
  private static final org.apache.thrift.protocol.TField SCORE_30D_FIELD_DESC = new org.apache.thrift.protocol.TField("score_30d", org.apache.thrift.protocol.TType.DOUBLE, (short)29);
  private static final org.apache.thrift.protocol.TField NEXT_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("nextToken", org.apache.thrift.protocol.TType.STRING, (short)30);
  private static final org.apache.thrift.protocol.TField RECALL_RESULT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("recallResultID", org.apache.thrift.protocol.TType.STRING, (short)31);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new InternalUseStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new InternalUseTupleSchemeFactory();

  public String appName; // optional
  public String score; // optional
  public String videoSource; // optional
  public String publisherId; // optional
  public java.util.List<String> tags; // optional
  public long updateTime; // optional
  public long onlineTime; // optional
  public java.util.List<String> languageList; // optional
  public java.util.List<String> countries; // optional
  public double distance; // optional
  public String smallFlowName; // optional
  public int userCode; // optional
  public String recallName; // optional
  public double recallScore; // optional
  public int order; // optional
  public int heatScore; // optional
  public int isTophot; // optional
  public double heatScore2; // optional
  public boolean isFromInfiniteHashtag; // optional
  public double multipleScore; // optional
  public double hashtagHeat; // optional
  public boolean isBigV; // optional
  public long onlineTimeNeed; // optional
  public boolean isUgc; // optional
  public String poolLevel; // optional
  public double finishRetentionSum10s30d; // optional
  public int poolPriority; // optional
  public String sessionExitRate7d; // optional
  public double score_30d; // optional
  public String nextToken; // optional
  public String recallResultID; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    APP_NAME((short)1, "appName"),
    SCORE((short)2, "score"),
    VIDEO_SOURCE((short)3, "videoSource"),
    PUBLISHER_ID((short)4, "publisherId"),
    TAGS((short)5, "tags"),
    UPDATE_TIME((short)6, "updateTime"),
    ONLINE_TIME((short)7, "onlineTime"),
    LANGUAGE_LIST((short)8, "languageList"),
    COUNTRIES((short)9, "countries"),
    DISTANCE((short)10, "distance"),
    SMALL_FLOW_NAME((short)11, "smallFlowName"),
    USER_CODE((short)12, "userCode"),
    RECALL_NAME((short)13, "recallName"),
    RECALL_SCORE((short)14, "recallScore"),
    ORDER((short)15, "order"),
    HEAT_SCORE((short)16, "heatScore"),
    IS_TOPHOT((short)17, "isTophot"),
    HEAT_SCORE2((short)18, "heatScore2"),
    IS_FROM_INFINITE_HASHTAG((short)19, "isFromInfiniteHashtag"),
    MULTIPLE_SCORE((short)20, "multipleScore"),
    HASHTAG_HEAT((short)21, "hashtagHeat"),
    IS_BIG_V((short)22, "isBigV"),
    ONLINE_TIME_NEED((short)23, "onlineTimeNeed"),
    IS_UGC((short)24, "isUgc"),
    POOL_LEVEL((short)25, "poolLevel"),
    FINISH_RETENTION_SUM10S30D((short)26, "finishRetentionSum10s30d"),
    POOL_PRIORITY((short)27, "poolPriority"),
    SESSION_EXIT_RATE7D((short)28, "sessionExitRate7d"),
    SCORE_30D((short)29, "score_30d"),
    NEXT_TOKEN((short)30, "nextToken"),
    RECALL_RESULT_ID((short)31, "recallResultID");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // APP_NAME
          return APP_NAME;
        case 2: // SCORE
          return SCORE;
        case 3: // VIDEO_SOURCE
          return VIDEO_SOURCE;
        case 4: // PUBLISHER_ID
          return PUBLISHER_ID;
        case 5: // TAGS
          return TAGS;
        case 6: // UPDATE_TIME
          return UPDATE_TIME;
        case 7: // ONLINE_TIME
          return ONLINE_TIME;
        case 8: // LANGUAGE_LIST
          return LANGUAGE_LIST;
        case 9: // COUNTRIES
          return COUNTRIES;
        case 10: // DISTANCE
          return DISTANCE;
        case 11: // SMALL_FLOW_NAME
          return SMALL_FLOW_NAME;
        case 12: // USER_CODE
          return USER_CODE;
        case 13: // RECALL_NAME
          return RECALL_NAME;
        case 14: // RECALL_SCORE
          return RECALL_SCORE;
        case 15: // ORDER
          return ORDER;
        case 16: // HEAT_SCORE
          return HEAT_SCORE;
        case 17: // IS_TOPHOT
          return IS_TOPHOT;
        case 18: // HEAT_SCORE2
          return HEAT_SCORE2;
        case 19: // IS_FROM_INFINITE_HASHTAG
          return IS_FROM_INFINITE_HASHTAG;
        case 20: // MULTIPLE_SCORE
          return MULTIPLE_SCORE;
        case 21: // HASHTAG_HEAT
          return HASHTAG_HEAT;
        case 22: // IS_BIG_V
          return IS_BIG_V;
        case 23: // ONLINE_TIME_NEED
          return ONLINE_TIME_NEED;
        case 24: // IS_UGC
          return IS_UGC;
        case 25: // POOL_LEVEL
          return POOL_LEVEL;
        case 26: // FINISH_RETENTION_SUM10S30D
          return FINISH_RETENTION_SUM10S30D;
        case 27: // POOL_PRIORITY
          return POOL_PRIORITY;
        case 28: // SESSION_EXIT_RATE7D
          return SESSION_EXIT_RATE7D;
        case 29: // SCORE_30D
          return SCORE_30D;
        case 30: // NEXT_TOKEN
          return NEXT_TOKEN;
        case 31: // RECALL_RESULT_ID
          return RECALL_RESULT_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __UPDATETIME_ISSET_ID = 0;
  private static final int __ONLINETIME_ISSET_ID = 1;
  private static final int __DISTANCE_ISSET_ID = 2;
  private static final int __USERCODE_ISSET_ID = 3;
  private static final int __RECALLSCORE_ISSET_ID = 4;
  private static final int __ORDER_ISSET_ID = 5;
  private static final int __HEATSCORE_ISSET_ID = 6;
  private static final int __ISTOPHOT_ISSET_ID = 7;
  private static final int __HEATSCORE2_ISSET_ID = 8;
  private static final int __ISFROMINFINITEHASHTAG_ISSET_ID = 9;
  private static final int __MULTIPLESCORE_ISSET_ID = 10;
  private static final int __HASHTAGHEAT_ISSET_ID = 11;
  private static final int __ISBIGV_ISSET_ID = 12;
  private static final int __ONLINETIMENEED_ISSET_ID = 13;
  private static final int __ISUGC_ISSET_ID = 14;
  private static final int __FINISHRETENTIONSUM10S30D_ISSET_ID = 15;
  private static final int __POOLPRIORITY_ISSET_ID = 16;
  private static final int __SCORE_30D_ISSET_ID = 17;
  private int __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.APP_NAME,_Fields.SCORE,_Fields.VIDEO_SOURCE,_Fields.PUBLISHER_ID,_Fields.TAGS,_Fields.UPDATE_TIME,_Fields.ONLINE_TIME,_Fields.LANGUAGE_LIST,_Fields.COUNTRIES,_Fields.DISTANCE,_Fields.SMALL_FLOW_NAME,_Fields.USER_CODE,_Fields.RECALL_NAME,_Fields.RECALL_SCORE,_Fields.ORDER,_Fields.HEAT_SCORE,_Fields.IS_TOPHOT,_Fields.HEAT_SCORE2,_Fields.IS_FROM_INFINITE_HASHTAG,_Fields.MULTIPLE_SCORE,_Fields.HASHTAG_HEAT,_Fields.IS_BIG_V,_Fields.ONLINE_TIME_NEED,_Fields.IS_UGC,_Fields.POOL_LEVEL,_Fields.FINISH_RETENTION_SUM10S30D,_Fields.POOL_PRIORITY,_Fields.SESSION_EXIT_RATE7D,_Fields.SCORE_30D,_Fields.NEXT_TOKEN,_Fields.RECALL_RESULT_ID};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.APP_NAME, new org.apache.thrift.meta_data.FieldMetaData("appName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SCORE, new org.apache.thrift.meta_data.FieldMetaData("score", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VIDEO_SOURCE, new org.apache.thrift.meta_data.FieldMetaData("videoSource", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PUBLISHER_ID, new org.apache.thrift.meta_data.FieldMetaData("publisherId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TAGS, new org.apache.thrift.meta_data.FieldMetaData("tags", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.UPDATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("updateTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ONLINE_TIME, new org.apache.thrift.meta_data.FieldMetaData("onlineTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LANGUAGE_LIST, new org.apache.thrift.meta_data.FieldMetaData("languageList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.COUNTRIES, new org.apache.thrift.meta_data.FieldMetaData("countries", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.DISTANCE, new org.apache.thrift.meta_data.FieldMetaData("distance", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SMALL_FLOW_NAME, new org.apache.thrift.meta_data.FieldMetaData("smallFlowName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_CODE, new org.apache.thrift.meta_data.FieldMetaData("userCode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RECALL_NAME, new org.apache.thrift.meta_data.FieldMetaData("recallName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RECALL_SCORE, new org.apache.thrift.meta_data.FieldMetaData("recallScore", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ORDER, new org.apache.thrift.meta_data.FieldMetaData("order", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.HEAT_SCORE, new org.apache.thrift.meta_data.FieldMetaData("heatScore", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IS_TOPHOT, new org.apache.thrift.meta_data.FieldMetaData("isTophot", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.HEAT_SCORE2, new org.apache.thrift.meta_data.FieldMetaData("heatScore2", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.IS_FROM_INFINITE_HASHTAG, new org.apache.thrift.meta_data.FieldMetaData("isFromInfiniteHashtag", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.MULTIPLE_SCORE, new org.apache.thrift.meta_data.FieldMetaData("multipleScore", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.HASHTAG_HEAT, new org.apache.thrift.meta_data.FieldMetaData("hashtagHeat", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.IS_BIG_V, new org.apache.thrift.meta_data.FieldMetaData("isBigV", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.ONLINE_TIME_NEED, new org.apache.thrift.meta_data.FieldMetaData("onlineTimeNeed", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.IS_UGC, new org.apache.thrift.meta_data.FieldMetaData("isUgc", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.POOL_LEVEL, new org.apache.thrift.meta_data.FieldMetaData("poolLevel", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FINISH_RETENTION_SUM10S30D, new org.apache.thrift.meta_data.FieldMetaData("finishRetentionSum10s30d", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.POOL_PRIORITY, new org.apache.thrift.meta_data.FieldMetaData("poolPriority", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SESSION_EXIT_RATE7D, new org.apache.thrift.meta_data.FieldMetaData("sessionExitRate7d", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SCORE_30D, new org.apache.thrift.meta_data.FieldMetaData("score_30d", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.NEXT_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("nextToken", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RECALL_RESULT_ID, new org.apache.thrift.meta_data.FieldMetaData("recallResultID", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(InternalUse.class, metaDataMap);
  }

  public InternalUse() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public InternalUse(InternalUse other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetAppName()) {
      this.appName = other.appName;
    }
    if (other.isSetScore()) {
      this.score = other.score;
    }
    if (other.isSetVideoSource()) {
      this.videoSource = other.videoSource;
    }
    if (other.isSetPublisherId()) {
      this.publisherId = other.publisherId;
    }
    if (other.isSetTags()) {
      java.util.List<String> __this__tags = new java.util.ArrayList<String>(other.tags);
      this.tags = __this__tags;
    }
    this.updateTime = other.updateTime;
    this.onlineTime = other.onlineTime;
    if (other.isSetLanguageList()) {
      java.util.List<String> __this__languageList = new java.util.ArrayList<String>(other.languageList);
      this.languageList = __this__languageList;
    }
    if (other.isSetCountries()) {
      java.util.List<String> __this__countries = new java.util.ArrayList<String>(other.countries);
      this.countries = __this__countries;
    }
    this.distance = other.distance;
    if (other.isSetSmallFlowName()) {
      this.smallFlowName = other.smallFlowName;
    }
    this.userCode = other.userCode;
    if (other.isSetRecallName()) {
      this.recallName = other.recallName;
    }
    this.recallScore = other.recallScore;
    this.order = other.order;
    this.heatScore = other.heatScore;
    this.isTophot = other.isTophot;
    this.heatScore2 = other.heatScore2;
    this.isFromInfiniteHashtag = other.isFromInfiniteHashtag;
    this.multipleScore = other.multipleScore;
    this.hashtagHeat = other.hashtagHeat;
    this.isBigV = other.isBigV;
    this.onlineTimeNeed = other.onlineTimeNeed;
    this.isUgc = other.isUgc;
    if (other.isSetPoolLevel()) {
      this.poolLevel = other.poolLevel;
    }
    this.finishRetentionSum10s30d = other.finishRetentionSum10s30d;
    this.poolPriority = other.poolPriority;
    if (other.isSetSessionExitRate7d()) {
      this.sessionExitRate7d = other.sessionExitRate7d;
    }
    this.score_30d = other.score_30d;
    if (other.isSetNextToken()) {
      this.nextToken = other.nextToken;
    }
    if (other.isSetRecallResultID()) {
      this.recallResultID = other.recallResultID;
    }
  }

  public InternalUse deepCopy() {
    return new InternalUse(this);
  }

  @Override
  public void clear() {
    this.appName = null;
    this.score = null;
    this.videoSource = null;
    this.publisherId = null;
    this.tags = null;
    setUpdateTimeIsSet(false);
    this.updateTime = 0;
    setOnlineTimeIsSet(false);
    this.onlineTime = 0;
    this.languageList = null;
    this.countries = null;
    setDistanceIsSet(false);
    this.distance = 0.0;
    this.smallFlowName = null;
    setUserCodeIsSet(false);
    this.userCode = 0;
    this.recallName = null;
    setRecallScoreIsSet(false);
    this.recallScore = 0.0;
    setOrderIsSet(false);
    this.order = 0;
    setHeatScoreIsSet(false);
    this.heatScore = 0;
    setIsTophotIsSet(false);
    this.isTophot = 0;
    setHeatScore2IsSet(false);
    this.heatScore2 = 0.0;
    setIsFromInfiniteHashtagIsSet(false);
    this.isFromInfiniteHashtag = false;
    setMultipleScoreIsSet(false);
    this.multipleScore = 0.0;
    setHashtagHeatIsSet(false);
    this.hashtagHeat = 0.0;
    setIsBigVIsSet(false);
    this.isBigV = false;
    setOnlineTimeNeedIsSet(false);
    this.onlineTimeNeed = 0;
    setIsUgcIsSet(false);
    this.isUgc = false;
    this.poolLevel = null;
    setFinishRetentionSum10s30dIsSet(false);
    this.finishRetentionSum10s30d = 0.0;
    setPoolPriorityIsSet(false);
    this.poolPriority = 0;
    this.sessionExitRate7d = null;
    setScore_30dIsSet(false);
    this.score_30d = 0.0;
    this.nextToken = null;
    this.recallResultID = null;
  }

  public String getAppName() {
    return this.appName;
  }

  public InternalUse setAppName(String appName) {
    this.appName = appName;
    return this;
  }

  public void unsetAppName() {
    this.appName = null;
  }

  /** Returns true if field appName is set (has been assigned a value) and false otherwise */
  public boolean isSetAppName() {
    return this.appName != null;
  }

  public void setAppNameIsSet(boolean value) {
    if (!value) {
      this.appName = null;
    }
  }

  public String getScore() {
    return this.score;
  }

  public InternalUse setScore(String score) {
    this.score = score;
    return this;
  }

  public void unsetScore() {
    this.score = null;
  }

  /** Returns true if field score is set (has been assigned a value) and false otherwise */
  public boolean isSetScore() {
    return this.score != null;
  }

  public void setScoreIsSet(boolean value) {
    if (!value) {
      this.score = null;
    }
  }

  public String getVideoSource() {
    return this.videoSource;
  }

  public InternalUse setVideoSource(String videoSource) {
    this.videoSource = videoSource;
    return this;
  }

  public void unsetVideoSource() {
    this.videoSource = null;
  }

  /** Returns true if field videoSource is set (has been assigned a value) and false otherwise */
  public boolean isSetVideoSource() {
    return this.videoSource != null;
  }

  public void setVideoSourceIsSet(boolean value) {
    if (!value) {
      this.videoSource = null;
    }
  }

  public String getPublisherId() {
    return this.publisherId;
  }

  public InternalUse setPublisherId(String publisherId) {
    this.publisherId = publisherId;
    return this;
  }

  public void unsetPublisherId() {
    this.publisherId = null;
  }

  /** Returns true if field publisherId is set (has been assigned a value) and false otherwise */
  public boolean isSetPublisherId() {
    return this.publisherId != null;
  }

  public void setPublisherIdIsSet(boolean value) {
    if (!value) {
      this.publisherId = null;
    }
  }

  public int getTagsSize() {
    return (this.tags == null) ? 0 : this.tags.size();
  }

  public java.util.Iterator<String> getTagsIterator() {
    return (this.tags == null) ? null : this.tags.iterator();
  }

  public void addToTags(String elem) {
    if (this.tags == null) {
      this.tags = new java.util.ArrayList<String>();
    }
    this.tags.add(elem);
  }

  public java.util.List<String> getTags() {
    return this.tags;
  }

  public InternalUse setTags(java.util.List<String> tags) {
    this.tags = tags;
    return this;
  }

  public void unsetTags() {
    this.tags = null;
  }

  /** Returns true if field tags is set (has been assigned a value) and false otherwise */
  public boolean isSetTags() {
    return this.tags != null;
  }

  public void setTagsIsSet(boolean value) {
    if (!value) {
      this.tags = null;
    }
  }

  public long getUpdateTime() {
    return this.updateTime;
  }

  public InternalUse setUpdateTime(long updateTime) {
    this.updateTime = updateTime;
    setUpdateTimeIsSet(true);
    return this;
  }

  public void unsetUpdateTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __UPDATETIME_ISSET_ID);
  }

  /** Returns true if field updateTime is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __UPDATETIME_ISSET_ID);
  }

  public void setUpdateTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __UPDATETIME_ISSET_ID, value);
  }

  public long getOnlineTime() {
    return this.onlineTime;
  }

  public InternalUse setOnlineTime(long onlineTime) {
    this.onlineTime = onlineTime;
    setOnlineTimeIsSet(true);
    return this;
  }

  public void unsetOnlineTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ONLINETIME_ISSET_ID);
  }

  /** Returns true if field onlineTime is set (has been assigned a value) and false otherwise */
  public boolean isSetOnlineTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ONLINETIME_ISSET_ID);
  }

  public void setOnlineTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ONLINETIME_ISSET_ID, value);
  }

  public int getLanguageListSize() {
    return (this.languageList == null) ? 0 : this.languageList.size();
  }

  public java.util.Iterator<String> getLanguageListIterator() {
    return (this.languageList == null) ? null : this.languageList.iterator();
  }

  public void addToLanguageList(String elem) {
    if (this.languageList == null) {
      this.languageList = new java.util.ArrayList<String>();
    }
    this.languageList.add(elem);
  }

  public java.util.List<String> getLanguageList() {
    return this.languageList;
  }

  public InternalUse setLanguageList(java.util.List<String> languageList) {
    this.languageList = languageList;
    return this;
  }

  public void unsetLanguageList() {
    this.languageList = null;
  }

  /** Returns true if field languageList is set (has been assigned a value) and false otherwise */
  public boolean isSetLanguageList() {
    return this.languageList != null;
  }

  public void setLanguageListIsSet(boolean value) {
    if (!value) {
      this.languageList = null;
    }
  }

  public int getCountriesSize() {
    return (this.countries == null) ? 0 : this.countries.size();
  }

  public java.util.Iterator<String> getCountriesIterator() {
    return (this.countries == null) ? null : this.countries.iterator();
  }

  public void addToCountries(String elem) {
    if (this.countries == null) {
      this.countries = new java.util.ArrayList<String>();
    }
    this.countries.add(elem);
  }

  public java.util.List<String> getCountries() {
    return this.countries;
  }

  public InternalUse setCountries(java.util.List<String> countries) {
    this.countries = countries;
    return this;
  }

  public void unsetCountries() {
    this.countries = null;
  }

  /** Returns true if field countries is set (has been assigned a value) and false otherwise */
  public boolean isSetCountries() {
    return this.countries != null;
  }

  public void setCountriesIsSet(boolean value) {
    if (!value) {
      this.countries = null;
    }
  }

  public double getDistance() {
    return this.distance;
  }

  public InternalUse setDistance(double distance) {
    this.distance = distance;
    setDistanceIsSet(true);
    return this;
  }

  public void unsetDistance() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DISTANCE_ISSET_ID);
  }

  /** Returns true if field distance is set (has been assigned a value) and false otherwise */
  public boolean isSetDistance() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DISTANCE_ISSET_ID);
  }

  public void setDistanceIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DISTANCE_ISSET_ID, value);
  }

  public String getSmallFlowName() {
    return this.smallFlowName;
  }

  public InternalUse setSmallFlowName(String smallFlowName) {
    this.smallFlowName = smallFlowName;
    return this;
  }

  public void unsetSmallFlowName() {
    this.smallFlowName = null;
  }

  /** Returns true if field smallFlowName is set (has been assigned a value) and false otherwise */
  public boolean isSetSmallFlowName() {
    return this.smallFlowName != null;
  }

  public void setSmallFlowNameIsSet(boolean value) {
    if (!value) {
      this.smallFlowName = null;
    }
  }

  public int getUserCode() {
    return this.userCode;
  }

  public InternalUse setUserCode(int userCode) {
    this.userCode = userCode;
    setUserCodeIsSet(true);
    return this;
  }

  public void unsetUserCode() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __USERCODE_ISSET_ID);
  }

  /** Returns true if field userCode is set (has been assigned a value) and false otherwise */
  public boolean isSetUserCode() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __USERCODE_ISSET_ID);
  }

  public void setUserCodeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __USERCODE_ISSET_ID, value);
  }

  public String getRecallName() {
    return this.recallName;
  }

  public InternalUse setRecallName(String recallName) {
    this.recallName = recallName;
    return this;
  }

  public void unsetRecallName() {
    this.recallName = null;
  }

  /** Returns true if field recallName is set (has been assigned a value) and false otherwise */
  public boolean isSetRecallName() {
    return this.recallName != null;
  }

  public void setRecallNameIsSet(boolean value) {
    if (!value) {
      this.recallName = null;
    }
  }

  public double getRecallScore() {
    return this.recallScore;
  }

  public InternalUse setRecallScore(double recallScore) {
    this.recallScore = recallScore;
    setRecallScoreIsSet(true);
    return this;
  }

  public void unsetRecallScore() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RECALLSCORE_ISSET_ID);
  }

  /** Returns true if field recallScore is set (has been assigned a value) and false otherwise */
  public boolean isSetRecallScore() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RECALLSCORE_ISSET_ID);
  }

  public void setRecallScoreIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RECALLSCORE_ISSET_ID, value);
  }

  public int getOrder() {
    return this.order;
  }

  public InternalUse setOrder(int order) {
    this.order = order;
    setOrderIsSet(true);
    return this;
  }

  public void unsetOrder() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ORDER_ISSET_ID);
  }

  /** Returns true if field order is set (has been assigned a value) and false otherwise */
  public boolean isSetOrder() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ORDER_ISSET_ID);
  }

  public void setOrderIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ORDER_ISSET_ID, value);
  }

  public int getHeatScore() {
    return this.heatScore;
  }

  public InternalUse setHeatScore(int heatScore) {
    this.heatScore = heatScore;
    setHeatScoreIsSet(true);
    return this;
  }

  public void unsetHeatScore() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HEATSCORE_ISSET_ID);
  }

  /** Returns true if field heatScore is set (has been assigned a value) and false otherwise */
  public boolean isSetHeatScore() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HEATSCORE_ISSET_ID);
  }

  public void setHeatScoreIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HEATSCORE_ISSET_ID, value);
  }

  public int getIsTophot() {
    return this.isTophot;
  }

  public InternalUse setIsTophot(int isTophot) {
    this.isTophot = isTophot;
    setIsTophotIsSet(true);
    return this;
  }

  public void unsetIsTophot() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISTOPHOT_ISSET_ID);
  }

  /** Returns true if field isTophot is set (has been assigned a value) and false otherwise */
  public boolean isSetIsTophot() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISTOPHOT_ISSET_ID);
  }

  public void setIsTophotIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISTOPHOT_ISSET_ID, value);
  }

  public double getHeatScore2() {
    return this.heatScore2;
  }

  public InternalUse setHeatScore2(double heatScore2) {
    this.heatScore2 = heatScore2;
    setHeatScore2IsSet(true);
    return this;
  }

  public void unsetHeatScore2() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HEATSCORE2_ISSET_ID);
  }

  /** Returns true if field heatScore2 is set (has been assigned a value) and false otherwise */
  public boolean isSetHeatScore2() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HEATSCORE2_ISSET_ID);
  }

  public void setHeatScore2IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HEATSCORE2_ISSET_ID, value);
  }

  public boolean isIsFromInfiniteHashtag() {
    return this.isFromInfiniteHashtag;
  }

  public InternalUse setIsFromInfiniteHashtag(boolean isFromInfiniteHashtag) {
    this.isFromInfiniteHashtag = isFromInfiniteHashtag;
    setIsFromInfiniteHashtagIsSet(true);
    return this;
  }

  public void unsetIsFromInfiniteHashtag() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISFROMINFINITEHASHTAG_ISSET_ID);
  }

  /** Returns true if field isFromInfiniteHashtag is set (has been assigned a value) and false otherwise */
  public boolean isSetIsFromInfiniteHashtag() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISFROMINFINITEHASHTAG_ISSET_ID);
  }

  public void setIsFromInfiniteHashtagIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISFROMINFINITEHASHTAG_ISSET_ID, value);
  }

  public double getMultipleScore() {
    return this.multipleScore;
  }

  public InternalUse setMultipleScore(double multipleScore) {
    this.multipleScore = multipleScore;
    setMultipleScoreIsSet(true);
    return this;
  }

  public void unsetMultipleScore() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MULTIPLESCORE_ISSET_ID);
  }

  /** Returns true if field multipleScore is set (has been assigned a value) and false otherwise */
  public boolean isSetMultipleScore() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MULTIPLESCORE_ISSET_ID);
  }

  public void setMultipleScoreIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MULTIPLESCORE_ISSET_ID, value);
  }

  public double getHashtagHeat() {
    return this.hashtagHeat;
  }

  public InternalUse setHashtagHeat(double hashtagHeat) {
    this.hashtagHeat = hashtagHeat;
    setHashtagHeatIsSet(true);
    return this;
  }

  public void unsetHashtagHeat() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HASHTAGHEAT_ISSET_ID);
  }

  /** Returns true if field hashtagHeat is set (has been assigned a value) and false otherwise */
  public boolean isSetHashtagHeat() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HASHTAGHEAT_ISSET_ID);
  }

  public void setHashtagHeatIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HASHTAGHEAT_ISSET_ID, value);
  }

  public boolean isIsBigV() {
    return this.isBigV;
  }

  public InternalUse setIsBigV(boolean isBigV) {
    this.isBigV = isBigV;
    setIsBigVIsSet(true);
    return this;
  }

  public void unsetIsBigV() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISBIGV_ISSET_ID);
  }

  /** Returns true if field isBigV is set (has been assigned a value) and false otherwise */
  public boolean isSetIsBigV() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISBIGV_ISSET_ID);
  }

  public void setIsBigVIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISBIGV_ISSET_ID, value);
  }

  public long getOnlineTimeNeed() {
    return this.onlineTimeNeed;
  }

  public InternalUse setOnlineTimeNeed(long onlineTimeNeed) {
    this.onlineTimeNeed = onlineTimeNeed;
    setOnlineTimeNeedIsSet(true);
    return this;
  }

  public void unsetOnlineTimeNeed() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ONLINETIMENEED_ISSET_ID);
  }

  /** Returns true if field onlineTimeNeed is set (has been assigned a value) and false otherwise */
  public boolean isSetOnlineTimeNeed() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ONLINETIMENEED_ISSET_ID);
  }

  public void setOnlineTimeNeedIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ONLINETIMENEED_ISSET_ID, value);
  }

  public boolean isIsUgc() {
    return this.isUgc;
  }

  public InternalUse setIsUgc(boolean isUgc) {
    this.isUgc = isUgc;
    setIsUgcIsSet(true);
    return this;
  }

  public void unsetIsUgc() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISUGC_ISSET_ID);
  }

  /** Returns true if field isUgc is set (has been assigned a value) and false otherwise */
  public boolean isSetIsUgc() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISUGC_ISSET_ID);
  }

  public void setIsUgcIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISUGC_ISSET_ID, value);
  }

  public String getPoolLevel() {
    return this.poolLevel;
  }

  public InternalUse setPoolLevel(String poolLevel) {
    this.poolLevel = poolLevel;
    return this;
  }

  public void unsetPoolLevel() {
    this.poolLevel = null;
  }

  /** Returns true if field poolLevel is set (has been assigned a value) and false otherwise */
  public boolean isSetPoolLevel() {
    return this.poolLevel != null;
  }

  public void setPoolLevelIsSet(boolean value) {
    if (!value) {
      this.poolLevel = null;
    }
  }

  public double getFinishRetentionSum10s30d() {
    return this.finishRetentionSum10s30d;
  }

  public InternalUse setFinishRetentionSum10s30d(double finishRetentionSum10s30d) {
    this.finishRetentionSum10s30d = finishRetentionSum10s30d;
    setFinishRetentionSum10s30dIsSet(true);
    return this;
  }

  public void unsetFinishRetentionSum10s30d() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FINISHRETENTIONSUM10S30D_ISSET_ID);
  }

  /** Returns true if field finishRetentionSum10s30d is set (has been assigned a value) and false otherwise */
  public boolean isSetFinishRetentionSum10s30d() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FINISHRETENTIONSUM10S30D_ISSET_ID);
  }

  public void setFinishRetentionSum10s30dIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FINISHRETENTIONSUM10S30D_ISSET_ID, value);
  }

  public int getPoolPriority() {
    return this.poolPriority;
  }

  public InternalUse setPoolPriority(int poolPriority) {
    this.poolPriority = poolPriority;
    setPoolPriorityIsSet(true);
    return this;
  }

  public void unsetPoolPriority() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __POOLPRIORITY_ISSET_ID);
  }

  /** Returns true if field poolPriority is set (has been assigned a value) and false otherwise */
  public boolean isSetPoolPriority() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __POOLPRIORITY_ISSET_ID);
  }

  public void setPoolPriorityIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __POOLPRIORITY_ISSET_ID, value);
  }

  public String getSessionExitRate7d() {
    return this.sessionExitRate7d;
  }

  public InternalUse setSessionExitRate7d(String sessionExitRate7d) {
    this.sessionExitRate7d = sessionExitRate7d;
    return this;
  }

  public void unsetSessionExitRate7d() {
    this.sessionExitRate7d = null;
  }

  /** Returns true if field sessionExitRate7d is set (has been assigned a value) and false otherwise */
  public boolean isSetSessionExitRate7d() {
    return this.sessionExitRate7d != null;
  }

  public void setSessionExitRate7dIsSet(boolean value) {
    if (!value) {
      this.sessionExitRate7d = null;
    }
  }

  public double getScore_30d() {
    return this.score_30d;
  }

  public InternalUse setScore_30d(double score_30d) {
    this.score_30d = score_30d;
    setScore_30dIsSet(true);
    return this;
  }

  public void unsetScore_30d() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SCORE_30D_ISSET_ID);
  }

  /** Returns true if field score_30d is set (has been assigned a value) and false otherwise */
  public boolean isSetScore_30d() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SCORE_30D_ISSET_ID);
  }

  public void setScore_30dIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SCORE_30D_ISSET_ID, value);
  }

  public String getNextToken() {
    return this.nextToken;
  }

  public InternalUse setNextToken(String nextToken) {
    this.nextToken = nextToken;
    return this;
  }

  public void unsetNextToken() {
    this.nextToken = null;
  }

  /** Returns true if field nextToken is set (has been assigned a value) and false otherwise */
  public boolean isSetNextToken() {
    return this.nextToken != null;
  }

  public void setNextTokenIsSet(boolean value) {
    if (!value) {
      this.nextToken = null;
    }
  }

  public String getRecallResultID() {
    return this.recallResultID;
  }

  public InternalUse setRecallResultID(String recallResultID) {
    this.recallResultID = recallResultID;
    return this;
  }

  public void unsetRecallResultID() {
    this.recallResultID = null;
  }

  /** Returns true if field recallResultID is set (has been assigned a value) and false otherwise */
  public boolean isSetRecallResultID() {
    return this.recallResultID != null;
  }

  public void setRecallResultIDIsSet(boolean value) {
    if (!value) {
      this.recallResultID = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case APP_NAME:
      if (value == null) {
        unsetAppName();
      } else {
        setAppName((String)value);
      }
      break;

    case SCORE:
      if (value == null) {
        unsetScore();
      } else {
        setScore((String)value);
      }
      break;

    case VIDEO_SOURCE:
      if (value == null) {
        unsetVideoSource();
      } else {
        setVideoSource((String)value);
      }
      break;

    case PUBLISHER_ID:
      if (value == null) {
        unsetPublisherId();
      } else {
        setPublisherId((String)value);
      }
      break;

    case TAGS:
      if (value == null) {
        unsetTags();
      } else {
        setTags((java.util.List<String>)value);
      }
      break;

    case UPDATE_TIME:
      if (value == null) {
        unsetUpdateTime();
      } else {
        setUpdateTime((Long)value);
      }
      break;

    case ONLINE_TIME:
      if (value == null) {
        unsetOnlineTime();
      } else {
        setOnlineTime((Long)value);
      }
      break;

    case LANGUAGE_LIST:
      if (value == null) {
        unsetLanguageList();
      } else {
        setLanguageList((java.util.List<String>)value);
      }
      break;

    case COUNTRIES:
      if (value == null) {
        unsetCountries();
      } else {
        setCountries((java.util.List<String>)value);
      }
      break;

    case DISTANCE:
      if (value == null) {
        unsetDistance();
      } else {
        setDistance((Double)value);
      }
      break;

    case SMALL_FLOW_NAME:
      if (value == null) {
        unsetSmallFlowName();
      } else {
        setSmallFlowName((String)value);
      }
      break;

    case USER_CODE:
      if (value == null) {
        unsetUserCode();
      } else {
        setUserCode((Integer)value);
      }
      break;

    case RECALL_NAME:
      if (value == null) {
        unsetRecallName();
      } else {
        setRecallName((String)value);
      }
      break;

    case RECALL_SCORE:
      if (value == null) {
        unsetRecallScore();
      } else {
        setRecallScore((Double)value);
      }
      break;

    case ORDER:
      if (value == null) {
        unsetOrder();
      } else {
        setOrder((Integer)value);
      }
      break;

    case HEAT_SCORE:
      if (value == null) {
        unsetHeatScore();
      } else {
        setHeatScore((Integer)value);
      }
      break;

    case IS_TOPHOT:
      if (value == null) {
        unsetIsTophot();
      } else {
        setIsTophot((Integer)value);
      }
      break;

    case HEAT_SCORE2:
      if (value == null) {
        unsetHeatScore2();
      } else {
        setHeatScore2((Double)value);
      }
      break;

    case IS_FROM_INFINITE_HASHTAG:
      if (value == null) {
        unsetIsFromInfiniteHashtag();
      } else {
        setIsFromInfiniteHashtag((Boolean)value);
      }
      break;

    case MULTIPLE_SCORE:
      if (value == null) {
        unsetMultipleScore();
      } else {
        setMultipleScore((Double)value);
      }
      break;

    case HASHTAG_HEAT:
      if (value == null) {
        unsetHashtagHeat();
      } else {
        setHashtagHeat((Double)value);
      }
      break;

    case IS_BIG_V:
      if (value == null) {
        unsetIsBigV();
      } else {
        setIsBigV((Boolean)value);
      }
      break;

    case ONLINE_TIME_NEED:
      if (value == null) {
        unsetOnlineTimeNeed();
      } else {
        setOnlineTimeNeed((Long)value);
      }
      break;

    case IS_UGC:
      if (value == null) {
        unsetIsUgc();
      } else {
        setIsUgc((Boolean)value);
      }
      break;

    case POOL_LEVEL:
      if (value == null) {
        unsetPoolLevel();
      } else {
        setPoolLevel((String)value);
      }
      break;

    case FINISH_RETENTION_SUM10S30D:
      if (value == null) {
        unsetFinishRetentionSum10s30d();
      } else {
        setFinishRetentionSum10s30d((Double)value);
      }
      break;

    case POOL_PRIORITY:
      if (value == null) {
        unsetPoolPriority();
      } else {
        setPoolPriority((Integer)value);
      }
      break;

    case SESSION_EXIT_RATE7D:
      if (value == null) {
        unsetSessionExitRate7d();
      } else {
        setSessionExitRate7d((String)value);
      }
      break;

    case SCORE_30D:
      if (value == null) {
        unsetScore_30d();
      } else {
        setScore_30d((Double)value);
      }
      break;

    case NEXT_TOKEN:
      if (value == null) {
        unsetNextToken();
      } else {
        setNextToken((String)value);
      }
      break;

    case RECALL_RESULT_ID:
      if (value == null) {
        unsetRecallResultID();
      } else {
        setRecallResultID((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case APP_NAME:
      return getAppName();

    case SCORE:
      return getScore();

    case VIDEO_SOURCE:
      return getVideoSource();

    case PUBLISHER_ID:
      return getPublisherId();

    case TAGS:
      return getTags();

    case UPDATE_TIME:
      return getUpdateTime();

    case ONLINE_TIME:
      return getOnlineTime();

    case LANGUAGE_LIST:
      return getLanguageList();

    case COUNTRIES:
      return getCountries();

    case DISTANCE:
      return getDistance();

    case SMALL_FLOW_NAME:
      return getSmallFlowName();

    case USER_CODE:
      return getUserCode();

    case RECALL_NAME:
      return getRecallName();

    case RECALL_SCORE:
      return getRecallScore();

    case ORDER:
      return getOrder();

    case HEAT_SCORE:
      return getHeatScore();

    case IS_TOPHOT:
      return getIsTophot();

    case HEAT_SCORE2:
      return getHeatScore2();

    case IS_FROM_INFINITE_HASHTAG:
      return isIsFromInfiniteHashtag();

    case MULTIPLE_SCORE:
      return getMultipleScore();

    case HASHTAG_HEAT:
      return getHashtagHeat();

    case IS_BIG_V:
      return isIsBigV();

    case ONLINE_TIME_NEED:
      return getOnlineTimeNeed();

    case IS_UGC:
      return isIsUgc();

    case POOL_LEVEL:
      return getPoolLevel();

    case FINISH_RETENTION_SUM10S30D:
      return getFinishRetentionSum10s30d();

    case POOL_PRIORITY:
      return getPoolPriority();

    case SESSION_EXIT_RATE7D:
      return getSessionExitRate7d();

    case SCORE_30D:
      return getScore_30d();

    case NEXT_TOKEN:
      return getNextToken();

    case RECALL_RESULT_ID:
      return getRecallResultID();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case APP_NAME:
      return isSetAppName();
    case SCORE:
      return isSetScore();
    case VIDEO_SOURCE:
      return isSetVideoSource();
    case PUBLISHER_ID:
      return isSetPublisherId();
    case TAGS:
      return isSetTags();
    case UPDATE_TIME:
      return isSetUpdateTime();
    case ONLINE_TIME:
      return isSetOnlineTime();
    case LANGUAGE_LIST:
      return isSetLanguageList();
    case COUNTRIES:
      return isSetCountries();
    case DISTANCE:
      return isSetDistance();
    case SMALL_FLOW_NAME:
      return isSetSmallFlowName();
    case USER_CODE:
      return isSetUserCode();
    case RECALL_NAME:
      return isSetRecallName();
    case RECALL_SCORE:
      return isSetRecallScore();
    case ORDER:
      return isSetOrder();
    case HEAT_SCORE:
      return isSetHeatScore();
    case IS_TOPHOT:
      return isSetIsTophot();
    case HEAT_SCORE2:
      return isSetHeatScore2();
    case IS_FROM_INFINITE_HASHTAG:
      return isSetIsFromInfiniteHashtag();
    case MULTIPLE_SCORE:
      return isSetMultipleScore();
    case HASHTAG_HEAT:
      return isSetHashtagHeat();
    case IS_BIG_V:
      return isSetIsBigV();
    case ONLINE_TIME_NEED:
      return isSetOnlineTimeNeed();
    case IS_UGC:
      return isSetIsUgc();
    case POOL_LEVEL:
      return isSetPoolLevel();
    case FINISH_RETENTION_SUM10S30D:
      return isSetFinishRetentionSum10s30d();
    case POOL_PRIORITY:
      return isSetPoolPriority();
    case SESSION_EXIT_RATE7D:
      return isSetSessionExitRate7d();
    case SCORE_30D:
      return isSetScore_30d();
    case NEXT_TOKEN:
      return isSetNextToken();
    case RECALL_RESULT_ID:
      return isSetRecallResultID();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof InternalUse)
      return this.equals((InternalUse)that);
    return false;
  }

  public boolean equals(InternalUse that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_appName = true && this.isSetAppName();
    boolean that_present_appName = true && that.isSetAppName();
    if (this_present_appName || that_present_appName) {
      if (!(this_present_appName && that_present_appName))
        return false;
      if (!this.appName.equals(that.appName))
        return false;
    }

    boolean this_present_score = true && this.isSetScore();
    boolean that_present_score = true && that.isSetScore();
    if (this_present_score || that_present_score) {
      if (!(this_present_score && that_present_score))
        return false;
      if (!this.score.equals(that.score))
        return false;
    }

    boolean this_present_videoSource = true && this.isSetVideoSource();
    boolean that_present_videoSource = true && that.isSetVideoSource();
    if (this_present_videoSource || that_present_videoSource) {
      if (!(this_present_videoSource && that_present_videoSource))
        return false;
      if (!this.videoSource.equals(that.videoSource))
        return false;
    }

    boolean this_present_publisherId = true && this.isSetPublisherId();
    boolean that_present_publisherId = true && that.isSetPublisherId();
    if (this_present_publisherId || that_present_publisherId) {
      if (!(this_present_publisherId && that_present_publisherId))
        return false;
      if (!this.publisherId.equals(that.publisherId))
        return false;
    }

    boolean this_present_tags = true && this.isSetTags();
    boolean that_present_tags = true && that.isSetTags();
    if (this_present_tags || that_present_tags) {
      if (!(this_present_tags && that_present_tags))
        return false;
      if (!this.tags.equals(that.tags))
        return false;
    }

    boolean this_present_updateTime = true && this.isSetUpdateTime();
    boolean that_present_updateTime = true && that.isSetUpdateTime();
    if (this_present_updateTime || that_present_updateTime) {
      if (!(this_present_updateTime && that_present_updateTime))
        return false;
      if (this.updateTime != that.updateTime)
        return false;
    }

    boolean this_present_onlineTime = true && this.isSetOnlineTime();
    boolean that_present_onlineTime = true && that.isSetOnlineTime();
    if (this_present_onlineTime || that_present_onlineTime) {
      if (!(this_present_onlineTime && that_present_onlineTime))
        return false;
      if (this.onlineTime != that.onlineTime)
        return false;
    }

    boolean this_present_languageList = true && this.isSetLanguageList();
    boolean that_present_languageList = true && that.isSetLanguageList();
    if (this_present_languageList || that_present_languageList) {
      if (!(this_present_languageList && that_present_languageList))
        return false;
      if (!this.languageList.equals(that.languageList))
        return false;
    }

    boolean this_present_countries = true && this.isSetCountries();
    boolean that_present_countries = true && that.isSetCountries();
    if (this_present_countries || that_present_countries) {
      if (!(this_present_countries && that_present_countries))
        return false;
      if (!this.countries.equals(that.countries))
        return false;
    }

    boolean this_present_distance = true && this.isSetDistance();
    boolean that_present_distance = true && that.isSetDistance();
    if (this_present_distance || that_present_distance) {
      if (!(this_present_distance && that_present_distance))
        return false;
      if (this.distance != that.distance)
        return false;
    }

    boolean this_present_smallFlowName = true && this.isSetSmallFlowName();
    boolean that_present_smallFlowName = true && that.isSetSmallFlowName();
    if (this_present_smallFlowName || that_present_smallFlowName) {
      if (!(this_present_smallFlowName && that_present_smallFlowName))
        return false;
      if (!this.smallFlowName.equals(that.smallFlowName))
        return false;
    }

    boolean this_present_userCode = true && this.isSetUserCode();
    boolean that_present_userCode = true && that.isSetUserCode();
    if (this_present_userCode || that_present_userCode) {
      if (!(this_present_userCode && that_present_userCode))
        return false;
      if (this.userCode != that.userCode)
        return false;
    }

    boolean this_present_recallName = true && this.isSetRecallName();
    boolean that_present_recallName = true && that.isSetRecallName();
    if (this_present_recallName || that_present_recallName) {
      if (!(this_present_recallName && that_present_recallName))
        return false;
      if (!this.recallName.equals(that.recallName))
        return false;
    }

    boolean this_present_recallScore = true && this.isSetRecallScore();
    boolean that_present_recallScore = true && that.isSetRecallScore();
    if (this_present_recallScore || that_present_recallScore) {
      if (!(this_present_recallScore && that_present_recallScore))
        return false;
      if (this.recallScore != that.recallScore)
        return false;
    }

    boolean this_present_order = true && this.isSetOrder();
    boolean that_present_order = true && that.isSetOrder();
    if (this_present_order || that_present_order) {
      if (!(this_present_order && that_present_order))
        return false;
      if (this.order != that.order)
        return false;
    }

    boolean this_present_heatScore = true && this.isSetHeatScore();
    boolean that_present_heatScore = true && that.isSetHeatScore();
    if (this_present_heatScore || that_present_heatScore) {
      if (!(this_present_heatScore && that_present_heatScore))
        return false;
      if (this.heatScore != that.heatScore)
        return false;
    }

    boolean this_present_isTophot = true && this.isSetIsTophot();
    boolean that_present_isTophot = true && that.isSetIsTophot();
    if (this_present_isTophot || that_present_isTophot) {
      if (!(this_present_isTophot && that_present_isTophot))
        return false;
      if (this.isTophot != that.isTophot)
        return false;
    }

    boolean this_present_heatScore2 = true && this.isSetHeatScore2();
    boolean that_present_heatScore2 = true && that.isSetHeatScore2();
    if (this_present_heatScore2 || that_present_heatScore2) {
      if (!(this_present_heatScore2 && that_present_heatScore2))
        return false;
      if (this.heatScore2 != that.heatScore2)
        return false;
    }

    boolean this_present_isFromInfiniteHashtag = true && this.isSetIsFromInfiniteHashtag();
    boolean that_present_isFromInfiniteHashtag = true && that.isSetIsFromInfiniteHashtag();
    if (this_present_isFromInfiniteHashtag || that_present_isFromInfiniteHashtag) {
      if (!(this_present_isFromInfiniteHashtag && that_present_isFromInfiniteHashtag))
        return false;
      if (this.isFromInfiniteHashtag != that.isFromInfiniteHashtag)
        return false;
    }

    boolean this_present_multipleScore = true && this.isSetMultipleScore();
    boolean that_present_multipleScore = true && that.isSetMultipleScore();
    if (this_present_multipleScore || that_present_multipleScore) {
      if (!(this_present_multipleScore && that_present_multipleScore))
        return false;
      if (this.multipleScore != that.multipleScore)
        return false;
    }

    boolean this_present_hashtagHeat = true && this.isSetHashtagHeat();
    boolean that_present_hashtagHeat = true && that.isSetHashtagHeat();
    if (this_present_hashtagHeat || that_present_hashtagHeat) {
      if (!(this_present_hashtagHeat && that_present_hashtagHeat))
        return false;
      if (this.hashtagHeat != that.hashtagHeat)
        return false;
    }

    boolean this_present_isBigV = true && this.isSetIsBigV();
    boolean that_present_isBigV = true && that.isSetIsBigV();
    if (this_present_isBigV || that_present_isBigV) {
      if (!(this_present_isBigV && that_present_isBigV))
        return false;
      if (this.isBigV != that.isBigV)
        return false;
    }

    boolean this_present_onlineTimeNeed = true && this.isSetOnlineTimeNeed();
    boolean that_present_onlineTimeNeed = true && that.isSetOnlineTimeNeed();
    if (this_present_onlineTimeNeed || that_present_onlineTimeNeed) {
      if (!(this_present_onlineTimeNeed && that_present_onlineTimeNeed))
        return false;
      if (this.onlineTimeNeed != that.onlineTimeNeed)
        return false;
    }

    boolean this_present_isUgc = true && this.isSetIsUgc();
    boolean that_present_isUgc = true && that.isSetIsUgc();
    if (this_present_isUgc || that_present_isUgc) {
      if (!(this_present_isUgc && that_present_isUgc))
        return false;
      if (this.isUgc != that.isUgc)
        return false;
    }

    boolean this_present_poolLevel = true && this.isSetPoolLevel();
    boolean that_present_poolLevel = true && that.isSetPoolLevel();
    if (this_present_poolLevel || that_present_poolLevel) {
      if (!(this_present_poolLevel && that_present_poolLevel))
        return false;
      if (!this.poolLevel.equals(that.poolLevel))
        return false;
    }

    boolean this_present_finishRetentionSum10s30d = true && this.isSetFinishRetentionSum10s30d();
    boolean that_present_finishRetentionSum10s30d = true && that.isSetFinishRetentionSum10s30d();
    if (this_present_finishRetentionSum10s30d || that_present_finishRetentionSum10s30d) {
      if (!(this_present_finishRetentionSum10s30d && that_present_finishRetentionSum10s30d))
        return false;
      if (this.finishRetentionSum10s30d != that.finishRetentionSum10s30d)
        return false;
    }

    boolean this_present_poolPriority = true && this.isSetPoolPriority();
    boolean that_present_poolPriority = true && that.isSetPoolPriority();
    if (this_present_poolPriority || that_present_poolPriority) {
      if (!(this_present_poolPriority && that_present_poolPriority))
        return false;
      if (this.poolPriority != that.poolPriority)
        return false;
    }

    boolean this_present_sessionExitRate7d = true && this.isSetSessionExitRate7d();
    boolean that_present_sessionExitRate7d = true && that.isSetSessionExitRate7d();
    if (this_present_sessionExitRate7d || that_present_sessionExitRate7d) {
      if (!(this_present_sessionExitRate7d && that_present_sessionExitRate7d))
        return false;
      if (!this.sessionExitRate7d.equals(that.sessionExitRate7d))
        return false;
    }

    boolean this_present_score_30d = true && this.isSetScore_30d();
    boolean that_present_score_30d = true && that.isSetScore_30d();
    if (this_present_score_30d || that_present_score_30d) {
      if (!(this_present_score_30d && that_present_score_30d))
        return false;
      if (this.score_30d != that.score_30d)
        return false;
    }

    boolean this_present_nextToken = true && this.isSetNextToken();
    boolean that_present_nextToken = true && that.isSetNextToken();
    if (this_present_nextToken || that_present_nextToken) {
      if (!(this_present_nextToken && that_present_nextToken))
        return false;
      if (!this.nextToken.equals(that.nextToken))
        return false;
    }

    boolean this_present_recallResultID = true && this.isSetRecallResultID();
    boolean that_present_recallResultID = true && that.isSetRecallResultID();
    if (this_present_recallResultID || that_present_recallResultID) {
      if (!(this_present_recallResultID && that_present_recallResultID))
        return false;
      if (!this.recallResultID.equals(that.recallResultID))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetAppName()) ? 131071 : 524287);
    if (isSetAppName())
      hashCode = hashCode * 8191 + appName.hashCode();

    hashCode = hashCode * 8191 + ((isSetScore()) ? 131071 : 524287);
    if (isSetScore())
      hashCode = hashCode * 8191 + score.hashCode();

    hashCode = hashCode * 8191 + ((isSetVideoSource()) ? 131071 : 524287);
    if (isSetVideoSource())
      hashCode = hashCode * 8191 + videoSource.hashCode();

    hashCode = hashCode * 8191 + ((isSetPublisherId()) ? 131071 : 524287);
    if (isSetPublisherId())
      hashCode = hashCode * 8191 + publisherId.hashCode();

    hashCode = hashCode * 8191 + ((isSetTags()) ? 131071 : 524287);
    if (isSetTags())
      hashCode = hashCode * 8191 + tags.hashCode();

    hashCode = hashCode * 8191 + ((isSetUpdateTime()) ? 131071 : 524287);
    if (isSetUpdateTime())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(updateTime);

    hashCode = hashCode * 8191 + ((isSetOnlineTime()) ? 131071 : 524287);
    if (isSetOnlineTime())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(onlineTime);

    hashCode = hashCode * 8191 + ((isSetLanguageList()) ? 131071 : 524287);
    if (isSetLanguageList())
      hashCode = hashCode * 8191 + languageList.hashCode();

    hashCode = hashCode * 8191 + ((isSetCountries()) ? 131071 : 524287);
    if (isSetCountries())
      hashCode = hashCode * 8191 + countries.hashCode();

    hashCode = hashCode * 8191 + ((isSetDistance()) ? 131071 : 524287);
    if (isSetDistance())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(distance);

    hashCode = hashCode * 8191 + ((isSetSmallFlowName()) ? 131071 : 524287);
    if (isSetSmallFlowName())
      hashCode = hashCode * 8191 + smallFlowName.hashCode();

    hashCode = hashCode * 8191 + ((isSetUserCode()) ? 131071 : 524287);
    if (isSetUserCode())
      hashCode = hashCode * 8191 + userCode;

    hashCode = hashCode * 8191 + ((isSetRecallName()) ? 131071 : 524287);
    if (isSetRecallName())
      hashCode = hashCode * 8191 + recallName.hashCode();

    hashCode = hashCode * 8191 + ((isSetRecallScore()) ? 131071 : 524287);
    if (isSetRecallScore())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(recallScore);

    hashCode = hashCode * 8191 + ((isSetOrder()) ? 131071 : 524287);
    if (isSetOrder())
      hashCode = hashCode * 8191 + order;

    hashCode = hashCode * 8191 + ((isSetHeatScore()) ? 131071 : 524287);
    if (isSetHeatScore())
      hashCode = hashCode * 8191 + heatScore;

    hashCode = hashCode * 8191 + ((isSetIsTophot()) ? 131071 : 524287);
    if (isSetIsTophot())
      hashCode = hashCode * 8191 + isTophot;

    hashCode = hashCode * 8191 + ((isSetHeatScore2()) ? 131071 : 524287);
    if (isSetHeatScore2())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(heatScore2);

    hashCode = hashCode * 8191 + ((isSetIsFromInfiniteHashtag()) ? 131071 : 524287);
    if (isSetIsFromInfiniteHashtag())
      hashCode = hashCode * 8191 + ((isFromInfiniteHashtag) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetMultipleScore()) ? 131071 : 524287);
    if (isSetMultipleScore())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(multipleScore);

    hashCode = hashCode * 8191 + ((isSetHashtagHeat()) ? 131071 : 524287);
    if (isSetHashtagHeat())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(hashtagHeat);

    hashCode = hashCode * 8191 + ((isSetIsBigV()) ? 131071 : 524287);
    if (isSetIsBigV())
      hashCode = hashCode * 8191 + ((isBigV) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetOnlineTimeNeed()) ? 131071 : 524287);
    if (isSetOnlineTimeNeed())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(onlineTimeNeed);

    hashCode = hashCode * 8191 + ((isSetIsUgc()) ? 131071 : 524287);
    if (isSetIsUgc())
      hashCode = hashCode * 8191 + ((isUgc) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetPoolLevel()) ? 131071 : 524287);
    if (isSetPoolLevel())
      hashCode = hashCode * 8191 + poolLevel.hashCode();

    hashCode = hashCode * 8191 + ((isSetFinishRetentionSum10s30d()) ? 131071 : 524287);
    if (isSetFinishRetentionSum10s30d())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(finishRetentionSum10s30d);

    hashCode = hashCode * 8191 + ((isSetPoolPriority()) ? 131071 : 524287);
    if (isSetPoolPriority())
      hashCode = hashCode * 8191 + poolPriority;

    hashCode = hashCode * 8191 + ((isSetSessionExitRate7d()) ? 131071 : 524287);
    if (isSetSessionExitRate7d())
      hashCode = hashCode * 8191 + sessionExitRate7d.hashCode();

    hashCode = hashCode * 8191 + ((isSetScore_30d()) ? 131071 : 524287);
    if (isSetScore_30d())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(score_30d);

    hashCode = hashCode * 8191 + ((isSetNextToken()) ? 131071 : 524287);
    if (isSetNextToken())
      hashCode = hashCode * 8191 + nextToken.hashCode();

    hashCode = hashCode * 8191 + ((isSetRecallResultID()) ? 131071 : 524287);
    if (isSetRecallResultID())
      hashCode = hashCode * 8191 + recallResultID.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(InternalUse other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetAppName()).compareTo(other.isSetAppName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAppName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appName, other.appName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetScore()).compareTo(other.isSetScore());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetScore()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.score, other.score);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVideoSource()).compareTo(other.isSetVideoSource());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVideoSource()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.videoSource, other.videoSource);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPublisherId()).compareTo(other.isSetPublisherId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPublisherId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.publisherId, other.publisherId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTags()).compareTo(other.isSetTags());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTags()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tags, other.tags);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateTime()).compareTo(other.isSetUpdateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateTime, other.updateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOnlineTime()).compareTo(other.isSetOnlineTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOnlineTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.onlineTime, other.onlineTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLanguageList()).compareTo(other.isSetLanguageList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLanguageList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.languageList, other.languageList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCountries()).compareTo(other.isSetCountries());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCountries()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.countries, other.countries);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDistance()).compareTo(other.isSetDistance());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDistance()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.distance, other.distance);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSmallFlowName()).compareTo(other.isSetSmallFlowName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSmallFlowName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.smallFlowName, other.smallFlowName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserCode()).compareTo(other.isSetUserCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userCode, other.userCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecallName()).compareTo(other.isSetRecallName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecallName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recallName, other.recallName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecallScore()).compareTo(other.isSetRecallScore());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecallScore()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recallScore, other.recallScore);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrder()).compareTo(other.isSetOrder());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrder()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.order, other.order);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHeatScore()).compareTo(other.isSetHeatScore());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHeatScore()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.heatScore, other.heatScore);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsTophot()).compareTo(other.isSetIsTophot());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsTophot()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isTophot, other.isTophot);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHeatScore2()).compareTo(other.isSetHeatScore2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHeatScore2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.heatScore2, other.heatScore2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsFromInfiniteHashtag()).compareTo(other.isSetIsFromInfiniteHashtag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsFromInfiniteHashtag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isFromInfiniteHashtag, other.isFromInfiniteHashtag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMultipleScore()).compareTo(other.isSetMultipleScore());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMultipleScore()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.multipleScore, other.multipleScore);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHashtagHeat()).compareTo(other.isSetHashtagHeat());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHashtagHeat()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hashtagHeat, other.hashtagHeat);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsBigV()).compareTo(other.isSetIsBigV());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsBigV()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isBigV, other.isBigV);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOnlineTimeNeed()).compareTo(other.isSetOnlineTimeNeed());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOnlineTimeNeed()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.onlineTimeNeed, other.onlineTimeNeed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsUgc()).compareTo(other.isSetIsUgc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsUgc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isUgc, other.isUgc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPoolLevel()).compareTo(other.isSetPoolLevel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPoolLevel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.poolLevel, other.poolLevel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFinishRetentionSum10s30d()).compareTo(other.isSetFinishRetentionSum10s30d());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFinishRetentionSum10s30d()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.finishRetentionSum10s30d, other.finishRetentionSum10s30d);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPoolPriority()).compareTo(other.isSetPoolPriority());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPoolPriority()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.poolPriority, other.poolPriority);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSessionExitRate7d()).compareTo(other.isSetSessionExitRate7d());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSessionExitRate7d()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sessionExitRate7d, other.sessionExitRate7d);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetScore_30d()).compareTo(other.isSetScore_30d());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetScore_30d()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.score_30d, other.score_30d);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNextToken()).compareTo(other.isSetNextToken());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNextToken()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nextToken, other.nextToken);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecallResultID()).compareTo(other.isSetRecallResultID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecallResultID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recallResultID, other.recallResultID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("InternalUse(");
    boolean first = true;

    if (isSetAppName()) {
      sb.append("appName:");
      if (this.appName == null) {
        sb.append("null");
      } else {
        sb.append(this.appName);
      }
      first = false;
    }
    if (isSetScore()) {
      if (!first) sb.append(", ");
      sb.append("score:");
      if (this.score == null) {
        sb.append("null");
      } else {
        sb.append(this.score);
      }
      first = false;
    }
    if (isSetVideoSource()) {
      if (!first) sb.append(", ");
      sb.append("videoSource:");
      if (this.videoSource == null) {
        sb.append("null");
      } else {
        sb.append(this.videoSource);
      }
      first = false;
    }
    if (isSetPublisherId()) {
      if (!first) sb.append(", ");
      sb.append("publisherId:");
      if (this.publisherId == null) {
        sb.append("null");
      } else {
        sb.append(this.publisherId);
      }
      first = false;
    }
    if (isSetTags()) {
      if (!first) sb.append(", ");
      sb.append("tags:");
      if (this.tags == null) {
        sb.append("null");
      } else {
        sb.append(this.tags);
      }
      first = false;
    }
    if (isSetUpdateTime()) {
      if (!first) sb.append(", ");
      sb.append("updateTime:");
      sb.append(this.updateTime);
      first = false;
    }
    if (isSetOnlineTime()) {
      if (!first) sb.append(", ");
      sb.append("onlineTime:");
      sb.append(this.onlineTime);
      first = false;
    }
    if (isSetLanguageList()) {
      if (!first) sb.append(", ");
      sb.append("languageList:");
      if (this.languageList == null) {
        sb.append("null");
      } else {
        sb.append(this.languageList);
      }
      first = false;
    }
    if (isSetCountries()) {
      if (!first) sb.append(", ");
      sb.append("countries:");
      if (this.countries == null) {
        sb.append("null");
      } else {
        sb.append(this.countries);
      }
      first = false;
    }
    if (isSetDistance()) {
      if (!first) sb.append(", ");
      sb.append("distance:");
      sb.append(this.distance);
      first = false;
    }
    if (isSetSmallFlowName()) {
      if (!first) sb.append(", ");
      sb.append("smallFlowName:");
      if (this.smallFlowName == null) {
        sb.append("null");
      } else {
        sb.append(this.smallFlowName);
      }
      first = false;
    }
    if (isSetUserCode()) {
      if (!first) sb.append(", ");
      sb.append("userCode:");
      sb.append(this.userCode);
      first = false;
    }
    if (isSetRecallName()) {
      if (!first) sb.append(", ");
      sb.append("recallName:");
      if (this.recallName == null) {
        sb.append("null");
      } else {
        sb.append(this.recallName);
      }
      first = false;
    }
    if (isSetRecallScore()) {
      if (!first) sb.append(", ");
      sb.append("recallScore:");
      sb.append(this.recallScore);
      first = false;
    }
    if (isSetOrder()) {
      if (!first) sb.append(", ");
      sb.append("order:");
      sb.append(this.order);
      first = false;
    }
    if (isSetHeatScore()) {
      if (!first) sb.append(", ");
      sb.append("heatScore:");
      sb.append(this.heatScore);
      first = false;
    }
    if (isSetIsTophot()) {
      if (!first) sb.append(", ");
      sb.append("isTophot:");
      sb.append(this.isTophot);
      first = false;
    }
    if (isSetHeatScore2()) {
      if (!first) sb.append(", ");
      sb.append("heatScore2:");
      sb.append(this.heatScore2);
      first = false;
    }
    if (isSetIsFromInfiniteHashtag()) {
      if (!first) sb.append(", ");
      sb.append("isFromInfiniteHashtag:");
      sb.append(this.isFromInfiniteHashtag);
      first = false;
    }
    if (isSetMultipleScore()) {
      if (!first) sb.append(", ");
      sb.append("multipleScore:");
      sb.append(this.multipleScore);
      first = false;
    }
    if (isSetHashtagHeat()) {
      if (!first) sb.append(", ");
      sb.append("hashtagHeat:");
      sb.append(this.hashtagHeat);
      first = false;
    }
    if (isSetIsBigV()) {
      if (!first) sb.append(", ");
      sb.append("isBigV:");
      sb.append(this.isBigV);
      first = false;
    }
    if (isSetOnlineTimeNeed()) {
      if (!first) sb.append(", ");
      sb.append("onlineTimeNeed:");
      sb.append(this.onlineTimeNeed);
      first = false;
    }
    if (isSetIsUgc()) {
      if (!first) sb.append(", ");
      sb.append("isUgc:");
      sb.append(this.isUgc);
      first = false;
    }
    if (isSetPoolLevel()) {
      if (!first) sb.append(", ");
      sb.append("poolLevel:");
      if (this.poolLevel == null) {
        sb.append("null");
      } else {
        sb.append(this.poolLevel);
      }
      first = false;
    }
    if (isSetFinishRetentionSum10s30d()) {
      if (!first) sb.append(", ");
      sb.append("finishRetentionSum10s30d:");
      sb.append(this.finishRetentionSum10s30d);
      first = false;
    }
    if (isSetPoolPriority()) {
      if (!first) sb.append(", ");
      sb.append("poolPriority:");
      sb.append(this.poolPriority);
      first = false;
    }
    if (isSetSessionExitRate7d()) {
      if (!first) sb.append(", ");
      sb.append("sessionExitRate7d:");
      if (this.sessionExitRate7d == null) {
        sb.append("null");
      } else {
        sb.append(this.sessionExitRate7d);
      }
      first = false;
    }
    if (isSetScore_30d()) {
      if (!first) sb.append(", ");
      sb.append("score_30d:");
      sb.append(this.score_30d);
      first = false;
    }
    if (isSetNextToken()) {
      if (!first) sb.append(", ");
      sb.append("nextToken:");
      if (this.nextToken == null) {
        sb.append("null");
      } else {
        sb.append(this.nextToken);
      }
      first = false;
    }
    if (isSetRecallResultID()) {
      if (!first) sb.append(", ");
      sb.append("recallResultID:");
      if (this.recallResultID == null) {
        sb.append("null");
      } else {
        sb.append(this.recallResultID);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class InternalUseStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public InternalUseStandardScheme getScheme() {
      return new InternalUseStandardScheme();
    }
  }

  private static class InternalUseStandardScheme extends org.apache.thrift.scheme.StandardScheme<InternalUse> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, InternalUse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // APP_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.appName = iprot.readString();
              struct.setAppNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SCORE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.score = iprot.readString();
              struct.setScoreIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // VIDEO_SOURCE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.videoSource = iprot.readString();
              struct.setVideoSourceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PUBLISHER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.publisherId = iprot.readString();
              struct.setPublisherIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TAGS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.tags = new java.util.ArrayList<String>(_list0.size);
                String _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = iprot.readString();
                  struct.tags.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setTagsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // UPDATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.updateTime = iprot.readI64();
              struct.setUpdateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // ONLINE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.onlineTime = iprot.readI64();
              struct.setOnlineTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // LANGUAGE_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.languageList = new java.util.ArrayList<String>(_list3.size);
                String _elem4;
                for (int _i5 = 0; _i5 < _list3.size; ++_i5)
                {
                  _elem4 = iprot.readString();
                  struct.languageList.add(_elem4);
                }
                iprot.readListEnd();
              }
              struct.setLanguageListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // COUNTRIES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list6 = iprot.readListBegin();
                struct.countries = new java.util.ArrayList<String>(_list6.size);
                String _elem7;
                for (int _i8 = 0; _i8 < _list6.size; ++_i8)
                {
                  _elem7 = iprot.readString();
                  struct.countries.add(_elem7);
                }
                iprot.readListEnd();
              }
              struct.setCountriesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // DISTANCE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.distance = iprot.readDouble();
              struct.setDistanceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // SMALL_FLOW_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.smallFlowName = iprot.readString();
              struct.setSmallFlowNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // USER_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.userCode = iprot.readI32();
              struct.setUserCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // RECALL_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.recallName = iprot.readString();
              struct.setRecallNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // RECALL_SCORE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.recallScore = iprot.readDouble();
              struct.setRecallScoreIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // ORDER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.order = iprot.readI32();
              struct.setOrderIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // HEAT_SCORE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.heatScore = iprot.readI32();
              struct.setHeatScoreIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // IS_TOPHOT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.isTophot = iprot.readI32();
              struct.setIsTophotIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // HEAT_SCORE2
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.heatScore2 = iprot.readDouble();
              struct.setHeatScore2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // IS_FROM_INFINITE_HASHTAG
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isFromInfiniteHashtag = iprot.readBool();
              struct.setIsFromInfiniteHashtagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // MULTIPLE_SCORE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.multipleScore = iprot.readDouble();
              struct.setMultipleScoreIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // HASHTAG_HEAT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.hashtagHeat = iprot.readDouble();
              struct.setHashtagHeatIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // IS_BIG_V
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isBigV = iprot.readBool();
              struct.setIsBigVIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // ONLINE_TIME_NEED
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.onlineTimeNeed = iprot.readI64();
              struct.setOnlineTimeNeedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // IS_UGC
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isUgc = iprot.readBool();
              struct.setIsUgcIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // POOL_LEVEL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.poolLevel = iprot.readString();
              struct.setPoolLevelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // FINISH_RETENTION_SUM10S30D
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.finishRetentionSum10s30d = iprot.readDouble();
              struct.setFinishRetentionSum10s30dIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // POOL_PRIORITY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.poolPriority = iprot.readI32();
              struct.setPoolPriorityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // SESSION_EXIT_RATE7D
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sessionExitRate7d = iprot.readString();
              struct.setSessionExitRate7dIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 29: // SCORE_30D
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.score_30d = iprot.readDouble();
              struct.setScore_30dIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // NEXT_TOKEN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.nextToken = iprot.readString();
              struct.setNextTokenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 31: // RECALL_RESULT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.recallResultID = iprot.readString();
              struct.setRecallResultIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, InternalUse struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.appName != null) {
        if (struct.isSetAppName()) {
          oprot.writeFieldBegin(APP_NAME_FIELD_DESC);
          oprot.writeString(struct.appName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.score != null) {
        if (struct.isSetScore()) {
          oprot.writeFieldBegin(SCORE_FIELD_DESC);
          oprot.writeString(struct.score);
          oprot.writeFieldEnd();
        }
      }
      if (struct.videoSource != null) {
        if (struct.isSetVideoSource()) {
          oprot.writeFieldBegin(VIDEO_SOURCE_FIELD_DESC);
          oprot.writeString(struct.videoSource);
          oprot.writeFieldEnd();
        }
      }
      if (struct.publisherId != null) {
        if (struct.isSetPublisherId()) {
          oprot.writeFieldBegin(PUBLISHER_ID_FIELD_DESC);
          oprot.writeString(struct.publisherId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.tags != null) {
        if (struct.isSetTags()) {
          oprot.writeFieldBegin(TAGS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.tags.size()));
            for (String _iter9 : struct.tags)
            {
              oprot.writeString(_iter9);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetUpdateTime()) {
        oprot.writeFieldBegin(UPDATE_TIME_FIELD_DESC);
        oprot.writeI64(struct.updateTime);
        oprot.writeFieldEnd();
      }
      if (struct.isSetOnlineTime()) {
        oprot.writeFieldBegin(ONLINE_TIME_FIELD_DESC);
        oprot.writeI64(struct.onlineTime);
        oprot.writeFieldEnd();
      }
      if (struct.languageList != null) {
        if (struct.isSetLanguageList()) {
          oprot.writeFieldBegin(LANGUAGE_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.languageList.size()));
            for (String _iter10 : struct.languageList)
            {
              oprot.writeString(_iter10);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.countries != null) {
        if (struct.isSetCountries()) {
          oprot.writeFieldBegin(COUNTRIES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.countries.size()));
            for (String _iter11 : struct.countries)
            {
              oprot.writeString(_iter11);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetDistance()) {
        oprot.writeFieldBegin(DISTANCE_FIELD_DESC);
        oprot.writeDouble(struct.distance);
        oprot.writeFieldEnd();
      }
      if (struct.smallFlowName != null) {
        if (struct.isSetSmallFlowName()) {
          oprot.writeFieldBegin(SMALL_FLOW_NAME_FIELD_DESC);
          oprot.writeString(struct.smallFlowName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetUserCode()) {
        oprot.writeFieldBegin(USER_CODE_FIELD_DESC);
        oprot.writeI32(struct.userCode);
        oprot.writeFieldEnd();
      }
      if (struct.recallName != null) {
        if (struct.isSetRecallName()) {
          oprot.writeFieldBegin(RECALL_NAME_FIELD_DESC);
          oprot.writeString(struct.recallName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetRecallScore()) {
        oprot.writeFieldBegin(RECALL_SCORE_FIELD_DESC);
        oprot.writeDouble(struct.recallScore);
        oprot.writeFieldEnd();
      }
      if (struct.isSetOrder()) {
        oprot.writeFieldBegin(ORDER_FIELD_DESC);
        oprot.writeI32(struct.order);
        oprot.writeFieldEnd();
      }
      if (struct.isSetHeatScore()) {
        oprot.writeFieldBegin(HEAT_SCORE_FIELD_DESC);
        oprot.writeI32(struct.heatScore);
        oprot.writeFieldEnd();
      }
      if (struct.isSetIsTophot()) {
        oprot.writeFieldBegin(IS_TOPHOT_FIELD_DESC);
        oprot.writeI32(struct.isTophot);
        oprot.writeFieldEnd();
      }
      if (struct.isSetHeatScore2()) {
        oprot.writeFieldBegin(HEAT_SCORE2_FIELD_DESC);
        oprot.writeDouble(struct.heatScore2);
        oprot.writeFieldEnd();
      }
      if (struct.isSetIsFromInfiniteHashtag()) {
        oprot.writeFieldBegin(IS_FROM_INFINITE_HASHTAG_FIELD_DESC);
        oprot.writeBool(struct.isFromInfiniteHashtag);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMultipleScore()) {
        oprot.writeFieldBegin(MULTIPLE_SCORE_FIELD_DESC);
        oprot.writeDouble(struct.multipleScore);
        oprot.writeFieldEnd();
      }
      if (struct.isSetHashtagHeat()) {
        oprot.writeFieldBegin(HASHTAG_HEAT_FIELD_DESC);
        oprot.writeDouble(struct.hashtagHeat);
        oprot.writeFieldEnd();
      }
      if (struct.isSetIsBigV()) {
        oprot.writeFieldBegin(IS_BIG_V_FIELD_DESC);
        oprot.writeBool(struct.isBigV);
        oprot.writeFieldEnd();
      }
      if (struct.isSetOnlineTimeNeed()) {
        oprot.writeFieldBegin(ONLINE_TIME_NEED_FIELD_DESC);
        oprot.writeI64(struct.onlineTimeNeed);
        oprot.writeFieldEnd();
      }
      if (struct.isSetIsUgc()) {
        oprot.writeFieldBegin(IS_UGC_FIELD_DESC);
        oprot.writeBool(struct.isUgc);
        oprot.writeFieldEnd();
      }
      if (struct.poolLevel != null) {
        if (struct.isSetPoolLevel()) {
          oprot.writeFieldBegin(POOL_LEVEL_FIELD_DESC);
          oprot.writeString(struct.poolLevel);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetFinishRetentionSum10s30d()) {
        oprot.writeFieldBegin(FINISH_RETENTION_SUM10S30D_FIELD_DESC);
        oprot.writeDouble(struct.finishRetentionSum10s30d);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPoolPriority()) {
        oprot.writeFieldBegin(POOL_PRIORITY_FIELD_DESC);
        oprot.writeI32(struct.poolPriority);
        oprot.writeFieldEnd();
      }
      if (struct.sessionExitRate7d != null) {
        if (struct.isSetSessionExitRate7d()) {
          oprot.writeFieldBegin(SESSION_EXIT_RATE7D_FIELD_DESC);
          oprot.writeString(struct.sessionExitRate7d);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetScore_30d()) {
        oprot.writeFieldBegin(SCORE_30D_FIELD_DESC);
        oprot.writeDouble(struct.score_30d);
        oprot.writeFieldEnd();
      }
      if (struct.nextToken != null) {
        if (struct.isSetNextToken()) {
          oprot.writeFieldBegin(NEXT_TOKEN_FIELD_DESC);
          oprot.writeString(struct.nextToken);
          oprot.writeFieldEnd();
        }
      }
      if (struct.recallResultID != null) {
        if (struct.isSetRecallResultID()) {
          oprot.writeFieldBegin(RECALL_RESULT_ID_FIELD_DESC);
          oprot.writeString(struct.recallResultID);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class InternalUseTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public InternalUseTupleScheme getScheme() {
      return new InternalUseTupleScheme();
    }
  }

  private static class InternalUseTupleScheme extends org.apache.thrift.scheme.TupleScheme<InternalUse> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, InternalUse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetAppName()) {
        optionals.set(0);
      }
      if (struct.isSetScore()) {
        optionals.set(1);
      }
      if (struct.isSetVideoSource()) {
        optionals.set(2);
      }
      if (struct.isSetPublisherId()) {
        optionals.set(3);
      }
      if (struct.isSetTags()) {
        optionals.set(4);
      }
      if (struct.isSetUpdateTime()) {
        optionals.set(5);
      }
      if (struct.isSetOnlineTime()) {
        optionals.set(6);
      }
      if (struct.isSetLanguageList()) {
        optionals.set(7);
      }
      if (struct.isSetCountries()) {
        optionals.set(8);
      }
      if (struct.isSetDistance()) {
        optionals.set(9);
      }
      if (struct.isSetSmallFlowName()) {
        optionals.set(10);
      }
      if (struct.isSetUserCode()) {
        optionals.set(11);
      }
      if (struct.isSetRecallName()) {
        optionals.set(12);
      }
      if (struct.isSetRecallScore()) {
        optionals.set(13);
      }
      if (struct.isSetOrder()) {
        optionals.set(14);
      }
      if (struct.isSetHeatScore()) {
        optionals.set(15);
      }
      if (struct.isSetIsTophot()) {
        optionals.set(16);
      }
      if (struct.isSetHeatScore2()) {
        optionals.set(17);
      }
      if (struct.isSetIsFromInfiniteHashtag()) {
        optionals.set(18);
      }
      if (struct.isSetMultipleScore()) {
        optionals.set(19);
      }
      if (struct.isSetHashtagHeat()) {
        optionals.set(20);
      }
      if (struct.isSetIsBigV()) {
        optionals.set(21);
      }
      if (struct.isSetOnlineTimeNeed()) {
        optionals.set(22);
      }
      if (struct.isSetIsUgc()) {
        optionals.set(23);
      }
      if (struct.isSetPoolLevel()) {
        optionals.set(24);
      }
      if (struct.isSetFinishRetentionSum10s30d()) {
        optionals.set(25);
      }
      if (struct.isSetPoolPriority()) {
        optionals.set(26);
      }
      if (struct.isSetSessionExitRate7d()) {
        optionals.set(27);
      }
      if (struct.isSetScore_30d()) {
        optionals.set(28);
      }
      if (struct.isSetNextToken()) {
        optionals.set(29);
      }
      if (struct.isSetRecallResultID()) {
        optionals.set(30);
      }
      oprot.writeBitSet(optionals, 31);
      if (struct.isSetAppName()) {
        oprot.writeString(struct.appName);
      }
      if (struct.isSetScore()) {
        oprot.writeString(struct.score);
      }
      if (struct.isSetVideoSource()) {
        oprot.writeString(struct.videoSource);
      }
      if (struct.isSetPublisherId()) {
        oprot.writeString(struct.publisherId);
      }
      if (struct.isSetTags()) {
        {
          oprot.writeI32(struct.tags.size());
          for (String _iter12 : struct.tags)
          {
            oprot.writeString(_iter12);
          }
        }
      }
      if (struct.isSetUpdateTime()) {
        oprot.writeI64(struct.updateTime);
      }
      if (struct.isSetOnlineTime()) {
        oprot.writeI64(struct.onlineTime);
      }
      if (struct.isSetLanguageList()) {
        {
          oprot.writeI32(struct.languageList.size());
          for (String _iter13 : struct.languageList)
          {
            oprot.writeString(_iter13);
          }
        }
      }
      if (struct.isSetCountries()) {
        {
          oprot.writeI32(struct.countries.size());
          for (String _iter14 : struct.countries)
          {
            oprot.writeString(_iter14);
          }
        }
      }
      if (struct.isSetDistance()) {
        oprot.writeDouble(struct.distance);
      }
      if (struct.isSetSmallFlowName()) {
        oprot.writeString(struct.smallFlowName);
      }
      if (struct.isSetUserCode()) {
        oprot.writeI32(struct.userCode);
      }
      if (struct.isSetRecallName()) {
        oprot.writeString(struct.recallName);
      }
      if (struct.isSetRecallScore()) {
        oprot.writeDouble(struct.recallScore);
      }
      if (struct.isSetOrder()) {
        oprot.writeI32(struct.order);
      }
      if (struct.isSetHeatScore()) {
        oprot.writeI32(struct.heatScore);
      }
      if (struct.isSetIsTophot()) {
        oprot.writeI32(struct.isTophot);
      }
      if (struct.isSetHeatScore2()) {
        oprot.writeDouble(struct.heatScore2);
      }
      if (struct.isSetIsFromInfiniteHashtag()) {
        oprot.writeBool(struct.isFromInfiniteHashtag);
      }
      if (struct.isSetMultipleScore()) {
        oprot.writeDouble(struct.multipleScore);
      }
      if (struct.isSetHashtagHeat()) {
        oprot.writeDouble(struct.hashtagHeat);
      }
      if (struct.isSetIsBigV()) {
        oprot.writeBool(struct.isBigV);
      }
      if (struct.isSetOnlineTimeNeed()) {
        oprot.writeI64(struct.onlineTimeNeed);
      }
      if (struct.isSetIsUgc()) {
        oprot.writeBool(struct.isUgc);
      }
      if (struct.isSetPoolLevel()) {
        oprot.writeString(struct.poolLevel);
      }
      if (struct.isSetFinishRetentionSum10s30d()) {
        oprot.writeDouble(struct.finishRetentionSum10s30d);
      }
      if (struct.isSetPoolPriority()) {
        oprot.writeI32(struct.poolPriority);
      }
      if (struct.isSetSessionExitRate7d()) {
        oprot.writeString(struct.sessionExitRate7d);
      }
      if (struct.isSetScore_30d()) {
        oprot.writeDouble(struct.score_30d);
      }
      if (struct.isSetNextToken()) {
        oprot.writeString(struct.nextToken);
      }
      if (struct.isSetRecallResultID()) {
        oprot.writeString(struct.recallResultID);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, InternalUse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(31);
      if (incoming.get(0)) {
        struct.appName = iprot.readString();
        struct.setAppNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.score = iprot.readString();
        struct.setScoreIsSet(true);
      }
      if (incoming.get(2)) {
        struct.videoSource = iprot.readString();
        struct.setVideoSourceIsSet(true);
      }
      if (incoming.get(3)) {
        struct.publisherId = iprot.readString();
        struct.setPublisherIdIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list15 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.tags = new java.util.ArrayList<String>(_list15.size);
          String _elem16;
          for (int _i17 = 0; _i17 < _list15.size; ++_i17)
          {
            _elem16 = iprot.readString();
            struct.tags.add(_elem16);
          }
        }
        struct.setTagsIsSet(true);
      }
      if (incoming.get(5)) {
        struct.updateTime = iprot.readI64();
        struct.setUpdateTimeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.onlineTime = iprot.readI64();
        struct.setOnlineTimeIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TList _list18 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.languageList = new java.util.ArrayList<String>(_list18.size);
          String _elem19;
          for (int _i20 = 0; _i20 < _list18.size; ++_i20)
          {
            _elem19 = iprot.readString();
            struct.languageList.add(_elem19);
          }
        }
        struct.setLanguageListIsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.countries = new java.util.ArrayList<String>(_list21.size);
          String _elem22;
          for (int _i23 = 0; _i23 < _list21.size; ++_i23)
          {
            _elem22 = iprot.readString();
            struct.countries.add(_elem22);
          }
        }
        struct.setCountriesIsSet(true);
      }
      if (incoming.get(9)) {
        struct.distance = iprot.readDouble();
        struct.setDistanceIsSet(true);
      }
      if (incoming.get(10)) {
        struct.smallFlowName = iprot.readString();
        struct.setSmallFlowNameIsSet(true);
      }
      if (incoming.get(11)) {
        struct.userCode = iprot.readI32();
        struct.setUserCodeIsSet(true);
      }
      if (incoming.get(12)) {
        struct.recallName = iprot.readString();
        struct.setRecallNameIsSet(true);
      }
      if (incoming.get(13)) {
        struct.recallScore = iprot.readDouble();
        struct.setRecallScoreIsSet(true);
      }
      if (incoming.get(14)) {
        struct.order = iprot.readI32();
        struct.setOrderIsSet(true);
      }
      if (incoming.get(15)) {
        struct.heatScore = iprot.readI32();
        struct.setHeatScoreIsSet(true);
      }
      if (incoming.get(16)) {
        struct.isTophot = iprot.readI32();
        struct.setIsTophotIsSet(true);
      }
      if (incoming.get(17)) {
        struct.heatScore2 = iprot.readDouble();
        struct.setHeatScore2IsSet(true);
      }
      if (incoming.get(18)) {
        struct.isFromInfiniteHashtag = iprot.readBool();
        struct.setIsFromInfiniteHashtagIsSet(true);
      }
      if (incoming.get(19)) {
        struct.multipleScore = iprot.readDouble();
        struct.setMultipleScoreIsSet(true);
      }
      if (incoming.get(20)) {
        struct.hashtagHeat = iprot.readDouble();
        struct.setHashtagHeatIsSet(true);
      }
      if (incoming.get(21)) {
        struct.isBigV = iprot.readBool();
        struct.setIsBigVIsSet(true);
      }
      if (incoming.get(22)) {
        struct.onlineTimeNeed = iprot.readI64();
        struct.setOnlineTimeNeedIsSet(true);
      }
      if (incoming.get(23)) {
        struct.isUgc = iprot.readBool();
        struct.setIsUgcIsSet(true);
      }
      if (incoming.get(24)) {
        struct.poolLevel = iprot.readString();
        struct.setPoolLevelIsSet(true);
      }
      if (incoming.get(25)) {
        struct.finishRetentionSum10s30d = iprot.readDouble();
        struct.setFinishRetentionSum10s30dIsSet(true);
      }
      if (incoming.get(26)) {
        struct.poolPriority = iprot.readI32();
        struct.setPoolPriorityIsSet(true);
      }
      if (incoming.get(27)) {
        struct.sessionExitRate7d = iprot.readString();
        struct.setSessionExitRate7dIsSet(true);
      }
      if (incoming.get(28)) {
        struct.score_30d = iprot.readDouble();
        struct.setScore_30dIsSet(true);
      }
      if (incoming.get(29)) {
        struct.nextToken = iprot.readString();
        struct.setNextTokenIsSet(true);
      }
      if (incoming.get(30)) {
        struct.recallResultID = iprot.readString();
        struct.setRecallResultIDIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

