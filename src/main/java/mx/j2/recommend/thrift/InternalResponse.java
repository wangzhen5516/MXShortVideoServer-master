/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package mx.j2.recommend.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2021-06-02")
public class InternalResponse implements org.apache.thrift.TBase<InternalResponse, InternalResponse._Fields>, java.io.Serializable, Cloneable, Comparable<InternalResponse> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("InternalResponse");

  private static final org.apache.thrift.protocol.TField INTERNAL_RESULT_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("internalResultList", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField ERROR_MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("errorMessage", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PROCESSING_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("processingStatus", org.apache.thrift.protocol.TType.BOOL, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new InternalResponseStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new InternalResponseTupleSchemeFactory();

  public java.util.List<InternalResult> internalResultList; // required
  public java.lang.String errorMessage; // required
  public boolean processingStatus; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    INTERNAL_RESULT_LIST((short)1, "internalResultList"),
    ERROR_MESSAGE((short)2, "errorMessage"),
    PROCESSING_STATUS((short)3, "processingStatus");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // INTERNAL_RESULT_LIST
          return INTERNAL_RESULT_LIST;
        case 2: // ERROR_MESSAGE
          return ERROR_MESSAGE;
        case 3: // PROCESSING_STATUS
          return PROCESSING_STATUS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PROCESSINGSTATUS_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.PROCESSING_STATUS};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.INTERNAL_RESULT_LIST, new org.apache.thrift.meta_data.FieldMetaData("internalResultList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "InternalResult"))));
    tmpMap.put(_Fields.ERROR_MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("errorMessage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROCESSING_STATUS, new org.apache.thrift.meta_data.FieldMetaData("processingStatus", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(InternalResponse.class, metaDataMap);
  }

  public InternalResponse() {
  }

  public InternalResponse(
    java.util.List<InternalResult> internalResultList,
    java.lang.String errorMessage)
  {
    this();
    this.internalResultList = internalResultList;
    this.errorMessage = errorMessage;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public InternalResponse(InternalResponse other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetInternalResultList()) {
      java.util.List<InternalResult> __this__internalResultList = new java.util.ArrayList<InternalResult>(other.internalResultList.size());
      for (InternalResult other_element : other.internalResultList) {
        __this__internalResultList.add(new InternalResult(other_element));
      }
      this.internalResultList = __this__internalResultList;
    }
    if (other.isSetErrorMessage()) {
      this.errorMessage = other.errorMessage;
    }
    this.processingStatus = other.processingStatus;
  }

  public InternalResponse deepCopy() {
    return new InternalResponse(this);
  }

  @Override
  public void clear() {
    this.internalResultList = null;
    this.errorMessage = null;
    setProcessingStatusIsSet(false);
    this.processingStatus = false;
  }

  public int getInternalResultListSize() {
    return (this.internalResultList == null) ? 0 : this.internalResultList.size();
  }

  public java.util.Iterator<InternalResult> getInternalResultListIterator() {
    return (this.internalResultList == null) ? null : this.internalResultList.iterator();
  }

  public void addToInternalResultList(InternalResult elem) {
    if (this.internalResultList == null) {
      this.internalResultList = new java.util.ArrayList<InternalResult>();
    }
    this.internalResultList.add(elem);
  }

  public java.util.List<InternalResult> getInternalResultList() {
    return this.internalResultList;
  }

  public InternalResponse setInternalResultList(java.util.List<InternalResult> internalResultList) {
    this.internalResultList = internalResultList;
    return this;
  }

  public void unsetInternalResultList() {
    this.internalResultList = null;
  }

  /** Returns true if field internalResultList is set (has been assigned a value) and false otherwise */
  public boolean isSetInternalResultList() {
    return this.internalResultList != null;
  }

  public void setInternalResultListIsSet(boolean value) {
    if (!value) {
      this.internalResultList = null;
    }
  }

  public java.lang.String getErrorMessage() {
    return this.errorMessage;
  }

  public InternalResponse setErrorMessage(java.lang.String errorMessage) {
    this.errorMessage = errorMessage;
    return this;
  }

  public void unsetErrorMessage() {
    this.errorMessage = null;
  }

  /** Returns true if field errorMessage is set (has been assigned a value) and false otherwise */
  public boolean isSetErrorMessage() {
    return this.errorMessage != null;
  }

  public void setErrorMessageIsSet(boolean value) {
    if (!value) {
      this.errorMessage = null;
    }
  }

  public boolean isProcessingStatus() {
    return this.processingStatus;
  }

  public InternalResponse setProcessingStatus(boolean processingStatus) {
    this.processingStatus = processingStatus;
    setProcessingStatusIsSet(true);
    return this;
  }

  public void unsetProcessingStatus() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PROCESSINGSTATUS_ISSET_ID);
  }

  /** Returns true if field processingStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetProcessingStatus() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PROCESSINGSTATUS_ISSET_ID);
  }

  public void setProcessingStatusIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PROCESSINGSTATUS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case INTERNAL_RESULT_LIST:
      if (value == null) {
        unsetInternalResultList();
      } else {
        setInternalResultList((java.util.List<InternalResult>)value);
      }
      break;

    case ERROR_MESSAGE:
      if (value == null) {
        unsetErrorMessage();
      } else {
        setErrorMessage((java.lang.String)value);
      }
      break;

    case PROCESSING_STATUS:
      if (value == null) {
        unsetProcessingStatus();
      } else {
        setProcessingStatus((java.lang.Boolean)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case INTERNAL_RESULT_LIST:
      return getInternalResultList();

    case ERROR_MESSAGE:
      return getErrorMessage();

    case PROCESSING_STATUS:
      return isProcessingStatus();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case INTERNAL_RESULT_LIST:
      return isSetInternalResultList();
    case ERROR_MESSAGE:
      return isSetErrorMessage();
    case PROCESSING_STATUS:
      return isSetProcessingStatus();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof InternalResponse)
      return this.equals((InternalResponse)that);
    return false;
  }

  public boolean equals(InternalResponse that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_internalResultList = true && this.isSetInternalResultList();
    boolean that_present_internalResultList = true && that.isSetInternalResultList();
    if (this_present_internalResultList || that_present_internalResultList) {
      if (!(this_present_internalResultList && that_present_internalResultList))
        return false;
      if (!this.internalResultList.equals(that.internalResultList))
        return false;
    }

    boolean this_present_errorMessage = true && this.isSetErrorMessage();
    boolean that_present_errorMessage = true && that.isSetErrorMessage();
    if (this_present_errorMessage || that_present_errorMessage) {
      if (!(this_present_errorMessage && that_present_errorMessage))
        return false;
      if (!this.errorMessage.equals(that.errorMessage))
        return false;
    }

    boolean this_present_processingStatus = true && this.isSetProcessingStatus();
    boolean that_present_processingStatus = true && that.isSetProcessingStatus();
    if (this_present_processingStatus || that_present_processingStatus) {
      if (!(this_present_processingStatus && that_present_processingStatus))
        return false;
      if (this.processingStatus != that.processingStatus)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetInternalResultList()) ? 131071 : 524287);
    if (isSetInternalResultList())
      hashCode = hashCode * 8191 + internalResultList.hashCode();

    hashCode = hashCode * 8191 + ((isSetErrorMessage()) ? 131071 : 524287);
    if (isSetErrorMessage())
      hashCode = hashCode * 8191 + errorMessage.hashCode();

    hashCode = hashCode * 8191 + ((isSetProcessingStatus()) ? 131071 : 524287);
    if (isSetProcessingStatus())
      hashCode = hashCode * 8191 + ((processingStatus) ? 131071 : 524287);

    return hashCode;
  }

  @Override
  public int compareTo(InternalResponse other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetInternalResultList()).compareTo(other.isSetInternalResultList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInternalResultList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.internalResultList, other.internalResultList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetErrorMessage()).compareTo(other.isSetErrorMessage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetErrorMessage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.errorMessage, other.errorMessage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetProcessingStatus()).compareTo(other.isSetProcessingStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProcessingStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.processingStatus, other.processingStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("InternalResponse(");
    boolean first = true;

    sb.append("internalResultList:");
    if (this.internalResultList == null) {
      sb.append("null");
    } else {
      sb.append(this.internalResultList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("errorMessage:");
    if (this.errorMessage == null) {
      sb.append("null");
    } else {
      sb.append(this.errorMessage);
    }
    first = false;
    if (isSetProcessingStatus()) {
      if (!first) sb.append(", ");
      sb.append("processingStatus:");
      sb.append(this.processingStatus);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class InternalResponseStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public InternalResponseStandardScheme getScheme() {
      return new InternalResponseStandardScheme();
    }
  }

  private static class InternalResponseStandardScheme extends org.apache.thrift.scheme.StandardScheme<InternalResponse> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, InternalResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // INTERNAL_RESULT_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list160 = iprot.readListBegin();
                struct.internalResultList = new java.util.ArrayList<InternalResult>(_list160.size);
                InternalResult _elem161;
                for (int _i162 = 0; _i162 < _list160.size; ++_i162)
                {
                  _elem161 = new InternalResult();
                  _elem161.read(iprot);
                  struct.internalResultList.add(_elem161);
                }
                iprot.readListEnd();
              }
              struct.setInternalResultListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ERROR_MESSAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.errorMessage = iprot.readString();
              struct.setErrorMessageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PROCESSING_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.processingStatus = iprot.readBool();
              struct.setProcessingStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, InternalResponse struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.internalResultList != null) {
        oprot.writeFieldBegin(INTERNAL_RESULT_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.internalResultList.size()));
          for (InternalResult _iter163 : struct.internalResultList)
          {
            _iter163.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.errorMessage != null) {
        oprot.writeFieldBegin(ERROR_MESSAGE_FIELD_DESC);
        oprot.writeString(struct.errorMessage);
        oprot.writeFieldEnd();
      }
      if (struct.isSetProcessingStatus()) {
        oprot.writeFieldBegin(PROCESSING_STATUS_FIELD_DESC);
        oprot.writeBool(struct.processingStatus);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class InternalResponseTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public InternalResponseTupleScheme getScheme() {
      return new InternalResponseTupleScheme();
    }
  }

  private static class InternalResponseTupleScheme extends org.apache.thrift.scheme.TupleScheme<InternalResponse> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, InternalResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetInternalResultList()) {
        optionals.set(0);
      }
      if (struct.isSetErrorMessage()) {
        optionals.set(1);
      }
      if (struct.isSetProcessingStatus()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetInternalResultList()) {
        {
          oprot.writeI32(struct.internalResultList.size());
          for (InternalResult _iter164 : struct.internalResultList)
          {
            _iter164.write(oprot);
          }
        }
      }
      if (struct.isSetErrorMessage()) {
        oprot.writeString(struct.errorMessage);
      }
      if (struct.isSetProcessingStatus()) {
        oprot.writeBool(struct.processingStatus);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, InternalResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list165 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.internalResultList = new java.util.ArrayList<InternalResult>(_list165.size);
          InternalResult _elem166;
          for (int _i167 = 0; _i167 < _list165.size; ++_i167)
          {
            _elem166 = new InternalResult();
            _elem166.read(iprot);
            struct.internalResultList.add(_elem166);
          }
        }
        struct.setInternalResultListIsSet(true);
      }
      if (incoming.get(1)) {
        struct.errorMessage = iprot.readString();
        struct.setErrorMessageIsSet(true);
      }
      if (incoming.get(2)) {
        struct.processingStatus = iprot.readBool();
        struct.setProcessingStatusIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

