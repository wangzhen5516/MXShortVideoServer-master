/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package mx.j2.recommend.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2021-06-02")
public class InternalRequest implements org.apache.thrift.TBase<InternalRequest, InternalRequest._Fields>, java.io.Serializable, Cloneable, Comparable<InternalRequest> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("InternalRequest");

  private static final org.apache.thrift.protocol.TField INTERFACE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("interfaceName", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField RESOURCE_ID_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("resourceIdList", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField ADDITIONAL_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("additionalInfo", org.apache.thrift.protocol.TType.STRING, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new InternalRequestStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new InternalRequestTupleSchemeFactory();

  public java.lang.String interfaceName; // required
  public java.util.List<java.lang.String> resourceIdList; // optional
  public java.lang.String additionalInfo; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    INTERFACE_NAME((short)1, "interfaceName"),
    RESOURCE_ID_LIST((short)2, "resourceIdList"),
    ADDITIONAL_INFO((short)3, "additionalInfo");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // INTERFACE_NAME
          return INTERFACE_NAME;
        case 2: // RESOURCE_ID_LIST
          return RESOURCE_ID_LIST;
        case 3: // ADDITIONAL_INFO
          return ADDITIONAL_INFO;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.RESOURCE_ID_LIST,_Fields.ADDITIONAL_INFO};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.INTERFACE_NAME, new org.apache.thrift.meta_data.FieldMetaData("interfaceName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RESOURCE_ID_LIST, new org.apache.thrift.meta_data.FieldMetaData("resourceIdList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.ADDITIONAL_INFO, new org.apache.thrift.meta_data.FieldMetaData("additionalInfo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(InternalRequest.class, metaDataMap);
  }

  public InternalRequest() {
  }

  public InternalRequest(
    java.lang.String interfaceName)
  {
    this();
    this.interfaceName = interfaceName;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public InternalRequest(InternalRequest other) {
    if (other.isSetInterfaceName()) {
      this.interfaceName = other.interfaceName;
    }
    if (other.isSetResourceIdList()) {
      java.util.List<java.lang.String> __this__resourceIdList = new java.util.ArrayList<java.lang.String>(other.resourceIdList);
      this.resourceIdList = __this__resourceIdList;
    }
    if (other.isSetAdditionalInfo()) {
      this.additionalInfo = other.additionalInfo;
    }
  }

  public InternalRequest deepCopy() {
    return new InternalRequest(this);
  }

  @Override
  public void clear() {
    this.interfaceName = null;
    this.resourceIdList = null;
    this.additionalInfo = null;
  }

  public java.lang.String getInterfaceName() {
    return this.interfaceName;
  }

  public InternalRequest setInterfaceName(java.lang.String interfaceName) {
    this.interfaceName = interfaceName;
    return this;
  }

  public void unsetInterfaceName() {
    this.interfaceName = null;
  }

  /** Returns true if field interfaceName is set (has been assigned a value) and false otherwise */
  public boolean isSetInterfaceName() {
    return this.interfaceName != null;
  }

  public void setInterfaceNameIsSet(boolean value) {
    if (!value) {
      this.interfaceName = null;
    }
  }

  public int getResourceIdListSize() {
    return (this.resourceIdList == null) ? 0 : this.resourceIdList.size();
  }

  public java.util.Iterator<java.lang.String> getResourceIdListIterator() {
    return (this.resourceIdList == null) ? null : this.resourceIdList.iterator();
  }

  public void addToResourceIdList(java.lang.String elem) {
    if (this.resourceIdList == null) {
      this.resourceIdList = new java.util.ArrayList<java.lang.String>();
    }
    this.resourceIdList.add(elem);
  }

  public java.util.List<java.lang.String> getResourceIdList() {
    return this.resourceIdList;
  }

  public InternalRequest setResourceIdList(java.util.List<java.lang.String> resourceIdList) {
    this.resourceIdList = resourceIdList;
    return this;
  }

  public void unsetResourceIdList() {
    this.resourceIdList = null;
  }

  /** Returns true if field resourceIdList is set (has been assigned a value) and false otherwise */
  public boolean isSetResourceIdList() {
    return this.resourceIdList != null;
  }

  public void setResourceIdListIsSet(boolean value) {
    if (!value) {
      this.resourceIdList = null;
    }
  }

  public java.lang.String getAdditionalInfo() {
    return this.additionalInfo;
  }

  public InternalRequest setAdditionalInfo(java.lang.String additionalInfo) {
    this.additionalInfo = additionalInfo;
    return this;
  }

  public void unsetAdditionalInfo() {
    this.additionalInfo = null;
  }

  /** Returns true if field additionalInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetAdditionalInfo() {
    return this.additionalInfo != null;
  }

  public void setAdditionalInfoIsSet(boolean value) {
    if (!value) {
      this.additionalInfo = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case INTERFACE_NAME:
      if (value == null) {
        unsetInterfaceName();
      } else {
        setInterfaceName((java.lang.String)value);
      }
      break;

    case RESOURCE_ID_LIST:
      if (value == null) {
        unsetResourceIdList();
      } else {
        setResourceIdList((java.util.List<java.lang.String>)value);
      }
      break;

    case ADDITIONAL_INFO:
      if (value == null) {
        unsetAdditionalInfo();
      } else {
        setAdditionalInfo((java.lang.String)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case INTERFACE_NAME:
      return getInterfaceName();

    case RESOURCE_ID_LIST:
      return getResourceIdList();

    case ADDITIONAL_INFO:
      return getAdditionalInfo();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case INTERFACE_NAME:
      return isSetInterfaceName();
    case RESOURCE_ID_LIST:
      return isSetResourceIdList();
    case ADDITIONAL_INFO:
      return isSetAdditionalInfo();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof InternalRequest)
      return this.equals((InternalRequest)that);
    return false;
  }

  public boolean equals(InternalRequest that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_interfaceName = true && this.isSetInterfaceName();
    boolean that_present_interfaceName = true && that.isSetInterfaceName();
    if (this_present_interfaceName || that_present_interfaceName) {
      if (!(this_present_interfaceName && that_present_interfaceName))
        return false;
      if (!this.interfaceName.equals(that.interfaceName))
        return false;
    }

    boolean this_present_resourceIdList = true && this.isSetResourceIdList();
    boolean that_present_resourceIdList = true && that.isSetResourceIdList();
    if (this_present_resourceIdList || that_present_resourceIdList) {
      if (!(this_present_resourceIdList && that_present_resourceIdList))
        return false;
      if (!this.resourceIdList.equals(that.resourceIdList))
        return false;
    }

    boolean this_present_additionalInfo = true && this.isSetAdditionalInfo();
    boolean that_present_additionalInfo = true && that.isSetAdditionalInfo();
    if (this_present_additionalInfo || that_present_additionalInfo) {
      if (!(this_present_additionalInfo && that_present_additionalInfo))
        return false;
      if (!this.additionalInfo.equals(that.additionalInfo))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetInterfaceName()) ? 131071 : 524287);
    if (isSetInterfaceName())
      hashCode = hashCode * 8191 + interfaceName.hashCode();

    hashCode = hashCode * 8191 + ((isSetResourceIdList()) ? 131071 : 524287);
    if (isSetResourceIdList())
      hashCode = hashCode * 8191 + resourceIdList.hashCode();

    hashCode = hashCode * 8191 + ((isSetAdditionalInfo()) ? 131071 : 524287);
    if (isSetAdditionalInfo())
      hashCode = hashCode * 8191 + additionalInfo.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(InternalRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetInterfaceName()).compareTo(other.isSetInterfaceName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInterfaceName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.interfaceName, other.interfaceName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetResourceIdList()).compareTo(other.isSetResourceIdList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResourceIdList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resourceIdList, other.resourceIdList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAdditionalInfo()).compareTo(other.isSetAdditionalInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAdditionalInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.additionalInfo, other.additionalInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("InternalRequest(");
    boolean first = true;

    sb.append("interfaceName:");
    if (this.interfaceName == null) {
      sb.append("null");
    } else {
      sb.append(this.interfaceName);
    }
    first = false;
    if (isSetResourceIdList()) {
      if (!first) sb.append(", ");
      sb.append("resourceIdList:");
      if (this.resourceIdList == null) {
        sb.append("null");
      } else {
        sb.append(this.resourceIdList);
      }
      first = false;
    }
    if (isSetAdditionalInfo()) {
      if (!first) sb.append(", ");
      sb.append("additionalInfo:");
      if (this.additionalInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.additionalInfo);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class InternalRequestStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public InternalRequestStandardScheme getScheme() {
      return new InternalRequestStandardScheme();
    }
  }

  private static class InternalRequestStandardScheme extends org.apache.thrift.scheme.StandardScheme<InternalRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, InternalRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // INTERFACE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.interfaceName = iprot.readString();
              struct.setInterfaceNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // RESOURCE_ID_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list152 = iprot.readListBegin();
                struct.resourceIdList = new java.util.ArrayList<java.lang.String>(_list152.size);
                java.lang.String _elem153;
                for (int _i154 = 0; _i154 < _list152.size; ++_i154)
                {
                  _elem153 = iprot.readString();
                  struct.resourceIdList.add(_elem153);
                }
                iprot.readListEnd();
              }
              struct.setResourceIdListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ADDITIONAL_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.additionalInfo = iprot.readString();
              struct.setAdditionalInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, InternalRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.interfaceName != null) {
        oprot.writeFieldBegin(INTERFACE_NAME_FIELD_DESC);
        oprot.writeString(struct.interfaceName);
        oprot.writeFieldEnd();
      }
      if (struct.resourceIdList != null) {
        if (struct.isSetResourceIdList()) {
          oprot.writeFieldBegin(RESOURCE_ID_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.resourceIdList.size()));
            for (java.lang.String _iter155 : struct.resourceIdList)
            {
              oprot.writeString(_iter155);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.additionalInfo != null) {
        if (struct.isSetAdditionalInfo()) {
          oprot.writeFieldBegin(ADDITIONAL_INFO_FIELD_DESC);
          oprot.writeString(struct.additionalInfo);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class InternalRequestTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public InternalRequestTupleScheme getScheme() {
      return new InternalRequestTupleScheme();
    }
  }

  private static class InternalRequestTupleScheme extends org.apache.thrift.scheme.TupleScheme<InternalRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, InternalRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetInterfaceName()) {
        optionals.set(0);
      }
      if (struct.isSetResourceIdList()) {
        optionals.set(1);
      }
      if (struct.isSetAdditionalInfo()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetInterfaceName()) {
        oprot.writeString(struct.interfaceName);
      }
      if (struct.isSetResourceIdList()) {
        {
          oprot.writeI32(struct.resourceIdList.size());
          for (java.lang.String _iter156 : struct.resourceIdList)
          {
            oprot.writeString(_iter156);
          }
        }
      }
      if (struct.isSetAdditionalInfo()) {
        oprot.writeString(struct.additionalInfo);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, InternalRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.interfaceName = iprot.readString();
        struct.setInterfaceNameIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list157 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.resourceIdList = new java.util.ArrayList<java.lang.String>(_list157.size);
          java.lang.String _elem158;
          for (int _i159 = 0; _i159 < _list157.size; ++_i159)
          {
            _elem158 = iprot.readString();
            struct.resourceIdList.add(_elem158);
          }
        }
        struct.setResourceIdListIsSet(true);
      }
      if (incoming.get(2)) {
        struct.additionalInfo = iprot.readString();
        struct.setAdditionalInfoIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

