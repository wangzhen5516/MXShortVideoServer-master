/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package mx.j2.recommend.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2021-06-02")
public class Sticker implements org.apache.thrift.TBase<Sticker, Sticker._Fields>, java.io.Serializable, Cloneable, Comparable<Sticker> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Sticker");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField STICKER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("stickerName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField STICKER_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("stickerType", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField STICKER_GROUP_FIELD_DESC = new org.apache.thrift.protocol.TField("stickerGroup", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField COUNTRIES_FIELD_DESC = new org.apache.thrift.protocol.TField("countries", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField UPDATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("updateTime", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField ORIGINAL_PACKAGE_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("originalPackageUrl", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField STICKER_THUMBNAIL_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("stickerThumbnailUrl", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField ORIGINAL_STICKER_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("originalStickerUrl", org.apache.thrift.protocol.TType.STRING, (short)11);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new StickerStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new StickerTupleSchemeFactory();

  public java.lang.String id; // required
  public java.lang.String stickerName; // required
  public int status; // optional
  public java.lang.String stickerType; // optional
  public java.lang.String stickerGroup; // optional
  public java.util.List<java.lang.String> countries; // optional
  public long updateTime; // optional
  public long createTime; // optional
  public java.lang.String originalPackageUrl; // optional
  public java.lang.String stickerThumbnailUrl; // optional
  public java.lang.String originalStickerUrl; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    STICKER_NAME((short)2, "stickerName"),
    STATUS((short)3, "status"),
    STICKER_TYPE((short)4, "stickerType"),
    STICKER_GROUP((short)5, "stickerGroup"),
    COUNTRIES((short)6, "countries"),
    UPDATE_TIME((short)7, "updateTime"),
    CREATE_TIME((short)8, "createTime"),
    ORIGINAL_PACKAGE_URL((short)9, "originalPackageUrl"),
    STICKER_THUMBNAIL_URL((short)10, "stickerThumbnailUrl"),
    ORIGINAL_STICKER_URL((short)11, "originalStickerUrl");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // STICKER_NAME
          return STICKER_NAME;
        case 3: // STATUS
          return STATUS;
        case 4: // STICKER_TYPE
          return STICKER_TYPE;
        case 5: // STICKER_GROUP
          return STICKER_GROUP;
        case 6: // COUNTRIES
          return COUNTRIES;
        case 7: // UPDATE_TIME
          return UPDATE_TIME;
        case 8: // CREATE_TIME
          return CREATE_TIME;
        case 9: // ORIGINAL_PACKAGE_URL
          return ORIGINAL_PACKAGE_URL;
        case 10: // STICKER_THUMBNAIL_URL
          return STICKER_THUMBNAIL_URL;
        case 11: // ORIGINAL_STICKER_URL
          return ORIGINAL_STICKER_URL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __STATUS_ISSET_ID = 0;
  private static final int __UPDATETIME_ISSET_ID = 1;
  private static final int __CREATETIME_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.STATUS,_Fields.STICKER_TYPE,_Fields.STICKER_GROUP,_Fields.COUNTRIES,_Fields.UPDATE_TIME,_Fields.CREATE_TIME,_Fields.ORIGINAL_PACKAGE_URL,_Fields.STICKER_THUMBNAIL_URL,_Fields.ORIGINAL_STICKER_URL};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STICKER_NAME, new org.apache.thrift.meta_data.FieldMetaData("stickerName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STICKER_TYPE, new org.apache.thrift.meta_data.FieldMetaData("stickerType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STICKER_GROUP, new org.apache.thrift.meta_data.FieldMetaData("stickerGroup", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COUNTRIES, new org.apache.thrift.meta_data.FieldMetaData("countries", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.UPDATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("updateTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ORIGINAL_PACKAGE_URL, new org.apache.thrift.meta_data.FieldMetaData("originalPackageUrl", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STICKER_THUMBNAIL_URL, new org.apache.thrift.meta_data.FieldMetaData("stickerThumbnailUrl", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORIGINAL_STICKER_URL, new org.apache.thrift.meta_data.FieldMetaData("originalStickerUrl", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Sticker.class, metaDataMap);
  }

  public Sticker() {
  }

  public Sticker(
    java.lang.String id,
    java.lang.String stickerName)
  {
    this();
    this.id = id;
    this.stickerName = stickerName;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Sticker(Sticker other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetId()) {
      this.id = other.id;
    }
    if (other.isSetStickerName()) {
      this.stickerName = other.stickerName;
    }
    this.status = other.status;
    if (other.isSetStickerType()) {
      this.stickerType = other.stickerType;
    }
    if (other.isSetStickerGroup()) {
      this.stickerGroup = other.stickerGroup;
    }
    if (other.isSetCountries()) {
      java.util.List<java.lang.String> __this__countries = new java.util.ArrayList<java.lang.String>(other.countries);
      this.countries = __this__countries;
    }
    this.updateTime = other.updateTime;
    this.createTime = other.createTime;
    if (other.isSetOriginalPackageUrl()) {
      this.originalPackageUrl = other.originalPackageUrl;
    }
    if (other.isSetStickerThumbnailUrl()) {
      this.stickerThumbnailUrl = other.stickerThumbnailUrl;
    }
    if (other.isSetOriginalStickerUrl()) {
      this.originalStickerUrl = other.originalStickerUrl;
    }
  }

  public Sticker deepCopy() {
    return new Sticker(this);
  }

  @Override
  public void clear() {
    this.id = null;
    this.stickerName = null;
    setStatusIsSet(false);
    this.status = 0;
    this.stickerType = null;
    this.stickerGroup = null;
    this.countries = null;
    setUpdateTimeIsSet(false);
    this.updateTime = 0;
    setCreateTimeIsSet(false);
    this.createTime = 0;
    this.originalPackageUrl = null;
    this.stickerThumbnailUrl = null;
    this.originalStickerUrl = null;
  }

  public java.lang.String getId() {
    return this.id;
  }

  public Sticker setId(java.lang.String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  public java.lang.String getStickerName() {
    return this.stickerName;
  }

  public Sticker setStickerName(java.lang.String stickerName) {
    this.stickerName = stickerName;
    return this;
  }

  public void unsetStickerName() {
    this.stickerName = null;
  }

  /** Returns true if field stickerName is set (has been assigned a value) and false otherwise */
  public boolean isSetStickerName() {
    return this.stickerName != null;
  }

  public void setStickerNameIsSet(boolean value) {
    if (!value) {
      this.stickerName = null;
    }
  }

  public int getStatus() {
    return this.status;
  }

  public Sticker setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public java.lang.String getStickerType() {
    return this.stickerType;
  }

  public Sticker setStickerType(java.lang.String stickerType) {
    this.stickerType = stickerType;
    return this;
  }

  public void unsetStickerType() {
    this.stickerType = null;
  }

  /** Returns true if field stickerType is set (has been assigned a value) and false otherwise */
  public boolean isSetStickerType() {
    return this.stickerType != null;
  }

  public void setStickerTypeIsSet(boolean value) {
    if (!value) {
      this.stickerType = null;
    }
  }

  public java.lang.String getStickerGroup() {
    return this.stickerGroup;
  }

  public Sticker setStickerGroup(java.lang.String stickerGroup) {
    this.stickerGroup = stickerGroup;
    return this;
  }

  public void unsetStickerGroup() {
    this.stickerGroup = null;
  }

  /** Returns true if field stickerGroup is set (has been assigned a value) and false otherwise */
  public boolean isSetStickerGroup() {
    return this.stickerGroup != null;
  }

  public void setStickerGroupIsSet(boolean value) {
    if (!value) {
      this.stickerGroup = null;
    }
  }

  public int getCountriesSize() {
    return (this.countries == null) ? 0 : this.countries.size();
  }

  public java.util.Iterator<java.lang.String> getCountriesIterator() {
    return (this.countries == null) ? null : this.countries.iterator();
  }

  public void addToCountries(java.lang.String elem) {
    if (this.countries == null) {
      this.countries = new java.util.ArrayList<java.lang.String>();
    }
    this.countries.add(elem);
  }

  public java.util.List<java.lang.String> getCountries() {
    return this.countries;
  }

  public Sticker setCountries(java.util.List<java.lang.String> countries) {
    this.countries = countries;
    return this;
  }

  public void unsetCountries() {
    this.countries = null;
  }

  /** Returns true if field countries is set (has been assigned a value) and false otherwise */
  public boolean isSetCountries() {
    return this.countries != null;
  }

  public void setCountriesIsSet(boolean value) {
    if (!value) {
      this.countries = null;
    }
  }

  public long getUpdateTime() {
    return this.updateTime;
  }

  public Sticker setUpdateTime(long updateTime) {
    this.updateTime = updateTime;
    setUpdateTimeIsSet(true);
    return this;
  }

  public void unsetUpdateTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __UPDATETIME_ISSET_ID);
  }

  /** Returns true if field updateTime is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __UPDATETIME_ISSET_ID);
  }

  public void setUpdateTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __UPDATETIME_ISSET_ID, value);
  }

  public long getCreateTime() {
    return this.createTime;
  }

  public Sticker setCreateTime(long createTime) {
    this.createTime = createTime;
    setCreateTimeIsSet(true);
    return this;
  }

  public void unsetCreateTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  public void setCreateTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CREATETIME_ISSET_ID, value);
  }

  public java.lang.String getOriginalPackageUrl() {
    return this.originalPackageUrl;
  }

  public Sticker setOriginalPackageUrl(java.lang.String originalPackageUrl) {
    this.originalPackageUrl = originalPackageUrl;
    return this;
  }

  public void unsetOriginalPackageUrl() {
    this.originalPackageUrl = null;
  }

  /** Returns true if field originalPackageUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetOriginalPackageUrl() {
    return this.originalPackageUrl != null;
  }

  public void setOriginalPackageUrlIsSet(boolean value) {
    if (!value) {
      this.originalPackageUrl = null;
    }
  }

  public java.lang.String getStickerThumbnailUrl() {
    return this.stickerThumbnailUrl;
  }

  public Sticker setStickerThumbnailUrl(java.lang.String stickerThumbnailUrl) {
    this.stickerThumbnailUrl = stickerThumbnailUrl;
    return this;
  }

  public void unsetStickerThumbnailUrl() {
    this.stickerThumbnailUrl = null;
  }

  /** Returns true if field stickerThumbnailUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetStickerThumbnailUrl() {
    return this.stickerThumbnailUrl != null;
  }

  public void setStickerThumbnailUrlIsSet(boolean value) {
    if (!value) {
      this.stickerThumbnailUrl = null;
    }
  }

  public java.lang.String getOriginalStickerUrl() {
    return this.originalStickerUrl;
  }

  public Sticker setOriginalStickerUrl(java.lang.String originalStickerUrl) {
    this.originalStickerUrl = originalStickerUrl;
    return this;
  }

  public void unsetOriginalStickerUrl() {
    this.originalStickerUrl = null;
  }

  /** Returns true if field originalStickerUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetOriginalStickerUrl() {
    return this.originalStickerUrl != null;
  }

  public void setOriginalStickerUrlIsSet(boolean value) {
    if (!value) {
      this.originalStickerUrl = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((java.lang.String)value);
      }
      break;

    case STICKER_NAME:
      if (value == null) {
        unsetStickerName();
      } else {
        setStickerName((java.lang.String)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((java.lang.Integer)value);
      }
      break;

    case STICKER_TYPE:
      if (value == null) {
        unsetStickerType();
      } else {
        setStickerType((java.lang.String)value);
      }
      break;

    case STICKER_GROUP:
      if (value == null) {
        unsetStickerGroup();
      } else {
        setStickerGroup((java.lang.String)value);
      }
      break;

    case COUNTRIES:
      if (value == null) {
        unsetCountries();
      } else {
        setCountries((java.util.List<java.lang.String>)value);
      }
      break;

    case UPDATE_TIME:
      if (value == null) {
        unsetUpdateTime();
      } else {
        setUpdateTime((java.lang.Long)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((java.lang.Long)value);
      }
      break;

    case ORIGINAL_PACKAGE_URL:
      if (value == null) {
        unsetOriginalPackageUrl();
      } else {
        setOriginalPackageUrl((java.lang.String)value);
      }
      break;

    case STICKER_THUMBNAIL_URL:
      if (value == null) {
        unsetStickerThumbnailUrl();
      } else {
        setStickerThumbnailUrl((java.lang.String)value);
      }
      break;

    case ORIGINAL_STICKER_URL:
      if (value == null) {
        unsetOriginalStickerUrl();
      } else {
        setOriginalStickerUrl((java.lang.String)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case STICKER_NAME:
      return getStickerName();

    case STATUS:
      return getStatus();

    case STICKER_TYPE:
      return getStickerType();

    case STICKER_GROUP:
      return getStickerGroup();

    case COUNTRIES:
      return getCountries();

    case UPDATE_TIME:
      return getUpdateTime();

    case CREATE_TIME:
      return getCreateTime();

    case ORIGINAL_PACKAGE_URL:
      return getOriginalPackageUrl();

    case STICKER_THUMBNAIL_URL:
      return getStickerThumbnailUrl();

    case ORIGINAL_STICKER_URL:
      return getOriginalStickerUrl();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case STICKER_NAME:
      return isSetStickerName();
    case STATUS:
      return isSetStatus();
    case STICKER_TYPE:
      return isSetStickerType();
    case STICKER_GROUP:
      return isSetStickerGroup();
    case COUNTRIES:
      return isSetCountries();
    case UPDATE_TIME:
      return isSetUpdateTime();
    case CREATE_TIME:
      return isSetCreateTime();
    case ORIGINAL_PACKAGE_URL:
      return isSetOriginalPackageUrl();
    case STICKER_THUMBNAIL_URL:
      return isSetStickerThumbnailUrl();
    case ORIGINAL_STICKER_URL:
      return isSetOriginalStickerUrl();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof Sticker)
      return this.equals((Sticker)that);
    return false;
  }

  public boolean equals(Sticker that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_stickerName = true && this.isSetStickerName();
    boolean that_present_stickerName = true && that.isSetStickerName();
    if (this_present_stickerName || that_present_stickerName) {
      if (!(this_present_stickerName && that_present_stickerName))
        return false;
      if (!this.stickerName.equals(that.stickerName))
        return false;
    }

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_stickerType = true && this.isSetStickerType();
    boolean that_present_stickerType = true && that.isSetStickerType();
    if (this_present_stickerType || that_present_stickerType) {
      if (!(this_present_stickerType && that_present_stickerType))
        return false;
      if (!this.stickerType.equals(that.stickerType))
        return false;
    }

    boolean this_present_stickerGroup = true && this.isSetStickerGroup();
    boolean that_present_stickerGroup = true && that.isSetStickerGroup();
    if (this_present_stickerGroup || that_present_stickerGroup) {
      if (!(this_present_stickerGroup && that_present_stickerGroup))
        return false;
      if (!this.stickerGroup.equals(that.stickerGroup))
        return false;
    }

    boolean this_present_countries = true && this.isSetCountries();
    boolean that_present_countries = true && that.isSetCountries();
    if (this_present_countries || that_present_countries) {
      if (!(this_present_countries && that_present_countries))
        return false;
      if (!this.countries.equals(that.countries))
        return false;
    }

    boolean this_present_updateTime = true && this.isSetUpdateTime();
    boolean that_present_updateTime = true && that.isSetUpdateTime();
    if (this_present_updateTime || that_present_updateTime) {
      if (!(this_present_updateTime && that_present_updateTime))
        return false;
      if (this.updateTime != that.updateTime)
        return false;
    }

    boolean this_present_createTime = true && this.isSetCreateTime();
    boolean that_present_createTime = true && that.isSetCreateTime();
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (this.createTime != that.createTime)
        return false;
    }

    boolean this_present_originalPackageUrl = true && this.isSetOriginalPackageUrl();
    boolean that_present_originalPackageUrl = true && that.isSetOriginalPackageUrl();
    if (this_present_originalPackageUrl || that_present_originalPackageUrl) {
      if (!(this_present_originalPackageUrl && that_present_originalPackageUrl))
        return false;
      if (!this.originalPackageUrl.equals(that.originalPackageUrl))
        return false;
    }

    boolean this_present_stickerThumbnailUrl = true && this.isSetStickerThumbnailUrl();
    boolean that_present_stickerThumbnailUrl = true && that.isSetStickerThumbnailUrl();
    if (this_present_stickerThumbnailUrl || that_present_stickerThumbnailUrl) {
      if (!(this_present_stickerThumbnailUrl && that_present_stickerThumbnailUrl))
        return false;
      if (!this.stickerThumbnailUrl.equals(that.stickerThumbnailUrl))
        return false;
    }

    boolean this_present_originalStickerUrl = true && this.isSetOriginalStickerUrl();
    boolean that_present_originalStickerUrl = true && that.isSetOriginalStickerUrl();
    if (this_present_originalStickerUrl || that_present_originalStickerUrl) {
      if (!(this_present_originalStickerUrl && that_present_originalStickerUrl))
        return false;
      if (!this.originalStickerUrl.equals(that.originalStickerUrl))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
    if (isSetId())
      hashCode = hashCode * 8191 + id.hashCode();

    hashCode = hashCode * 8191 + ((isSetStickerName()) ? 131071 : 524287);
    if (isSetStickerName())
      hashCode = hashCode * 8191 + stickerName.hashCode();

    hashCode = hashCode * 8191 + ((isSetStatus()) ? 131071 : 524287);
    if (isSetStatus())
      hashCode = hashCode * 8191 + status;

    hashCode = hashCode * 8191 + ((isSetStickerType()) ? 131071 : 524287);
    if (isSetStickerType())
      hashCode = hashCode * 8191 + stickerType.hashCode();

    hashCode = hashCode * 8191 + ((isSetStickerGroup()) ? 131071 : 524287);
    if (isSetStickerGroup())
      hashCode = hashCode * 8191 + stickerGroup.hashCode();

    hashCode = hashCode * 8191 + ((isSetCountries()) ? 131071 : 524287);
    if (isSetCountries())
      hashCode = hashCode * 8191 + countries.hashCode();

    hashCode = hashCode * 8191 + ((isSetUpdateTime()) ? 131071 : 524287);
    if (isSetUpdateTime())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(updateTime);

    hashCode = hashCode * 8191 + ((isSetCreateTime()) ? 131071 : 524287);
    if (isSetCreateTime())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(createTime);

    hashCode = hashCode * 8191 + ((isSetOriginalPackageUrl()) ? 131071 : 524287);
    if (isSetOriginalPackageUrl())
      hashCode = hashCode * 8191 + originalPackageUrl.hashCode();

    hashCode = hashCode * 8191 + ((isSetStickerThumbnailUrl()) ? 131071 : 524287);
    if (isSetStickerThumbnailUrl())
      hashCode = hashCode * 8191 + stickerThumbnailUrl.hashCode();

    hashCode = hashCode * 8191 + ((isSetOriginalStickerUrl()) ? 131071 : 524287);
    if (isSetOriginalStickerUrl())
      hashCode = hashCode * 8191 + originalStickerUrl.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(Sticker other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetStickerName()).compareTo(other.isSetStickerName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStickerName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stickerName, other.stickerName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetStickerType()).compareTo(other.isSetStickerType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStickerType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stickerType, other.stickerType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetStickerGroup()).compareTo(other.isSetStickerGroup());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStickerGroup()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stickerGroup, other.stickerGroup);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCountries()).compareTo(other.isSetCountries());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCountries()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.countries, other.countries);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetUpdateTime()).compareTo(other.isSetUpdateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateTime, other.updateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCreateTime()).compareTo(other.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, other.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetOriginalPackageUrl()).compareTo(other.isSetOriginalPackageUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOriginalPackageUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originalPackageUrl, other.originalPackageUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetStickerThumbnailUrl()).compareTo(other.isSetStickerThumbnailUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStickerThumbnailUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stickerThumbnailUrl, other.stickerThumbnailUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetOriginalStickerUrl()).compareTo(other.isSetOriginalStickerUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOriginalStickerUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originalStickerUrl, other.originalStickerUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("Sticker(");
    boolean first = true;

    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("stickerName:");
    if (this.stickerName == null) {
      sb.append("null");
    } else {
      sb.append(this.stickerName);
    }
    first = false;
    if (isSetStatus()) {
      if (!first) sb.append(", ");
      sb.append("status:");
      sb.append(this.status);
      first = false;
    }
    if (isSetStickerType()) {
      if (!first) sb.append(", ");
      sb.append("stickerType:");
      if (this.stickerType == null) {
        sb.append("null");
      } else {
        sb.append(this.stickerType);
      }
      first = false;
    }
    if (isSetStickerGroup()) {
      if (!first) sb.append(", ");
      sb.append("stickerGroup:");
      if (this.stickerGroup == null) {
        sb.append("null");
      } else {
        sb.append(this.stickerGroup);
      }
      first = false;
    }
    if (isSetCountries()) {
      if (!first) sb.append(", ");
      sb.append("countries:");
      if (this.countries == null) {
        sb.append("null");
      } else {
        sb.append(this.countries);
      }
      first = false;
    }
    if (isSetUpdateTime()) {
      if (!first) sb.append(", ");
      sb.append("updateTime:");
      sb.append(this.updateTime);
      first = false;
    }
    if (isSetCreateTime()) {
      if (!first) sb.append(", ");
      sb.append("createTime:");
      sb.append(this.createTime);
      first = false;
    }
    if (isSetOriginalPackageUrl()) {
      if (!first) sb.append(", ");
      sb.append("originalPackageUrl:");
      if (this.originalPackageUrl == null) {
        sb.append("null");
      } else {
        sb.append(this.originalPackageUrl);
      }
      first = false;
    }
    if (isSetStickerThumbnailUrl()) {
      if (!first) sb.append(", ");
      sb.append("stickerThumbnailUrl:");
      if (this.stickerThumbnailUrl == null) {
        sb.append("null");
      } else {
        sb.append(this.stickerThumbnailUrl);
      }
      first = false;
    }
    if (isSetOriginalStickerUrl()) {
      if (!first) sb.append(", ");
      sb.append("originalStickerUrl:");
      if (this.originalStickerUrl == null) {
        sb.append("null");
      } else {
        sb.append(this.originalStickerUrl);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class StickerStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public StickerStandardScheme getScheme() {
      return new StickerStandardScheme();
    }
  }

  private static class StickerStandardScheme extends org.apache.thrift.scheme.StandardScheme<Sticker> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Sticker struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // STICKER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.stickerName = iprot.readString();
              struct.setStickerNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // STICKER_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.stickerType = iprot.readString();
              struct.setStickerTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // STICKER_GROUP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.stickerGroup = iprot.readString();
              struct.setStickerGroupIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // COUNTRIES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list96 = iprot.readListBegin();
                struct.countries = new java.util.ArrayList<java.lang.String>(_list96.size);
                java.lang.String _elem97;
                for (int _i98 = 0; _i98 < _list96.size; ++_i98)
                {
                  _elem97 = iprot.readString();
                  struct.countries.add(_elem97);
                }
                iprot.readListEnd();
              }
              struct.setCountriesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // UPDATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.updateTime = iprot.readI64();
              struct.setUpdateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.createTime = iprot.readI64();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // ORIGINAL_PACKAGE_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.originalPackageUrl = iprot.readString();
              struct.setOriginalPackageUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // STICKER_THUMBNAIL_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.stickerThumbnailUrl = iprot.readString();
              struct.setStickerThumbnailUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // ORIGINAL_STICKER_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.originalStickerUrl = iprot.readString();
              struct.setOriginalStickerUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Sticker struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.stickerName != null) {
        oprot.writeFieldBegin(STICKER_NAME_FIELD_DESC);
        oprot.writeString(struct.stickerName);
        oprot.writeFieldEnd();
      }
      if (struct.isSetStatus()) {
        oprot.writeFieldBegin(STATUS_FIELD_DESC);
        oprot.writeI32(struct.status);
        oprot.writeFieldEnd();
      }
      if (struct.stickerType != null) {
        if (struct.isSetStickerType()) {
          oprot.writeFieldBegin(STICKER_TYPE_FIELD_DESC);
          oprot.writeString(struct.stickerType);
          oprot.writeFieldEnd();
        }
      }
      if (struct.stickerGroup != null) {
        if (struct.isSetStickerGroup()) {
          oprot.writeFieldBegin(STICKER_GROUP_FIELD_DESC);
          oprot.writeString(struct.stickerGroup);
          oprot.writeFieldEnd();
        }
      }
      if (struct.countries != null) {
        if (struct.isSetCountries()) {
          oprot.writeFieldBegin(COUNTRIES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.countries.size()));
            for (java.lang.String _iter99 : struct.countries)
            {
              oprot.writeString(_iter99);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetUpdateTime()) {
        oprot.writeFieldBegin(UPDATE_TIME_FIELD_DESC);
        oprot.writeI64(struct.updateTime);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCreateTime()) {
        oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
        oprot.writeI64(struct.createTime);
        oprot.writeFieldEnd();
      }
      if (struct.originalPackageUrl != null) {
        if (struct.isSetOriginalPackageUrl()) {
          oprot.writeFieldBegin(ORIGINAL_PACKAGE_URL_FIELD_DESC);
          oprot.writeString(struct.originalPackageUrl);
          oprot.writeFieldEnd();
        }
      }
      if (struct.stickerThumbnailUrl != null) {
        if (struct.isSetStickerThumbnailUrl()) {
          oprot.writeFieldBegin(STICKER_THUMBNAIL_URL_FIELD_DESC);
          oprot.writeString(struct.stickerThumbnailUrl);
          oprot.writeFieldEnd();
        }
      }
      if (struct.originalStickerUrl != null) {
        if (struct.isSetOriginalStickerUrl()) {
          oprot.writeFieldBegin(ORIGINAL_STICKER_URL_FIELD_DESC);
          oprot.writeString(struct.originalStickerUrl);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class StickerTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public StickerTupleScheme getScheme() {
      return new StickerTupleScheme();
    }
  }

  private static class StickerTupleScheme extends org.apache.thrift.scheme.TupleScheme<Sticker> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Sticker struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetStickerName()) {
        optionals.set(1);
      }
      if (struct.isSetStatus()) {
        optionals.set(2);
      }
      if (struct.isSetStickerType()) {
        optionals.set(3);
      }
      if (struct.isSetStickerGroup()) {
        optionals.set(4);
      }
      if (struct.isSetCountries()) {
        optionals.set(5);
      }
      if (struct.isSetUpdateTime()) {
        optionals.set(6);
      }
      if (struct.isSetCreateTime()) {
        optionals.set(7);
      }
      if (struct.isSetOriginalPackageUrl()) {
        optionals.set(8);
      }
      if (struct.isSetStickerThumbnailUrl()) {
        optionals.set(9);
      }
      if (struct.isSetOriginalStickerUrl()) {
        optionals.set(10);
      }
      oprot.writeBitSet(optionals, 11);
      if (struct.isSetId()) {
        oprot.writeString(struct.id);
      }
      if (struct.isSetStickerName()) {
        oprot.writeString(struct.stickerName);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
      if (struct.isSetStickerType()) {
        oprot.writeString(struct.stickerType);
      }
      if (struct.isSetStickerGroup()) {
        oprot.writeString(struct.stickerGroup);
      }
      if (struct.isSetCountries()) {
        {
          oprot.writeI32(struct.countries.size());
          for (java.lang.String _iter100 : struct.countries)
          {
            oprot.writeString(_iter100);
          }
        }
      }
      if (struct.isSetUpdateTime()) {
        oprot.writeI64(struct.updateTime);
      }
      if (struct.isSetCreateTime()) {
        oprot.writeI64(struct.createTime);
      }
      if (struct.isSetOriginalPackageUrl()) {
        oprot.writeString(struct.originalPackageUrl);
      }
      if (struct.isSetStickerThumbnailUrl()) {
        oprot.writeString(struct.stickerThumbnailUrl);
      }
      if (struct.isSetOriginalStickerUrl()) {
        oprot.writeString(struct.originalStickerUrl);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Sticker struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(11);
      if (incoming.get(0)) {
        struct.id = iprot.readString();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.stickerName = iprot.readString();
        struct.setStickerNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(3)) {
        struct.stickerType = iprot.readString();
        struct.setStickerTypeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.stickerGroup = iprot.readString();
        struct.setStickerGroupIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list101 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.countries = new java.util.ArrayList<java.lang.String>(_list101.size);
          java.lang.String _elem102;
          for (int _i103 = 0; _i103 < _list101.size; ++_i103)
          {
            _elem102 = iprot.readString();
            struct.countries.add(_elem102);
          }
        }
        struct.setCountriesIsSet(true);
      }
      if (incoming.get(6)) {
        struct.updateTime = iprot.readI64();
        struct.setUpdateTimeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.createTime = iprot.readI64();
        struct.setCreateTimeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.originalPackageUrl = iprot.readString();
        struct.setOriginalPackageUrlIsSet(true);
      }
      if (incoming.get(9)) {
        struct.stickerThumbnailUrl = iprot.readString();
        struct.setStickerThumbnailUrlIsSet(true);
      }
      if (incoming.get(10)) {
        struct.originalStickerUrl = iprot.readString();
        struct.setOriginalStickerUrlIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

