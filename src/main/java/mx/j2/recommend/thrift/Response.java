/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package mx.j2.recommend.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2021-06-02")
public class Response implements org.apache.thrift.TBase<Response, Response._Fields>, java.io.Serializable, Cloneable, Comparable<Response> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Response");

  private static final org.apache.thrift.protocol.TField RESULT_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("resultList", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField LOG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("logId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField NEXT_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("nextToken", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField INTERNAL_USE_FIELD_DESC = new org.apache.thrift.protocol.TField("internalUse", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField RESULT_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("resultNum", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField RED_DOT_FIELD_DESC = new org.apache.thrift.protocol.TField("redDot", org.apache.thrift.protocol.TType.BOOL, (short)6);
  private static final org.apache.thrift.protocol.TField BANNER_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("bannerList", org.apache.thrift.protocol.TType.LIST, (short)7);
  private static final org.apache.thrift.protocol.TField CARD_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("cardList", org.apache.thrift.protocol.TType.LIST, (short)8);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField PUBLISHER_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("publisherIds", org.apache.thrift.protocol.TType.LIST, (short)10);
  private static final org.apache.thrift.protocol.TField NEED_RETRY_FIELD_DESC = new org.apache.thrift.protocol.TField("needRetry", org.apache.thrift.protocol.TType.BOOL, (short)11);
  private static final org.apache.thrift.protocol.TField LOG_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("logMap", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField STICKER_GROUP_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("stickerGroupList", org.apache.thrift.protocol.TType.LIST, (short)13);
  private static final org.apache.thrift.protocol.TField STICKER_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("stickerList", org.apache.thrift.protocol.TType.LIST, (short)14);
  private static final org.apache.thrift.protocol.TField BADGE_FIELD_DESC = new org.apache.thrift.protocol.TField("badge", org.apache.thrift.protocol.TType.STRUCT, (short)15);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ResponseStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ResponseTupleSchemeFactory();

  public java.util.List<Result> resultList; // required
  public String logId; // optional
  public String nextToken; // required
  public InternalUse internalUse; // required
  public int resultNum; // optional
  public boolean redDot; // optional
  public java.util.List<Banner> bannerList; // required
  public java.util.List<Card> cardList; // required
  public int status; // optional
  public java.util.List<String> publisherIds; // required
  public boolean needRetry; // optional
  public String logMap; // optional
  public java.util.List<StickerGroup> stickerGroupList; // optional
  public java.util.List<Sticker> stickerList; // optional
  public Badge badge; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    RESULT_LIST((short)1, "resultList"),
    LOG_ID((short)2, "logId"),
    NEXT_TOKEN((short)3, "nextToken"),
    INTERNAL_USE((short)4, "internalUse"),
    RESULT_NUM((short)5, "resultNum"),
    RED_DOT((short)6, "redDot"),
    BANNER_LIST((short)7, "bannerList"),
    CARD_LIST((short)8, "cardList"),
    STATUS((short)9, "status"),
    PUBLISHER_IDS((short)10, "publisherIds"),
    NEED_RETRY((short)11, "needRetry"),
    LOG_MAP((short)12, "logMap"),
    STICKER_GROUP_LIST((short)13, "stickerGroupList"),
    STICKER_LIST((short)14, "stickerList"),
    BADGE((short)15, "badge");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // RESULT_LIST
          return RESULT_LIST;
        case 2: // LOG_ID
          return LOG_ID;
        case 3: // NEXT_TOKEN
          return NEXT_TOKEN;
        case 4: // INTERNAL_USE
          return INTERNAL_USE;
        case 5: // RESULT_NUM
          return RESULT_NUM;
        case 6: // RED_DOT
          return RED_DOT;
        case 7: // BANNER_LIST
          return BANNER_LIST;
        case 8: // CARD_LIST
          return CARD_LIST;
        case 9: // STATUS
          return STATUS;
        case 10: // PUBLISHER_IDS
          return PUBLISHER_IDS;
        case 11: // NEED_RETRY
          return NEED_RETRY;
        case 12: // LOG_MAP
          return LOG_MAP;
        case 13: // STICKER_GROUP_LIST
          return STICKER_GROUP_LIST;
        case 14: // STICKER_LIST
          return STICKER_LIST;
        case 15: // BADGE
          return BADGE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __RESULTNUM_ISSET_ID = 0;
  private static final int __REDDOT_ISSET_ID = 1;
  private static final int __STATUS_ISSET_ID = 2;
  private static final int __NEEDRETRY_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.LOG_ID,_Fields.RESULT_NUM,_Fields.RED_DOT,_Fields.STATUS,_Fields.NEED_RETRY,_Fields.LOG_MAP,_Fields.STICKER_GROUP_LIST,_Fields.STICKER_LIST,_Fields.BADGE};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.RESULT_LIST, new org.apache.thrift.meta_data.FieldMetaData("resultList", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Result.class))));
    tmpMap.put(_Fields.LOG_ID, new org.apache.thrift.meta_data.FieldMetaData("logId", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NEXT_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("nextToken", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INTERNAL_USE, new org.apache.thrift.meta_data.FieldMetaData("internalUse", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, InternalUse.class)));
    tmpMap.put(_Fields.RESULT_NUM, new org.apache.thrift.meta_data.FieldMetaData("resultNum", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RED_DOT, new org.apache.thrift.meta_data.FieldMetaData("redDot", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.BANNER_LIST, new org.apache.thrift.meta_data.FieldMetaData("bannerList", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Banner.class))));
    tmpMap.put(_Fields.CARD_LIST, new org.apache.thrift.meta_data.FieldMetaData("cardList", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Card.class))));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PUBLISHER_IDS, new org.apache.thrift.meta_data.FieldMetaData("publisherIds", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.NEED_RETRY, new org.apache.thrift.meta_data.FieldMetaData("needRetry", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.LOG_MAP, new org.apache.thrift.meta_data.FieldMetaData("logMap", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STICKER_GROUP_LIST, new org.apache.thrift.meta_data.FieldMetaData("stickerGroupList", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, StickerGroup.class))));
    tmpMap.put(_Fields.STICKER_LIST, new org.apache.thrift.meta_data.FieldMetaData("stickerList", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Sticker.class))));
    tmpMap.put(_Fields.BADGE, new org.apache.thrift.meta_data.FieldMetaData("badge", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Badge.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Response.class, metaDataMap);
  }

  public Response() {
  }

  public Response(
    java.util.List<Result> resultList,
    java.lang.String nextToken,
    InternalUse internalUse,
    java.util.List<Banner> bannerList,
    java.util.List<Card> cardList,
    java.util.List<java.lang.String> publisherIds)
  {
    this();
    this.resultList = resultList;
    this.nextToken = nextToken;
    this.internalUse = internalUse;
    this.bannerList = bannerList;
    this.cardList = cardList;
    this.publisherIds = publisherIds;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Response(Response other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetResultList()) {
      java.util.List<Result> __this__resultList = new java.util.ArrayList<Result>(other.resultList.size());
      for (Result other_element : other.resultList) {
        __this__resultList.add(new Result(other_element));
      }
      this.resultList = __this__resultList;
    }
    if (other.isSetLogId()) {
      this.logId = other.logId;
    }
    if (other.isSetNextToken()) {
      this.nextToken = other.nextToken;
    }
    if (other.isSetInternalUse()) {
      this.internalUse = new InternalUse(other.internalUse);
    }
    this.resultNum = other.resultNum;
    this.redDot = other.redDot;
    if (other.isSetBannerList()) {
      java.util.List<Banner> __this__bannerList = new java.util.ArrayList<Banner>(other.bannerList.size());
      for (Banner other_element : other.bannerList) {
        __this__bannerList.add(new Banner(other_element));
      }
      this.bannerList = __this__bannerList;
    }
    if (other.isSetCardList()) {
      java.util.List<Card> __this__cardList = new java.util.ArrayList<Card>(other.cardList.size());
      for (Card other_element : other.cardList) {
        __this__cardList.add(new Card(other_element));
      }
      this.cardList = __this__cardList;
    }
    this.status = other.status;
    if (other.isSetPublisherIds()) {
      java.util.List<String> __this__publisherIds = new java.util.ArrayList<String>(other.publisherIds);
      this.publisherIds = __this__publisherIds;
    }
    this.needRetry = other.needRetry;
    if (other.isSetLogMap()) {
      this.logMap = other.logMap;
    }
    if (other.isSetStickerGroupList()) {
      java.util.List<StickerGroup> __this__stickerGroupList = new java.util.ArrayList<StickerGroup>(other.stickerGroupList.size());
      for (StickerGroup other_element : other.stickerGroupList) {
        __this__stickerGroupList.add(new StickerGroup(other_element));
      }
      this.stickerGroupList = __this__stickerGroupList;
    }
    if (other.isSetStickerList()) {
      java.util.List<Sticker> __this__stickerList = new java.util.ArrayList<Sticker>(other.stickerList.size());
      for (Sticker other_element : other.stickerList) {
        __this__stickerList.add(new Sticker(other_element));
      }
      this.stickerList = __this__stickerList;
    }
    if (other.isSetBadge()) {
      this.badge = new Badge(other.badge);
    }
  }

  public Response deepCopy() {
    return new Response(this);
  }

  @Override
  public void clear() {
    this.resultList = null;
    this.logId = null;
    this.nextToken = null;
    this.internalUse = null;
    setResultNumIsSet(false);
    this.resultNum = 0;
    setRedDotIsSet(false);
    this.redDot = false;
    this.bannerList = null;
    this.cardList = null;
    setStatusIsSet(false);
    this.status = 0;
    this.publisherIds = null;
    setNeedRetryIsSet(false);
    this.needRetry = false;
    this.logMap = null;
    this.stickerGroupList = null;
    this.stickerList = null;
    this.badge = null;
  }

  public int getResultListSize() {
    return (this.resultList == null) ? 0 : this.resultList.size();
  }

  public java.util.Iterator<Result> getResultListIterator() {
    return (this.resultList == null) ? null : this.resultList.iterator();
  }

  public void addToResultList(Result elem) {
    if (this.resultList == null) {
      this.resultList = new java.util.ArrayList<Result>();
    }
    this.resultList.add(elem);
  }

  public java.util.List<Result> getResultList() {
    return this.resultList;
  }

  public Response setResultList(java.util.List<Result> resultList) {
    this.resultList = resultList;
    return this;
  }

  public void unsetResultList() {
    this.resultList = null;
  }

  /** Returns true if field resultList is set (has been assigned a value) and false otherwise */
  public boolean isSetResultList() {
    return this.resultList != null;
  }

  public void setResultListIsSet(boolean value) {
    if (!value) {
      this.resultList = null;
    }
  }

  public String getLogId() {
    return this.logId;
  }

  public Response setLogId(String logId) {
    this.logId = logId;
    return this;
  }

  public void unsetLogId() {
    this.logId = null;
  }

  /** Returns true if field logId is set (has been assigned a value) and false otherwise */
  public boolean isSetLogId() {
    return this.logId != null;
  }

  public void setLogIdIsSet(boolean value) {
    if (!value) {
      this.logId = null;
    }
  }

  public String getNextToken() {
    return this.nextToken;
  }

  public Response setNextToken(String nextToken) {
    this.nextToken = nextToken;
    return this;
  }

  public void unsetNextToken() {
    this.nextToken = null;
  }

  /** Returns true if field nextToken is set (has been assigned a value) and false otherwise */
  public boolean isSetNextToken() {
    return this.nextToken != null;
  }

  public void setNextTokenIsSet(boolean value) {
    if (!value) {
      this.nextToken = null;
    }
  }

  public InternalUse getInternalUse() {
    return this.internalUse;
  }

  public Response setInternalUse(InternalUse internalUse) {
    this.internalUse = internalUse;
    return this;
  }

  public void unsetInternalUse() {
    this.internalUse = null;
  }

  /** Returns true if field internalUse is set (has been assigned a value) and false otherwise */
  public boolean isSetInternalUse() {
    return this.internalUse != null;
  }

  public void setInternalUseIsSet(boolean value) {
    if (!value) {
      this.internalUse = null;
    }
  }

  public int getResultNum() {
    return this.resultNum;
  }

  public Response setResultNum(int resultNum) {
    this.resultNum = resultNum;
    setResultNumIsSet(true);
    return this;
  }

  public void unsetResultNum() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RESULTNUM_ISSET_ID);
  }

  /** Returns true if field resultNum is set (has been assigned a value) and false otherwise */
  public boolean isSetResultNum() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RESULTNUM_ISSET_ID);
  }

  public void setResultNumIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RESULTNUM_ISSET_ID, value);
  }

  public boolean isRedDot() {
    return this.redDot;
  }

  public Response setRedDot(boolean redDot) {
    this.redDot = redDot;
    setRedDotIsSet(true);
    return this;
  }

  public void unsetRedDot() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __REDDOT_ISSET_ID);
  }

  /** Returns true if field redDot is set (has been assigned a value) and false otherwise */
  public boolean isSetRedDot() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __REDDOT_ISSET_ID);
  }

  public void setRedDotIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __REDDOT_ISSET_ID, value);
  }

  public int getBannerListSize() {
    return (this.bannerList == null) ? 0 : this.bannerList.size();
  }

  public java.util.Iterator<Banner> getBannerListIterator() {
    return (this.bannerList == null) ? null : this.bannerList.iterator();
  }

  public void addToBannerList(Banner elem) {
    if (this.bannerList == null) {
      this.bannerList = new java.util.ArrayList<Banner>();
    }
    this.bannerList.add(elem);
  }

  public java.util.List<Banner> getBannerList() {
    return this.bannerList;
  }

  public Response setBannerList(java.util.List<Banner> bannerList) {
    this.bannerList = bannerList;
    return this;
  }

  public void unsetBannerList() {
    this.bannerList = null;
  }

  /** Returns true if field bannerList is set (has been assigned a value) and false otherwise */
  public boolean isSetBannerList() {
    return this.bannerList != null;
  }

  public void setBannerListIsSet(boolean value) {
    if (!value) {
      this.bannerList = null;
    }
  }

  public int getCardListSize() {
    return (this.cardList == null) ? 0 : this.cardList.size();
  }

  public java.util.Iterator<Card> getCardListIterator() {
    return (this.cardList == null) ? null : this.cardList.iterator();
  }

  public void addToCardList(Card elem) {
    if (this.cardList == null) {
      this.cardList = new java.util.ArrayList<Card>();
    }
    this.cardList.add(elem);
  }

  public java.util.List<Card> getCardList() {
    return this.cardList;
  }

  public Response setCardList(java.util.List<Card> cardList) {
    this.cardList = cardList;
    return this;
  }

  public void unsetCardList() {
    this.cardList = null;
  }

  /** Returns true if field cardList is set (has been assigned a value) and false otherwise */
  public boolean isSetCardList() {
    return this.cardList != null;
  }

  public void setCardListIsSet(boolean value) {
    if (!value) {
      this.cardList = null;
    }
  }

  public int getStatus() {
    return this.status;
  }

  public Response setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public int getPublisherIdsSize() {
    return (this.publisherIds == null) ? 0 : this.publisherIds.size();
  }

  public java.util.Iterator<String> getPublisherIdsIterator() {
    return (this.publisherIds == null) ? null : this.publisherIds.iterator();
  }

  public void addToPublisherIds(String elem) {
    if (this.publisherIds == null) {
      this.publisherIds = new java.util.ArrayList<String>();
    }
    this.publisherIds.add(elem);
  }

  public java.util.List<String> getPublisherIds() {
    return this.publisherIds;
  }

  public Response setPublisherIds(java.util.List<String> publisherIds) {
    this.publisherIds = publisherIds;
    return this;
  }

  public void unsetPublisherIds() {
    this.publisherIds = null;
  }

  /** Returns true if field publisherIds is set (has been assigned a value) and false otherwise */
  public boolean isSetPublisherIds() {
    return this.publisherIds != null;
  }

  public void setPublisherIdsIsSet(boolean value) {
    if (!value) {
      this.publisherIds = null;
    }
  }

  public boolean isNeedRetry() {
    return this.needRetry;
  }

  public Response setNeedRetry(boolean needRetry) {
    this.needRetry = needRetry;
    setNeedRetryIsSet(true);
    return this;
  }

  public void unsetNeedRetry() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NEEDRETRY_ISSET_ID);
  }

  /** Returns true if field needRetry is set (has been assigned a value) and false otherwise */
  public boolean isSetNeedRetry() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NEEDRETRY_ISSET_ID);
  }

  public void setNeedRetryIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NEEDRETRY_ISSET_ID, value);
  }

  public String getLogMap() {
    return this.logMap;
  }

  public Response setLogMap(String logMap) {
    this.logMap = logMap;
    return this;
  }

  public void unsetLogMap() {
    this.logMap = null;
  }

  /** Returns true if field logMap is set (has been assigned a value) and false otherwise */
  public boolean isSetLogMap() {
    return this.logMap != null;
  }

  public void setLogMapIsSet(boolean value) {
    if (!value) {
      this.logMap = null;
    }
  }

  public int getStickerGroupListSize() {
    return (this.stickerGroupList == null) ? 0 : this.stickerGroupList.size();
  }

  public java.util.Iterator<StickerGroup> getStickerGroupListIterator() {
    return (this.stickerGroupList == null) ? null : this.stickerGroupList.iterator();
  }

  public void addToStickerGroupList(StickerGroup elem) {
    if (this.stickerGroupList == null) {
      this.stickerGroupList = new java.util.ArrayList<StickerGroup>();
    }
    this.stickerGroupList.add(elem);
  }

  public java.util.List<StickerGroup> getStickerGroupList() {
    return this.stickerGroupList;
  }

  public Response setStickerGroupList(java.util.List<StickerGroup> stickerGroupList) {
    this.stickerGroupList = stickerGroupList;
    return this;
  }

  public void unsetStickerGroupList() {
    this.stickerGroupList = null;
  }

  /** Returns true if field stickerGroupList is set (has been assigned a value) and false otherwise */
  public boolean isSetStickerGroupList() {
    return this.stickerGroupList != null;
  }

  public void setStickerGroupListIsSet(boolean value) {
    if (!value) {
      this.stickerGroupList = null;
    }
  }

  public int getStickerListSize() {
    return (this.stickerList == null) ? 0 : this.stickerList.size();
  }

  public java.util.Iterator<Sticker> getStickerListIterator() {
    return (this.stickerList == null) ? null : this.stickerList.iterator();
  }

  public void addToStickerList(Sticker elem) {
    if (this.stickerList == null) {
      this.stickerList = new java.util.ArrayList<Sticker>();
    }
    this.stickerList.add(elem);
  }

  public java.util.List<Sticker> getStickerList() {
    return this.stickerList;
  }

  public Response setStickerList(java.util.List<Sticker> stickerList) {
    this.stickerList = stickerList;
    return this;
  }

  public void unsetStickerList() {
    this.stickerList = null;
  }

  /** Returns true if field stickerList is set (has been assigned a value) and false otherwise */
  public boolean isSetStickerList() {
    return this.stickerList != null;
  }

  public void setStickerListIsSet(boolean value) {
    if (!value) {
      this.stickerList = null;
    }
  }

  public Badge getBadge() {
    return this.badge;
  }

  public Response setBadge(Badge badge) {
    this.badge = badge;
    return this;
  }

  public void unsetBadge() {
    this.badge = null;
  }

  /** Returns true if field badge is set (has been assigned a value) and false otherwise */
  public boolean isSetBadge() {
    return this.badge != null;
  }

  public void setBadgeIsSet(boolean value) {
    if (!value) {
      this.badge = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case RESULT_LIST:
      if (value == null) {
        unsetResultList();
      } else {
        setResultList((java.util.List<Result>)value);
      }
      break;

    case LOG_ID:
      if (value == null) {
        unsetLogId();
      } else {
        setLogId((java.lang.String)value);
      }
      break;

    case NEXT_TOKEN:
      if (value == null) {
        unsetNextToken();
      } else {
        setNextToken((java.lang.String)value);
      }
      break;

    case INTERNAL_USE:
      if (value == null) {
        unsetInternalUse();
      } else {
        setInternalUse((InternalUse)value);
      }
      break;

    case RESULT_NUM:
      if (value == null) {
        unsetResultNum();
      } else {
        setResultNum((java.lang.Integer)value);
      }
      break;

    case RED_DOT:
      if (value == null) {
        unsetRedDot();
      } else {
        setRedDot((java.lang.Boolean)value);
      }
      break;

    case BANNER_LIST:
      if (value == null) {
        unsetBannerList();
      } else {
        setBannerList((java.util.List<Banner>)value);
      }
      break;

    case CARD_LIST:
      if (value == null) {
        unsetCardList();
      } else {
        setCardList((java.util.List<Card>)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((java.lang.Integer)value);
      }
      break;

    case PUBLISHER_IDS:
      if (value == null) {
        unsetPublisherIds();
      } else {
        setPublisherIds((java.util.List<java.lang.String>)value);
      }
      break;

    case NEED_RETRY:
      if (value == null) {
        unsetNeedRetry();
      } else {
        setNeedRetry((java.lang.Boolean)value);
      }
      break;

    case LOG_MAP:
      if (value == null) {
        unsetLogMap();
      } else {
        setLogMap((java.lang.String)value);
      }
      break;

    case STICKER_GROUP_LIST:
      if (value == null) {
        unsetStickerGroupList();
      } else {
        setStickerGroupList((java.util.List<StickerGroup>)value);
      }
      break;

    case STICKER_LIST:
      if (value == null) {
        unsetStickerList();
      } else {
        setStickerList((java.util.List<Sticker>)value);
      }
      break;

    case BADGE:
      if (value == null) {
        unsetBadge();
      } else {
        setBadge((Badge)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case RESULT_LIST:
      return getResultList();

    case LOG_ID:
      return getLogId();

    case NEXT_TOKEN:
      return getNextToken();

    case INTERNAL_USE:
      return getInternalUse();

    case RESULT_NUM:
      return getResultNum();

    case RED_DOT:
      return isRedDot();

    case BANNER_LIST:
      return getBannerList();

    case CARD_LIST:
      return getCardList();

    case STATUS:
      return getStatus();

    case PUBLISHER_IDS:
      return getPublisherIds();

    case NEED_RETRY:
      return isNeedRetry();

    case LOG_MAP:
      return getLogMap();

    case STICKER_GROUP_LIST:
      return getStickerGroupList();

    case STICKER_LIST:
      return getStickerList();

    case BADGE:
      return getBadge();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case RESULT_LIST:
      return isSetResultList();
    case LOG_ID:
      return isSetLogId();
    case NEXT_TOKEN:
      return isSetNextToken();
    case INTERNAL_USE:
      return isSetInternalUse();
    case RESULT_NUM:
      return isSetResultNum();
    case RED_DOT:
      return isSetRedDot();
    case BANNER_LIST:
      return isSetBannerList();
    case CARD_LIST:
      return isSetCardList();
    case STATUS:
      return isSetStatus();
    case PUBLISHER_IDS:
      return isSetPublisherIds();
    case NEED_RETRY:
      return isSetNeedRetry();
    case LOG_MAP:
      return isSetLogMap();
    case STICKER_GROUP_LIST:
      return isSetStickerGroupList();
    case STICKER_LIST:
      return isSetStickerList();
    case BADGE:
      return isSetBadge();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Response)
      return this.equals((Response)that);
    return false;
  }

  public boolean equals(Response that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_resultList = true && this.isSetResultList();
    boolean that_present_resultList = true && that.isSetResultList();
    if (this_present_resultList || that_present_resultList) {
      if (!(this_present_resultList && that_present_resultList))
        return false;
      if (!this.resultList.equals(that.resultList))
        return false;
    }

    boolean this_present_logId = true && this.isSetLogId();
    boolean that_present_logId = true && that.isSetLogId();
    if (this_present_logId || that_present_logId) {
      if (!(this_present_logId && that_present_logId))
        return false;
      if (!this.logId.equals(that.logId))
        return false;
    }

    boolean this_present_nextToken = true && this.isSetNextToken();
    boolean that_present_nextToken = true && that.isSetNextToken();
    if (this_present_nextToken || that_present_nextToken) {
      if (!(this_present_nextToken && that_present_nextToken))
        return false;
      if (!this.nextToken.equals(that.nextToken))
        return false;
    }

    boolean this_present_internalUse = true && this.isSetInternalUse();
    boolean that_present_internalUse = true && that.isSetInternalUse();
    if (this_present_internalUse || that_present_internalUse) {
      if (!(this_present_internalUse && that_present_internalUse))
        return false;
      if (!this.internalUse.equals(that.internalUse))
        return false;
    }

    boolean this_present_resultNum = true && this.isSetResultNum();
    boolean that_present_resultNum = true && that.isSetResultNum();
    if (this_present_resultNum || that_present_resultNum) {
      if (!(this_present_resultNum && that_present_resultNum))
        return false;
      if (this.resultNum != that.resultNum)
        return false;
    }

    boolean this_present_redDot = true && this.isSetRedDot();
    boolean that_present_redDot = true && that.isSetRedDot();
    if (this_present_redDot || that_present_redDot) {
      if (!(this_present_redDot && that_present_redDot))
        return false;
      if (this.redDot != that.redDot)
        return false;
    }

    boolean this_present_bannerList = true && this.isSetBannerList();
    boolean that_present_bannerList = true && that.isSetBannerList();
    if (this_present_bannerList || that_present_bannerList) {
      if (!(this_present_bannerList && that_present_bannerList))
        return false;
      if (!this.bannerList.equals(that.bannerList))
        return false;
    }

    boolean this_present_cardList = true && this.isSetCardList();
    boolean that_present_cardList = true && that.isSetCardList();
    if (this_present_cardList || that_present_cardList) {
      if (!(this_present_cardList && that_present_cardList))
        return false;
      if (!this.cardList.equals(that.cardList))
        return false;
    }

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_publisherIds = true && this.isSetPublisherIds();
    boolean that_present_publisherIds = true && that.isSetPublisherIds();
    if (this_present_publisherIds || that_present_publisherIds) {
      if (!(this_present_publisherIds && that_present_publisherIds))
        return false;
      if (!this.publisherIds.equals(that.publisherIds))
        return false;
    }

    boolean this_present_needRetry = true && this.isSetNeedRetry();
    boolean that_present_needRetry = true && that.isSetNeedRetry();
    if (this_present_needRetry || that_present_needRetry) {
      if (!(this_present_needRetry && that_present_needRetry))
        return false;
      if (this.needRetry != that.needRetry)
        return false;
    }

    boolean this_present_logMap = true && this.isSetLogMap();
    boolean that_present_logMap = true && that.isSetLogMap();
    if (this_present_logMap || that_present_logMap) {
      if (!(this_present_logMap && that_present_logMap))
        return false;
      if (!this.logMap.equals(that.logMap))
        return false;
    }

    boolean this_present_stickerGroupList = true && this.isSetStickerGroupList();
    boolean that_present_stickerGroupList = true && that.isSetStickerGroupList();
    if (this_present_stickerGroupList || that_present_stickerGroupList) {
      if (!(this_present_stickerGroupList && that_present_stickerGroupList))
        return false;
      if (!this.stickerGroupList.equals(that.stickerGroupList))
        return false;
    }

    boolean this_present_stickerList = true && this.isSetStickerList();
    boolean that_present_stickerList = true && that.isSetStickerList();
    if (this_present_stickerList || that_present_stickerList) {
      if (!(this_present_stickerList && that_present_stickerList))
        return false;
      if (!this.stickerList.equals(that.stickerList))
        return false;
    }

    boolean this_present_badge = true && this.isSetBadge();
    boolean that_present_badge = true && that.isSetBadge();
    if (this_present_badge || that_present_badge) {
      if (!(this_present_badge && that_present_badge))
        return false;
      if (!this.badge.equals(that.badge))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetResultList()) ? 131071 : 524287);
    if (isSetResultList())
      hashCode = hashCode * 8191 + resultList.hashCode();

    hashCode = hashCode * 8191 + ((isSetLogId()) ? 131071 : 524287);
    if (isSetLogId())
      hashCode = hashCode * 8191 + logId.hashCode();

    hashCode = hashCode * 8191 + ((isSetNextToken()) ? 131071 : 524287);
    if (isSetNextToken())
      hashCode = hashCode * 8191 + nextToken.hashCode();

    hashCode = hashCode * 8191 + ((isSetInternalUse()) ? 131071 : 524287);
    if (isSetInternalUse())
      hashCode = hashCode * 8191 + internalUse.hashCode();

    hashCode = hashCode * 8191 + ((isSetResultNum()) ? 131071 : 524287);
    if (isSetResultNum())
      hashCode = hashCode * 8191 + resultNum;

    hashCode = hashCode * 8191 + ((isSetRedDot()) ? 131071 : 524287);
    if (isSetRedDot())
      hashCode = hashCode * 8191 + ((redDot) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetBannerList()) ? 131071 : 524287);
    if (isSetBannerList())
      hashCode = hashCode * 8191 + bannerList.hashCode();

    hashCode = hashCode * 8191 + ((isSetCardList()) ? 131071 : 524287);
    if (isSetCardList())
      hashCode = hashCode * 8191 + cardList.hashCode();

    hashCode = hashCode * 8191 + ((isSetStatus()) ? 131071 : 524287);
    if (isSetStatus())
      hashCode = hashCode * 8191 + status;

    hashCode = hashCode * 8191 + ((isSetPublisherIds()) ? 131071 : 524287);
    if (isSetPublisherIds())
      hashCode = hashCode * 8191 + publisherIds.hashCode();

    hashCode = hashCode * 8191 + ((isSetNeedRetry()) ? 131071 : 524287);
    if (isSetNeedRetry())
      hashCode = hashCode * 8191 + ((needRetry) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetLogMap()) ? 131071 : 524287);
    if (isSetLogMap())
      hashCode = hashCode * 8191 + logMap.hashCode();

    hashCode = hashCode * 8191 + ((isSetStickerGroupList()) ? 131071 : 524287);
    if (isSetStickerGroupList())
      hashCode = hashCode * 8191 + stickerGroupList.hashCode();

    hashCode = hashCode * 8191 + ((isSetStickerList()) ? 131071 : 524287);
    if (isSetStickerList())
      hashCode = hashCode * 8191 + stickerList.hashCode();

    hashCode = hashCode * 8191 + ((isSetBadge()) ? 131071 : 524287);
    if (isSetBadge())
      hashCode = hashCode * 8191 + badge.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(Response other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetResultList()).compareTo(other.isSetResultList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResultList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resultList, other.resultList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLogId()).compareTo(other.isSetLogId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLogId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.logId, other.logId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNextToken()).compareTo(other.isSetNextToken());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNextToken()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nextToken, other.nextToken);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInternalUse()).compareTo(other.isSetInternalUse());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInternalUse()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.internalUse, other.internalUse);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResultNum()).compareTo(other.isSetResultNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResultNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resultNum, other.resultNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRedDot()).compareTo(other.isSetRedDot());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRedDot()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.redDot, other.redDot);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBannerList()).compareTo(other.isSetBannerList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBannerList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bannerList, other.bannerList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCardList()).compareTo(other.isSetCardList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCardList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cardList, other.cardList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPublisherIds()).compareTo(other.isSetPublisherIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPublisherIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.publisherIds, other.publisherIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNeedRetry()).compareTo(other.isSetNeedRetry());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNeedRetry()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.needRetry, other.needRetry);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLogMap()).compareTo(other.isSetLogMap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLogMap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.logMap, other.logMap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStickerGroupList()).compareTo(other.isSetStickerGroupList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStickerGroupList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stickerGroupList, other.stickerGroupList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStickerList()).compareTo(other.isSetStickerList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStickerList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stickerList, other.stickerList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetBadge()).compareTo(other.isSetBadge());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBadge()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.badge, other.badge);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Response(");
    boolean first = true;

    sb.append("resultList:");
    if (this.resultList == null) {
      sb.append("null");
    } else {
      sb.append(this.resultList);
    }
    first = false;
    if (isSetLogId()) {
      if (!first) sb.append(", ");
      sb.append("logId:");
      if (this.logId == null) {
        sb.append("null");
      } else {
        sb.append(this.logId);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("nextToken:");
    if (this.nextToken == null) {
      sb.append("null");
    } else {
      sb.append(this.nextToken);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("internalUse:");
    if (this.internalUse == null) {
      sb.append("null");
    } else {
      sb.append(this.internalUse);
    }
    first = false;
    if (isSetResultNum()) {
      if (!first) sb.append(", ");
      sb.append("resultNum:");
      sb.append(this.resultNum);
      first = false;
    }
    if (isSetRedDot()) {
      if (!first) sb.append(", ");
      sb.append("redDot:");
      sb.append(this.redDot);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("bannerList:");
    if (this.bannerList == null) {
      sb.append("null");
    } else {
      sb.append(this.bannerList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cardList:");
    if (this.cardList == null) {
      sb.append("null");
    } else {
      sb.append(this.cardList);
    }
    first = false;
    if (isSetStatus()) {
      if (!first) sb.append(", ");
      sb.append("status:");
      sb.append(this.status);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("publisherIds:");
    if (this.publisherIds == null) {
      sb.append("null");
    } else {
      sb.append(this.publisherIds);
    }
    first = false;
    if (isSetNeedRetry()) {
      if (!first) sb.append(", ");
      sb.append("needRetry:");
      sb.append(this.needRetry);
      first = false;
    }
    if (isSetLogMap()) {
      if (!first) sb.append(", ");
      sb.append("logMap:");
      if (this.logMap == null) {
        sb.append("null");
      } else {
        sb.append(this.logMap);
      }
      first = false;
    }
    if (isSetStickerGroupList()) {
      if (!first) sb.append(", ");
      sb.append("stickerGroupList:");
      if (this.stickerGroupList == null) {
        sb.append("null");
      } else {
        sb.append(this.stickerGroupList);
      }
      first = false;
    }
    if (isSetStickerList()) {
      if (!first) sb.append(", ");
      sb.append("stickerList:");
      if (this.stickerList == null) {
        sb.append("null");
      } else {
        sb.append(this.stickerList);
      }
      first = false;
    }
    if (isSetBadge()) {
      if (!first) sb.append(", ");
      sb.append("badge:");
      if (this.badge == null) {
        sb.append("null");
      } else {
        sb.append(this.badge);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (internalUse != null) {
      internalUse.validate();
    }
    if (badge != null) {
      badge.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ResponseStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ResponseStandardScheme getScheme() {
      return new ResponseStandardScheme();
    }
  }

  private static class ResponseStandardScheme extends org.apache.thrift.scheme.StandardScheme<Response> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Response struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
          break;
        }
        switch (schemeField.id) {
          case 1: // RESULT_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list104 = iprot.readListBegin();
                struct.resultList = new java.util.ArrayList<Result>(_list104.size);
                Result _elem105;
                for (int _i106 = 0; _i106 < _list104.size; ++_i106)
                {
                  _elem105 = new Result();
                  _elem105.read(iprot);
                  struct.resultList.add(_elem105);
                }
                iprot.readListEnd();
              }
              struct.setResultListIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // LOG_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.logId = iprot.readString();
              struct.setLogIdIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NEXT_TOKEN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.nextToken = iprot.readString();
              struct.setNextTokenIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // INTERNAL_USE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.internalUse = new InternalUse();
              struct.internalUse.read(iprot);
              struct.setInternalUseIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // RESULT_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.resultNum = iprot.readI32();
              struct.setResultNumIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // RED_DOT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.redDot = iprot.readBool();
              struct.setRedDotIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // BANNER_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list107 = iprot.readListBegin();
                struct.bannerList = new java.util.ArrayList<Banner>(_list107.size);
                Banner _elem108;
                for (int _i109 = 0; _i109 < _list107.size; ++_i109)
                {
                  _elem108 = new Banner();
                  _elem108.read(iprot);
                  struct.bannerList.add(_elem108);
                }
                iprot.readListEnd();
              }
              struct.setBannerListIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CARD_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list110 = iprot.readListBegin();
                struct.cardList = new java.util.ArrayList<Card>(_list110.size);
                Card _elem111;
                for (int _i112 = 0; _i112 < _list110.size; ++_i112)
                {
                  _elem111 = new Card();
                  _elem111.read(iprot);
                  struct.cardList.add(_elem111);
                }
                iprot.readListEnd();
              }
              struct.setCardListIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // PUBLISHER_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list113 = iprot.readListBegin();
                struct.publisherIds = new java.util.ArrayList<String>(_list113.size);
                String _elem114;
                for (int _i115 = 0; _i115 < _list113.size; ++_i115)
                {
                  _elem114 = iprot.readString();
                  struct.publisherIds.add(_elem114);
                }
                iprot.readListEnd();
              }
              struct.setPublisherIdsIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // NEED_RETRY
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.needRetry = iprot.readBool();
              struct.setNeedRetryIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // LOG_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.logMap = iprot.readString();
              struct.setLogMapIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // STICKER_GROUP_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list116 = iprot.readListBegin();
                struct.stickerGroupList = new java.util.ArrayList<StickerGroup>(_list116.size);
                StickerGroup _elem117;
                for (int _i118 = 0; _i118 < _list116.size; ++_i118)
                {
                  _elem117 = new StickerGroup();
                  _elem117.read(iprot);
                  struct.stickerGroupList.add(_elem117);
                }
                iprot.readListEnd();
              }
              struct.setStickerGroupListIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // STICKER_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list119 = iprot.readListBegin();
                struct.stickerList = new java.util.ArrayList<Sticker>(_list119.size);
                Sticker _elem120;
                for (int _i121 = 0; _i121 < _list119.size; ++_i121)
                {
                  _elem120 = new Sticker();
                  _elem120.read(iprot);
                  struct.stickerList.add(_elem120);
                }
                iprot.readListEnd();
              }
              struct.setStickerListIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // BADGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.badge = new Badge();
              struct.badge.read(iprot);
              struct.setBadgeIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Response struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.resultList != null) {
        oprot.writeFieldBegin(RESULT_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.resultList.size()));
          for (Result _iter122 : struct.resultList)
          {
            _iter122.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.logId != null) {
        if (struct.isSetLogId()) {
          oprot.writeFieldBegin(LOG_ID_FIELD_DESC);
          oprot.writeString(struct.logId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.nextToken != null) {
        oprot.writeFieldBegin(NEXT_TOKEN_FIELD_DESC);
        oprot.writeString(struct.nextToken);
        oprot.writeFieldEnd();
      }
      if (struct.internalUse != null) {
        oprot.writeFieldBegin(INTERNAL_USE_FIELD_DESC);
        struct.internalUse.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.isSetResultNum()) {
        oprot.writeFieldBegin(RESULT_NUM_FIELD_DESC);
        oprot.writeI32(struct.resultNum);
        oprot.writeFieldEnd();
      }
      if (struct.isSetRedDot()) {
        oprot.writeFieldBegin(RED_DOT_FIELD_DESC);
        oprot.writeBool(struct.redDot);
        oprot.writeFieldEnd();
      }
      if (struct.bannerList != null) {
        oprot.writeFieldBegin(BANNER_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.bannerList.size()));
          for (Banner _iter123 : struct.bannerList)
          {
            _iter123.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.cardList != null) {
        oprot.writeFieldBegin(CARD_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.cardList.size()));
          for (Card _iter124 : struct.cardList)
          {
            _iter124.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.isSetStatus()) {
        oprot.writeFieldBegin(STATUS_FIELD_DESC);
        oprot.writeI32(struct.status);
        oprot.writeFieldEnd();
      }
      if (struct.publisherIds != null) {
        oprot.writeFieldBegin(PUBLISHER_IDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.publisherIds.size()));
          for (String _iter125 : struct.publisherIds)
          {
            oprot.writeString(_iter125);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.isSetNeedRetry()) {
        oprot.writeFieldBegin(NEED_RETRY_FIELD_DESC);
        oprot.writeBool(struct.needRetry);
        oprot.writeFieldEnd();
      }
      if (struct.logMap != null) {
        if (struct.isSetLogMap()) {
          oprot.writeFieldBegin(LOG_MAP_FIELD_DESC);
          oprot.writeString(struct.logMap);
          oprot.writeFieldEnd();
        }
      }
      if (struct.stickerGroupList != null) {
        if (struct.isSetStickerGroupList()) {
          oprot.writeFieldBegin(STICKER_GROUP_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.stickerGroupList.size()));
            for (StickerGroup _iter126 : struct.stickerGroupList)
            {
              _iter126.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.stickerList != null) {
        if (struct.isSetStickerList()) {
          oprot.writeFieldBegin(STICKER_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.stickerList.size()));
            for (Sticker _iter127 : struct.stickerList)
            {
              _iter127.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.badge != null) {
        if (struct.isSetBadge()) {
          oprot.writeFieldBegin(BADGE_FIELD_DESC);
          struct.badge.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ResponseTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ResponseTupleScheme getScheme() {
      return new ResponseTupleScheme();
    }
  }

  private static class ResponseTupleScheme extends org.apache.thrift.scheme.TupleScheme<Response> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Response struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetResultList()) {
        optionals.set(0);
      }
      if (struct.isSetLogId()) {
        optionals.set(1);
      }
      if (struct.isSetNextToken()) {
        optionals.set(2);
      }
      if (struct.isSetInternalUse()) {
        optionals.set(3);
      }
      if (struct.isSetResultNum()) {
        optionals.set(4);
      }
      if (struct.isSetRedDot()) {
        optionals.set(5);
      }
      if (struct.isSetBannerList()) {
        optionals.set(6);
      }
      if (struct.isSetCardList()) {
        optionals.set(7);
      }
      if (struct.isSetStatus()) {
        optionals.set(8);
      }
      if (struct.isSetPublisherIds()) {
        optionals.set(9);
      }
      if (struct.isSetNeedRetry()) {
        optionals.set(10);
      }
      if (struct.isSetLogMap()) {
        optionals.set(11);
      }
      if (struct.isSetStickerGroupList()) {
        optionals.set(12);
      }
      if (struct.isSetStickerList()) {
        optionals.set(13);
      }
      if (struct.isSetBadge()) {
        optionals.set(14);
      }
      oprot.writeBitSet(optionals, 15);
      if (struct.isSetResultList()) {
        {
          oprot.writeI32(struct.resultList.size());
          for (Result _iter128 : struct.resultList)
          {
            _iter128.write(oprot);
          }
        }
      }
      if (struct.isSetLogId()) {
        oprot.writeString(struct.logId);
      }
      if (struct.isSetNextToken()) {
        oprot.writeString(struct.nextToken);
      }
      if (struct.isSetInternalUse()) {
        struct.internalUse.write(oprot);
      }
      if (struct.isSetResultNum()) {
        oprot.writeI32(struct.resultNum);
      }
      if (struct.isSetRedDot()) {
        oprot.writeBool(struct.redDot);
      }
      if (struct.isSetBannerList()) {
        {
          oprot.writeI32(struct.bannerList.size());
          for (Banner _iter129 : struct.bannerList)
          {
            _iter129.write(oprot);
          }
        }
      }
      if (struct.isSetCardList()) {
        {
          oprot.writeI32(struct.cardList.size());
          for (Card _iter130 : struct.cardList)
          {
            _iter130.write(oprot);
          }
        }
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
      if (struct.isSetPublisherIds()) {
        {
          oprot.writeI32(struct.publisherIds.size());
          for (String _iter131 : struct.publisherIds)
          {
            oprot.writeString(_iter131);
          }
        }
      }
      if (struct.isSetNeedRetry()) {
        oprot.writeBool(struct.needRetry);
      }
      if (struct.isSetLogMap()) {
        oprot.writeString(struct.logMap);
      }
      if (struct.isSetStickerGroupList()) {
        {
          oprot.writeI32(struct.stickerGroupList.size());
          for (StickerGroup _iter132 : struct.stickerGroupList)
          {
            _iter132.write(oprot);
          }
        }
      }
      if (struct.isSetStickerList()) {
        {
          oprot.writeI32(struct.stickerList.size());
          for (Sticker _iter133 : struct.stickerList)
          {
            _iter133.write(oprot);
          }
        }
      }
      if (struct.isSetBadge()) {
        struct.badge.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Response struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(15);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list134 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.resultList = new java.util.ArrayList<Result>(_list134.size);
          Result _elem135;
          for (int _i136 = 0; _i136 < _list134.size; ++_i136)
          {
            _elem135 = new Result();
            _elem135.read(iprot);
            struct.resultList.add(_elem135);
          }
        }
        struct.setResultListIsSet(true);
      }
      if (incoming.get(1)) {
        struct.logId = iprot.readString();
        struct.setLogIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.nextToken = iprot.readString();
        struct.setNextTokenIsSet(true);
      }
      if (incoming.get(3)) {
        struct.internalUse = new InternalUse();
        struct.internalUse.read(iprot);
        struct.setInternalUseIsSet(true);
      }
      if (incoming.get(4)) {
        struct.resultNum = iprot.readI32();
        struct.setResultNumIsSet(true);
      }
      if (incoming.get(5)) {
        struct.redDot = iprot.readBool();
        struct.setRedDotIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TList _list137 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.bannerList = new java.util.ArrayList<Banner>(_list137.size);
          Banner _elem138;
          for (int _i139 = 0; _i139 < _list137.size; ++_i139)
          {
            _elem138 = new Banner();
            _elem138.read(iprot);
            struct.bannerList.add(_elem138);
          }
        }
        struct.setBannerListIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TList _list140 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.cardList = new java.util.ArrayList<Card>(_list140.size);
          Card _elem141;
          for (int _i142 = 0; _i142 < _list140.size; ++_i142)
          {
            _elem141 = new Card();
            _elem141.read(iprot);
            struct.cardList.add(_elem141);
          }
        }
        struct.setCardListIsSet(true);
      }
      if (incoming.get(8)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(9)) {
        {
          org.apache.thrift.protocol.TList _list143 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.publisherIds = new java.util.ArrayList<String>(_list143.size);
          String _elem144;
          for (int _i145 = 0; _i145 < _list143.size; ++_i145)
          {
            _elem144 = iprot.readString();
            struct.publisherIds.add(_elem144);
          }
        }
        struct.setPublisherIdsIsSet(true);
      }
      if (incoming.get(10)) {
        struct.needRetry = iprot.readBool();
        struct.setNeedRetryIsSet(true);
      }
      if (incoming.get(11)) {
        struct.logMap = iprot.readString();
        struct.setLogMapIsSet(true);
      }
      if (incoming.get(12)) {
        {
          org.apache.thrift.protocol.TList _list146 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.stickerGroupList = new java.util.ArrayList<StickerGroup>(_list146.size);
          StickerGroup _elem147;
          for (int _i148 = 0; _i148 < _list146.size; ++_i148)
          {
            _elem147 = new StickerGroup();
            _elem147.read(iprot);
            struct.stickerGroupList.add(_elem147);
          }
        }
        struct.setStickerGroupListIsSet(true);
      }
      if (incoming.get(13)) {
        {
          org.apache.thrift.protocol.TList _list149 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.stickerList = new java.util.ArrayList<Sticker>(_list149.size);
          Sticker _elem150;
          for (int _i151 = 0; _i151 < _list149.size; ++_i151)
          {
            _elem150 = new Sticker();
            _elem150.read(iprot);
            struct.stickerList.add(_elem150);
          }
        }
        struct.setStickerListIsSet(true);
      }
      if (incoming.get(14)) {
        struct.badge = new Badge();
        struct.badge.read(iprot);
        struct.setBadgeIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

