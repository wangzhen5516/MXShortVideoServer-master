// Autogenerated by Thrift Compiler (0.11.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package recommend

import (
	"bytes"
	"reflect"
	"context"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

// Attributes:
//  - ResourceType
//  - ID
//  - Name
//  - Icon
type AdditionalInfo struct {
  ResourceType string `thrift:"resourceType,1" db:"resourceType" json:"resourceType"`
  ID string `thrift:"id,2" db:"id" json:"id"`
  Name *string `thrift:"name,3" db:"name" json:"name,omitempty"`
  Icon *string `thrift:"icon,4" db:"icon" json:"icon,omitempty"`
}

func NewAdditionalInfo() *AdditionalInfo {
  return &AdditionalInfo{}
}


func (p *AdditionalInfo) GetResourceType() string {
  return p.ResourceType
}

func (p *AdditionalInfo) GetID() string {
  return p.ID
}
var AdditionalInfo_Name_DEFAULT string
func (p *AdditionalInfo) GetName() string {
  if !p.IsSetName() {
    return AdditionalInfo_Name_DEFAULT
  }
return *p.Name
}
var AdditionalInfo_Icon_DEFAULT string
func (p *AdditionalInfo) GetIcon() string {
  if !p.IsSetIcon() {
    return AdditionalInfo_Icon_DEFAULT
  }
return *p.Icon
}
func (p *AdditionalInfo) IsSetName() bool {
  return p.Name != nil
}

func (p *AdditionalInfo) IsSetIcon() bool {
  return p.Icon != nil
}

func (p *AdditionalInfo) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdditionalInfo)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ResourceType = v
}
  return nil
}

func (p *AdditionalInfo)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *AdditionalInfo)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Name = &v
}
  return nil
}

func (p *AdditionalInfo)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Icon = &v
}
  return nil
}

func (p *AdditionalInfo) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("AdditionalInfo"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdditionalInfo) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("resourceType", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:resourceType: ", p), err) }
  if err := oprot.WriteString(string(p.ResourceType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.resourceType (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:resourceType: ", p), err) }
  return err
}

func (p *AdditionalInfo) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:id: ", p), err) }
  if err := oprot.WriteString(string(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:id: ", p), err) }
  return err
}

func (p *AdditionalInfo) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetName() {
    if err := oprot.WriteFieldBegin("name", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:name: ", p), err) }
    if err := oprot.WriteString(string(*p.Name)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.name (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:name: ", p), err) }
  }
  return err
}

func (p *AdditionalInfo) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetIcon() {
    if err := oprot.WriteFieldBegin("icon", thrift.STRING, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:icon: ", p), err) }
    if err := oprot.WriteString(string(*p.Icon)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.icon (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:icon: ", p), err) }
  }
  return err
}

func (p *AdditionalInfo) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AdditionalInfo(%+v)", *p)
}

// Attributes:
//  - FileName
//  - Title
//  - Duration
type LocalFileInfo struct {
  FileName string `thrift:"fileName,1" db:"fileName" json:"fileName"`
  Title *string `thrift:"title,2" db:"title" json:"title,omitempty"`
  Duration *int32 `thrift:"duration,3" db:"duration" json:"duration,omitempty"`
}

func NewLocalFileInfo() *LocalFileInfo {
  return &LocalFileInfo{}
}


func (p *LocalFileInfo) GetFileName() string {
  return p.FileName
}
var LocalFileInfo_Title_DEFAULT string
func (p *LocalFileInfo) GetTitle() string {
  if !p.IsSetTitle() {
    return LocalFileInfo_Title_DEFAULT
  }
return *p.Title
}
var LocalFileInfo_Duration_DEFAULT int32
func (p *LocalFileInfo) GetDuration() int32 {
  if !p.IsSetDuration() {
    return LocalFileInfo_Duration_DEFAULT
  }
return *p.Duration
}
func (p *LocalFileInfo) IsSetTitle() bool {
  return p.Title != nil
}

func (p *LocalFileInfo) IsSetDuration() bool {
  return p.Duration != nil
}

func (p *LocalFileInfo) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *LocalFileInfo)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.FileName = v
}
  return nil
}

func (p *LocalFileInfo)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Title = &v
}
  return nil
}

func (p *LocalFileInfo)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Duration = &v
}
  return nil
}

func (p *LocalFileInfo) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("LocalFileInfo"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *LocalFileInfo) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("fileName", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:fileName: ", p), err) }
  if err := oprot.WriteString(string(p.FileName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fileName (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:fileName: ", p), err) }
  return err
}

func (p *LocalFileInfo) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetTitle() {
    if err := oprot.WriteFieldBegin("title", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:title: ", p), err) }
    if err := oprot.WriteString(string(*p.Title)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.title (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:title: ", p), err) }
  }
  return err
}

func (p *LocalFileInfo) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetDuration() {
    if err := oprot.WriteFieldBegin("duration", thrift.I32, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:duration: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Duration)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.duration (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:duration: ", p), err) }
  }
  return err
}

func (p *LocalFileInfo) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("LocalFileInfo(%+v)", *p)
}

// Attributes:
//  - InterfaceName
//  - UserId
//  - CardId
//  - Num
//  - FinalId
//  - Type
//  - ResourceId
//  - ResourceType
//  - PlatformId
//  - TabId
//  - InterfaceNewName
//  - LocalFileInfo
//  - Country
//  - Area
//  - Language
//  - NetworkStatus
//  - DeviceInfo
//  - FilterId
//  - EntranceType
//  - LanguageList
//  - NextToken
//  - SearchContent
//  - GenresList
//  - LogId
//  - ServiceName
//  - EnvOption
//  - TimeSign
type Request struct {
  InterfaceName string `thrift:"interfaceName,1" db:"interfaceName" json:"interfaceName"`
  UserId string `thrift:"userId,2" db:"userId" json:"userId"`
  CardId string `thrift:"cardId,3" db:"cardId" json:"cardId"`
  Num int32 `thrift:"num,4" db:"num" json:"num"`
  FinalId string `thrift:"finalId,5" db:"finalId" json:"finalId"`
  Type int8 `thrift:"type,6" db:"type" json:"type"`
  ResourceId string `thrift:"resourceId,7" db:"resourceId" json:"resourceId"`
  ResourceType string `thrift:"resourceType,8" db:"resourceType" json:"resourceType"`
  PlatformId string `thrift:"platformId,9" db:"platformId" json:"platformId"`
  TabId string `thrift:"tabId,10" db:"tabId" json:"tabId"`
  InterfaceNewName *string `thrift:"interfaceNewName,11" db:"interfaceNewName" json:"interfaceNewName,omitempty"`
  LocalFileInfo *LocalFileInfo `thrift:"localFileInfo,12" db:"localFileInfo" json:"localFileInfo,omitempty"`
  Country *string `thrift:"country,13" db:"country" json:"country,omitempty"`
  Area *string `thrift:"area,14" db:"area" json:"area,omitempty"`
  Language *string `thrift:"language,15" db:"language" json:"language,omitempty"`
  NetworkStatus *string `thrift:"networkStatus,16" db:"networkStatus" json:"networkStatus,omitempty"`
  DeviceInfo *string `thrift:"deviceInfo,17" db:"deviceInfo" json:"deviceInfo,omitempty"`
  FilterId *string `thrift:"filterId,18" db:"filterId" json:"filterId,omitempty"`
  EntranceType *string `thrift:"entranceType,19" db:"entranceType" json:"entranceType,omitempty"`
  LanguageList []string `thrift:"languageList,20" db:"languageList" json:"languageList,omitempty"`
  NextToken *string `thrift:"nextToken,21" db:"nextToken" json:"nextToken,omitempty"`
  SearchContent *string `thrift:"searchContent,22" db:"searchContent" json:"searchContent,omitempty"`
  GenresList []string `thrift:"genresList,23" db:"genresList" json:"genresList,omitempty"`
  LogId *string `thrift:"logId,24" db:"logId" json:"logId,omitempty"`
  ServiceName *string `thrift:"serviceName,25" db:"serviceName" json:"serviceName,omitempty"`
  EnvOption *string `thrift:"envOption,26" db:"envOption" json:"envOption,omitempty"`
  TimeSign *string `thrift:"timeSign,27" db:"timeSign" json:"timeSign,omitempty"`
}

func NewRequest() *Request {
  return &Request{}
}


func (p *Request) GetInterfaceName() string {
  return p.InterfaceName
}

func (p *Request) GetUserId() string {
  return p.UserId
}

func (p *Request) GetCardId() string {
  return p.CardId
}

func (p *Request) GetNum() int32 {
  return p.Num
}

func (p *Request) GetFinalId() string {
  return p.FinalId
}

func (p *Request) GetType() int8 {
  return p.Type
}

func (p *Request) GetResourceId() string {
  return p.ResourceId
}

func (p *Request) GetResourceType() string {
  return p.ResourceType
}

func (p *Request) GetPlatformId() string {
  return p.PlatformId
}

func (p *Request) GetTabId() string {
  return p.TabId
}
var Request_InterfaceNewName_DEFAULT string
func (p *Request) GetInterfaceNewName() string {
  if !p.IsSetInterfaceNewName() {
    return Request_InterfaceNewName_DEFAULT
  }
return *p.InterfaceNewName
}
var Request_LocalFileInfo_DEFAULT *LocalFileInfo
func (p *Request) GetLocalFileInfo() *LocalFileInfo {
  if !p.IsSetLocalFileInfo() {
    return Request_LocalFileInfo_DEFAULT
  }
return p.LocalFileInfo
}
var Request_Country_DEFAULT string
func (p *Request) GetCountry() string {
  if !p.IsSetCountry() {
    return Request_Country_DEFAULT
  }
return *p.Country
}
var Request_Area_DEFAULT string
func (p *Request) GetArea() string {
  if !p.IsSetArea() {
    return Request_Area_DEFAULT
  }
return *p.Area
}
var Request_Language_DEFAULT string
func (p *Request) GetLanguage() string {
  if !p.IsSetLanguage() {
    return Request_Language_DEFAULT
  }
return *p.Language
}
var Request_NetworkStatus_DEFAULT string
func (p *Request) GetNetworkStatus() string {
  if !p.IsSetNetworkStatus() {
    return Request_NetworkStatus_DEFAULT
  }
return *p.NetworkStatus
}
var Request_DeviceInfo_DEFAULT string
func (p *Request) GetDeviceInfo() string {
  if !p.IsSetDeviceInfo() {
    return Request_DeviceInfo_DEFAULT
  }
return *p.DeviceInfo
}
var Request_FilterId_DEFAULT string
func (p *Request) GetFilterId() string {
  if !p.IsSetFilterId() {
    return Request_FilterId_DEFAULT
  }
return *p.FilterId
}
var Request_EntranceType_DEFAULT string
func (p *Request) GetEntranceType() string {
  if !p.IsSetEntranceType() {
    return Request_EntranceType_DEFAULT
  }
return *p.EntranceType
}
var Request_LanguageList_DEFAULT []string

func (p *Request) GetLanguageList() []string {
  return p.LanguageList
}
var Request_NextToken_DEFAULT string
func (p *Request) GetNextToken() string {
  if !p.IsSetNextToken() {
    return Request_NextToken_DEFAULT
  }
return *p.NextToken
}
var Request_SearchContent_DEFAULT string
func (p *Request) GetSearchContent() string {
  if !p.IsSetSearchContent() {
    return Request_SearchContent_DEFAULT
  }
return *p.SearchContent
}
var Request_GenresList_DEFAULT []string

func (p *Request) GetGenresList() []string {
  return p.GenresList
}
var Request_LogId_DEFAULT string
func (p *Request) GetLogId() string {
  if !p.IsSetLogId() {
    return Request_LogId_DEFAULT
  }
return *p.LogId
}
var Request_ServiceName_DEFAULT string
func (p *Request) GetServiceName() string {
  if !p.IsSetServiceName() {
    return Request_ServiceName_DEFAULT
  }
return *p.ServiceName
}
var Request_EnvOption_DEFAULT string
func (p *Request) GetEnvOption() string {
  if !p.IsSetEnvOption() {
    return Request_EnvOption_DEFAULT
  }
return *p.EnvOption
}
var Request_TimeSign_DEFAULT string
func (p *Request) GetTimeSign() string {
  if !p.IsSetTimeSign() {
    return Request_TimeSign_DEFAULT
  }
return *p.TimeSign
}
func (p *Request) IsSetInterfaceNewName() bool {
  return p.InterfaceNewName != nil
}

func (p *Request) IsSetLocalFileInfo() bool {
  return p.LocalFileInfo != nil
}

func (p *Request) IsSetCountry() bool {
  return p.Country != nil
}

func (p *Request) IsSetArea() bool {
  return p.Area != nil
}

func (p *Request) IsSetLanguage() bool {
  return p.Language != nil
}

func (p *Request) IsSetNetworkStatus() bool {
  return p.NetworkStatus != nil
}

func (p *Request) IsSetDeviceInfo() bool {
  return p.DeviceInfo != nil
}

func (p *Request) IsSetFilterId() bool {
  return p.FilterId != nil
}

func (p *Request) IsSetEntranceType() bool {
  return p.EntranceType != nil
}

func (p *Request) IsSetLanguageList() bool {
  return p.LanguageList != nil
}

func (p *Request) IsSetNextToken() bool {
  return p.NextToken != nil
}

func (p *Request) IsSetSearchContent() bool {
  return p.SearchContent != nil
}

func (p *Request) IsSetGenresList() bool {
  return p.GenresList != nil
}

func (p *Request) IsSetLogId() bool {
  return p.LogId != nil
}

func (p *Request) IsSetServiceName() bool {
  return p.ServiceName != nil
}

func (p *Request) IsSetEnvOption() bool {
  return p.EnvOption != nil
}

func (p *Request) IsSetTimeSign() bool {
  return p.TimeSign != nil
}

func (p *Request) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.BYTE {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField11(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField12(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 13:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField13(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 14:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField14(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 15:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField15(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 16:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField16(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 17:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField17(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 18:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField18(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 19:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField19(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 20:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField20(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 21:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField21(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 22:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField22(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 23:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField23(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 24:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField24(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 25:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField25(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 26:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField26(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 27:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField27(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Request)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.InterfaceName = v
}
  return nil
}

func (p *Request)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.UserId = v
}
  return nil
}

func (p *Request)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.CardId = v
}
  return nil
}

func (p *Request)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Num = v
}
  return nil
}

func (p *Request)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.FinalId = v
}
  return nil
}

func (p *Request)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadByte(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  temp := int8(v)
  p.Type = temp
}
  return nil
}

func (p *Request)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.ResourceId = v
}
  return nil
}

func (p *Request)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.ResourceType = v
}
  return nil
}

func (p *Request)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.PlatformId = v
}
  return nil
}

func (p *Request)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.TabId = v
}
  return nil
}

func (p *Request)  ReadField11(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.InterfaceNewName = &v
}
  return nil
}

func (p *Request)  ReadField12(iprot thrift.TProtocol) error {
  p.LocalFileInfo = &LocalFileInfo{}
  if err := p.LocalFileInfo.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.LocalFileInfo), err)
  }
  return nil
}

func (p *Request)  ReadField13(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 13: ", err)
} else {
  p.Country = &v
}
  return nil
}

func (p *Request)  ReadField14(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 14: ", err)
} else {
  p.Area = &v
}
  return nil
}

func (p *Request)  ReadField15(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 15: ", err)
} else {
  p.Language = &v
}
  return nil
}

func (p *Request)  ReadField16(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 16: ", err)
} else {
  p.NetworkStatus = &v
}
  return nil
}

func (p *Request)  ReadField17(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 17: ", err)
} else {
  p.DeviceInfo = &v
}
  return nil
}

func (p *Request)  ReadField18(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 18: ", err)
} else {
  p.FilterId = &v
}
  return nil
}

func (p *Request)  ReadField19(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 19: ", err)
} else {
  p.EntranceType = &v
}
  return nil
}

func (p *Request)  ReadField20(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.LanguageList =  tSlice
  for i := 0; i < size; i ++ {
var _elem0 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem0 = v
}
    p.LanguageList = append(p.LanguageList, _elem0)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Request)  ReadField21(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 21: ", err)
} else {
  p.NextToken = &v
}
  return nil
}

func (p *Request)  ReadField22(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 22: ", err)
} else {
  p.SearchContent = &v
}
  return nil
}

func (p *Request)  ReadField23(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.GenresList =  tSlice
  for i := 0; i < size; i ++ {
var _elem1 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem1 = v
}
    p.GenresList = append(p.GenresList, _elem1)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Request)  ReadField24(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 24: ", err)
} else {
  p.LogId = &v
}
  return nil
}

func (p *Request)  ReadField25(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 25: ", err)
} else {
  p.ServiceName = &v
}
  return nil
}

func (p *Request)  ReadField26(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 26: ", err)
} else {
  p.EnvOption = &v
}
  return nil
}

func (p *Request)  ReadField27(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 27: ", err)
} else {
  p.TimeSign = &v
}
  return nil
}

func (p *Request) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Request"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
    if err := p.writeField12(oprot); err != nil { return err }
    if err := p.writeField13(oprot); err != nil { return err }
    if err := p.writeField14(oprot); err != nil { return err }
    if err := p.writeField15(oprot); err != nil { return err }
    if err := p.writeField16(oprot); err != nil { return err }
    if err := p.writeField17(oprot); err != nil { return err }
    if err := p.writeField18(oprot); err != nil { return err }
    if err := p.writeField19(oprot); err != nil { return err }
    if err := p.writeField20(oprot); err != nil { return err }
    if err := p.writeField21(oprot); err != nil { return err }
    if err := p.writeField22(oprot); err != nil { return err }
    if err := p.writeField23(oprot); err != nil { return err }
    if err := p.writeField24(oprot); err != nil { return err }
    if err := p.writeField25(oprot); err != nil { return err }
    if err := p.writeField26(oprot); err != nil { return err }
    if err := p.writeField27(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Request) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("interfaceName", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:interfaceName: ", p), err) }
  if err := oprot.WriteString(string(p.InterfaceName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.interfaceName (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:interfaceName: ", p), err) }
  return err
}

func (p *Request) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:userId: ", p), err) }
  if err := oprot.WriteString(string(p.UserId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:userId: ", p), err) }
  return err
}

func (p *Request) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("cardId", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:cardId: ", p), err) }
  if err := oprot.WriteString(string(p.CardId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.cardId (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:cardId: ", p), err) }
  return err
}

func (p *Request) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("num", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:num: ", p), err) }
  if err := oprot.WriteI32(int32(p.Num)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.num (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:num: ", p), err) }
  return err
}

func (p *Request) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("finalId", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:finalId: ", p), err) }
  if err := oprot.WriteString(string(p.FinalId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.finalId (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:finalId: ", p), err) }
  return err
}

func (p *Request) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("type", thrift.BYTE, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:type: ", p), err) }
  if err := oprot.WriteByte(int8(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:type: ", p), err) }
  return err
}

func (p *Request) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("resourceId", thrift.STRING, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:resourceId: ", p), err) }
  if err := oprot.WriteString(string(p.ResourceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.resourceId (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:resourceId: ", p), err) }
  return err
}

func (p *Request) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("resourceType", thrift.STRING, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:resourceType: ", p), err) }
  if err := oprot.WriteString(string(p.ResourceType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.resourceType (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:resourceType: ", p), err) }
  return err
}

func (p *Request) writeField9(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("platformId", thrift.STRING, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:platformId: ", p), err) }
  if err := oprot.WriteString(string(p.PlatformId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.platformId (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:platformId: ", p), err) }
  return err
}

func (p *Request) writeField10(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("tabId", thrift.STRING, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:tabId: ", p), err) }
  if err := oprot.WriteString(string(p.TabId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tabId (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:tabId: ", p), err) }
  return err
}

func (p *Request) writeField11(oprot thrift.TProtocol) (err error) {
  if p.IsSetInterfaceNewName() {
    if err := oprot.WriteFieldBegin("interfaceNewName", thrift.STRING, 11); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:interfaceNewName: ", p), err) }
    if err := oprot.WriteString(string(*p.InterfaceNewName)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.interfaceNewName (11) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 11:interfaceNewName: ", p), err) }
  }
  return err
}

func (p *Request) writeField12(oprot thrift.TProtocol) (err error) {
  if p.IsSetLocalFileInfo() {
    if err := oprot.WriteFieldBegin("localFileInfo", thrift.STRUCT, 12); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:localFileInfo: ", p), err) }
    if err := p.LocalFileInfo.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.LocalFileInfo), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 12:localFileInfo: ", p), err) }
  }
  return err
}

func (p *Request) writeField13(oprot thrift.TProtocol) (err error) {
  if p.IsSetCountry() {
    if err := oprot.WriteFieldBegin("country", thrift.STRING, 13); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:country: ", p), err) }
    if err := oprot.WriteString(string(*p.Country)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.country (13) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 13:country: ", p), err) }
  }
  return err
}

func (p *Request) writeField14(oprot thrift.TProtocol) (err error) {
  if p.IsSetArea() {
    if err := oprot.WriteFieldBegin("area", thrift.STRING, 14); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:area: ", p), err) }
    if err := oprot.WriteString(string(*p.Area)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.area (14) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 14:area: ", p), err) }
  }
  return err
}

func (p *Request) writeField15(oprot thrift.TProtocol) (err error) {
  if p.IsSetLanguage() {
    if err := oprot.WriteFieldBegin("language", thrift.STRING, 15); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:language: ", p), err) }
    if err := oprot.WriteString(string(*p.Language)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.language (15) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 15:language: ", p), err) }
  }
  return err
}

func (p *Request) writeField16(oprot thrift.TProtocol) (err error) {
  if p.IsSetNetworkStatus() {
    if err := oprot.WriteFieldBegin("networkStatus", thrift.STRING, 16); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:networkStatus: ", p), err) }
    if err := oprot.WriteString(string(*p.NetworkStatus)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.networkStatus (16) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 16:networkStatus: ", p), err) }
  }
  return err
}

func (p *Request) writeField17(oprot thrift.TProtocol) (err error) {
  if p.IsSetDeviceInfo() {
    if err := oprot.WriteFieldBegin("deviceInfo", thrift.STRING, 17); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:deviceInfo: ", p), err) }
    if err := oprot.WriteString(string(*p.DeviceInfo)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.deviceInfo (17) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 17:deviceInfo: ", p), err) }
  }
  return err
}

func (p *Request) writeField18(oprot thrift.TProtocol) (err error) {
  if p.IsSetFilterId() {
    if err := oprot.WriteFieldBegin("filterId", thrift.STRING, 18); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 18:filterId: ", p), err) }
    if err := oprot.WriteString(string(*p.FilterId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.filterId (18) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 18:filterId: ", p), err) }
  }
  return err
}

func (p *Request) writeField19(oprot thrift.TProtocol) (err error) {
  if p.IsSetEntranceType() {
    if err := oprot.WriteFieldBegin("entranceType", thrift.STRING, 19); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 19:entranceType: ", p), err) }
    if err := oprot.WriteString(string(*p.EntranceType)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.entranceType (19) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 19:entranceType: ", p), err) }
  }
  return err
}

func (p *Request) writeField20(oprot thrift.TProtocol) (err error) {
  if p.IsSetLanguageList() {
    if err := oprot.WriteFieldBegin("languageList", thrift.LIST, 20); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:languageList: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.LanguageList)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.LanguageList {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 20:languageList: ", p), err) }
  }
  return err
}

func (p *Request) writeField21(oprot thrift.TProtocol) (err error) {
  if p.IsSetNextToken() {
    if err := oprot.WriteFieldBegin("nextToken", thrift.STRING, 21); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 21:nextToken: ", p), err) }
    if err := oprot.WriteString(string(*p.NextToken)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.nextToken (21) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 21:nextToken: ", p), err) }
  }
  return err
}

func (p *Request) writeField22(oprot thrift.TProtocol) (err error) {
  if p.IsSetSearchContent() {
    if err := oprot.WriteFieldBegin("searchContent", thrift.STRING, 22); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 22:searchContent: ", p), err) }
    if err := oprot.WriteString(string(*p.SearchContent)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.searchContent (22) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 22:searchContent: ", p), err) }
  }
  return err
}

func (p *Request) writeField23(oprot thrift.TProtocol) (err error) {
  if p.IsSetGenresList() {
    if err := oprot.WriteFieldBegin("genresList", thrift.LIST, 23); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 23:genresList: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.GenresList)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.GenresList {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 23:genresList: ", p), err) }
  }
  return err
}

func (p *Request) writeField24(oprot thrift.TProtocol) (err error) {
  if p.IsSetLogId() {
    if err := oprot.WriteFieldBegin("logId", thrift.STRING, 24); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 24:logId: ", p), err) }
    if err := oprot.WriteString(string(*p.LogId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.logId (24) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 24:logId: ", p), err) }
  }
  return err
}

func (p *Request) writeField25(oprot thrift.TProtocol) (err error) {
  if p.IsSetServiceName() {
    if err := oprot.WriteFieldBegin("serviceName", thrift.STRING, 25); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 25:serviceName: ", p), err) }
    if err := oprot.WriteString(string(*p.ServiceName)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.serviceName (25) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 25:serviceName: ", p), err) }
  }
  return err
}

func (p *Request) writeField26(oprot thrift.TProtocol) (err error) {
  if p.IsSetEnvOption() {
    if err := oprot.WriteFieldBegin("envOption", thrift.STRING, 26); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 26:envOption: ", p), err) }
    if err := oprot.WriteString(string(*p.EnvOption)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.envOption (26) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 26:envOption: ", p), err) }
  }
  return err
}

func (p *Request) writeField27(oprot thrift.TProtocol) (err error) {
  if p.IsSetTimeSign() {
    if err := oprot.WriteFieldBegin("timeSign", thrift.STRING, 27); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 27:timeSign: ", p), err) }
    if err := oprot.WriteString(string(*p.TimeSign)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.timeSign (27) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 27:timeSign: ", p), err) }
  }
  return err
}

func (p *Request) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Request(%+v)", *p)
}

// Attributes:
//  - GenresId
//  - GenresName
//  - BackgroundPic
type Genres struct {
  GenresId string `thrift:"genresId,1" db:"genresId" json:"genresId"`
  GenresName string `thrift:"genresName,2" db:"genresName" json:"genresName"`
  BackgroundPic []string `thrift:"backgroundPic,3" db:"backgroundPic" json:"backgroundPic"`
}

func NewGenres() *Genres {
  return &Genres{}
}


func (p *Genres) GetGenresId() string {
  return p.GenresId
}

func (p *Genres) GetGenresName() string {
  return p.GenresName
}

func (p *Genres) GetBackgroundPic() []string {
  return p.BackgroundPic
}
func (p *Genres) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Genres)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.GenresId = v
}
  return nil
}

func (p *Genres)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.GenresName = v
}
  return nil
}

func (p *Genres)  ReadField3(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.BackgroundPic =  tSlice
  for i := 0; i < size; i ++ {
var _elem2 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem2 = v
}
    p.BackgroundPic = append(p.BackgroundPic, _elem2)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Genres) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Genres"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Genres) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("genresId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:genresId: ", p), err) }
  if err := oprot.WriteString(string(p.GenresId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.genresId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:genresId: ", p), err) }
  return err
}

func (p *Genres) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("genresName", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:genresName: ", p), err) }
  if err := oprot.WriteString(string(p.GenresName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.genresName (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:genresName: ", p), err) }
  return err
}

func (p *Genres) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("backgroundPic", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:backgroundPic: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.BackgroundPic)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.BackgroundPic {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:backgroundPic: ", p), err) }
  return err
}

func (p *Genres) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Genres(%+v)", *p)
}

// Attributes:
//  - ID
//  - RecallSign
//  - ResultType
//  - PreLoadTime
type Result_ struct {
  ID string `thrift:"id,1" db:"id" json:"id"`
  RecallSign *int64 `thrift:"recallSign,2" db:"recallSign" json:"recallSign,omitempty"`
  ResultType *string `thrift:"resultType,3" db:"resultType" json:"resultType,omitempty"`
  PreLoadTime *int64 `thrift:"preLoadTime,4" db:"preLoadTime" json:"preLoadTime,omitempty"`
}

func NewResult_() *Result_ {
  return &Result_{}
}


func (p *Result_) GetID() string {
  return p.ID
}
var Result__RecallSign_DEFAULT int64
func (p *Result_) GetRecallSign() int64 {
  if !p.IsSetRecallSign() {
    return Result__RecallSign_DEFAULT
  }
return *p.RecallSign
}
var Result__ResultType_DEFAULT string
func (p *Result_) GetResultType() string {
  if !p.IsSetResultType() {
    return Result__ResultType_DEFAULT
  }
return *p.ResultType
}
var Result__PreLoadTime_DEFAULT int64
func (p *Result_) GetPreLoadTime() int64 {
  if !p.IsSetPreLoadTime() {
    return Result__PreLoadTime_DEFAULT
  }
return *p.PreLoadTime
}
func (p *Result_) IsSetRecallSign() bool {
  return p.RecallSign != nil
}

func (p *Result_) IsSetResultType() bool {
  return p.ResultType != nil
}

func (p *Result_) IsSetPreLoadTime() bool {
  return p.PreLoadTime != nil
}

func (p *Result_) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Result_)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *Result_)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.RecallSign = &v
}
  return nil
}

func (p *Result_)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ResultType = &v
}
  return nil
}

func (p *Result_)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.PreLoadTime = &v
}
  return nil
}

func (p *Result_) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Result_) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteString(string(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *Result_) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetRecallSign() {
    if err := oprot.WriteFieldBegin("recallSign", thrift.I64, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:recallSign: ", p), err) }
    if err := oprot.WriteI64(int64(*p.RecallSign)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.recallSign (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:recallSign: ", p), err) }
  }
  return err
}

func (p *Result_) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetResultType() {
    if err := oprot.WriteFieldBegin("resultType", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:resultType: ", p), err) }
    if err := oprot.WriteString(string(*p.ResultType)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.resultType (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:resultType: ", p), err) }
  }
  return err
}

func (p *Result_) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetPreLoadTime() {
    if err := oprot.WriteFieldBegin("preLoadTime", thrift.I64, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:preLoadTime: ", p), err) }
    if err := oprot.WriteI64(int64(*p.PreLoadTime)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.preLoadTime (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:preLoadTime: ", p), err) }
  }
  return err
}

func (p *Result_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Result_(%+v)", *p)
}

// Attributes:
//  - CardName
//  - CardId
//  - ListStyle
//  - MoreStyle
//  - Icon
//  - LanguageList
type Card struct {
  CardName string `thrift:"cardName,1" db:"cardName" json:"cardName"`
  CardId string `thrift:"cardId,2" db:"cardId" json:"cardId"`
  ListStyle string `thrift:"listStyle,3" db:"listStyle" json:"listStyle"`
  MoreStyle string `thrift:"moreStyle,4" db:"moreStyle" json:"moreStyle"`
  Icon *string `thrift:"icon,5" db:"icon" json:"icon,omitempty"`
  LanguageList []string `thrift:"languageList,6" db:"languageList" json:"languageList,omitempty"`
}

func NewCard() *Card {
  return &Card{}
}


func (p *Card) GetCardName() string {
  return p.CardName
}

func (p *Card) GetCardId() string {
  return p.CardId
}

func (p *Card) GetListStyle() string {
  return p.ListStyle
}

func (p *Card) GetMoreStyle() string {
  return p.MoreStyle
}
var Card_Icon_DEFAULT string
func (p *Card) GetIcon() string {
  if !p.IsSetIcon() {
    return Card_Icon_DEFAULT
  }
return *p.Icon
}
var Card_LanguageList_DEFAULT []string

func (p *Card) GetLanguageList() []string {
  return p.LanguageList
}
func (p *Card) IsSetIcon() bool {
  return p.Icon != nil
}

func (p *Card) IsSetLanguageList() bool {
  return p.LanguageList != nil
}

func (p *Card) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Card)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.CardName = v
}
  return nil
}

func (p *Card)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.CardId = v
}
  return nil
}

func (p *Card)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ListStyle = v
}
  return nil
}

func (p *Card)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.MoreStyle = v
}
  return nil
}

func (p *Card)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Icon = &v
}
  return nil
}

func (p *Card)  ReadField6(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.LanguageList =  tSlice
  for i := 0; i < size; i ++ {
var _elem3 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem3 = v
}
    p.LanguageList = append(p.LanguageList, _elem3)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Card) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Card"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Card) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("cardName", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:cardName: ", p), err) }
  if err := oprot.WriteString(string(p.CardName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.cardName (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:cardName: ", p), err) }
  return err
}

func (p *Card) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("cardId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:cardId: ", p), err) }
  if err := oprot.WriteString(string(p.CardId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.cardId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:cardId: ", p), err) }
  return err
}

func (p *Card) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("listStyle", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:listStyle: ", p), err) }
  if err := oprot.WriteString(string(p.ListStyle)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.listStyle (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:listStyle: ", p), err) }
  return err
}

func (p *Card) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("moreStyle", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:moreStyle: ", p), err) }
  if err := oprot.WriteString(string(p.MoreStyle)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.moreStyle (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:moreStyle: ", p), err) }
  return err
}

func (p *Card) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetIcon() {
    if err := oprot.WriteFieldBegin("icon", thrift.STRING, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:icon: ", p), err) }
    if err := oprot.WriteString(string(*p.Icon)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.icon (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:icon: ", p), err) }
  }
  return err
}

func (p *Card) writeField6(oprot thrift.TProtocol) (err error) {
  if p.IsSetLanguageList() {
    if err := oprot.WriteFieldBegin("languageList", thrift.LIST, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:languageList: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.LanguageList)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.LanguageList {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:languageList: ", p), err) }
  }
  return err
}

func (p *Card) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Card(%+v)", *p)
}

// Attributes:
//  - TabName
//  - TabId
//  - CardList
//  - Style
//  - NextToken
type Tabs struct {
  TabName string `thrift:"tabName,1" db:"tabName" json:"tabName"`
  TabId string `thrift:"tabId,2" db:"tabId" json:"tabId"`
  CardList []*Card `thrift:"cardList,3" db:"cardList" json:"cardList"`
  Style *string `thrift:"style,4" db:"style" json:"style,omitempty"`
  NextToken *string `thrift:"nextToken,5" db:"nextToken" json:"nextToken,omitempty"`
}

func NewTabs() *Tabs {
  return &Tabs{}
}


func (p *Tabs) GetTabName() string {
  return p.TabName
}

func (p *Tabs) GetTabId() string {
  return p.TabId
}

func (p *Tabs) GetCardList() []*Card {
  return p.CardList
}
var Tabs_Style_DEFAULT string
func (p *Tabs) GetStyle() string {
  if !p.IsSetStyle() {
    return Tabs_Style_DEFAULT
  }
return *p.Style
}
var Tabs_NextToken_DEFAULT string
func (p *Tabs) GetNextToken() string {
  if !p.IsSetNextToken() {
    return Tabs_NextToken_DEFAULT
  }
return *p.NextToken
}
func (p *Tabs) IsSetStyle() bool {
  return p.Style != nil
}

func (p *Tabs) IsSetNextToken() bool {
  return p.NextToken != nil
}

func (p *Tabs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Tabs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TabName = v
}
  return nil
}

func (p *Tabs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TabId = v
}
  return nil
}

func (p *Tabs)  ReadField3(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Card, 0, size)
  p.CardList =  tSlice
  for i := 0; i < size; i ++ {
    _elem4 := &Card{}
    if err := _elem4.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem4), err)
    }
    p.CardList = append(p.CardList, _elem4)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Tabs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Style = &v
}
  return nil
}

func (p *Tabs)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.NextToken = &v
}
  return nil
}

func (p *Tabs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Tabs"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Tabs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("tabName", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:tabName: ", p), err) }
  if err := oprot.WriteString(string(p.TabName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tabName (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:tabName: ", p), err) }
  return err
}

func (p *Tabs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("tabId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tabId: ", p), err) }
  if err := oprot.WriteString(string(p.TabId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tabId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tabId: ", p), err) }
  return err
}

func (p *Tabs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("cardList", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:cardList: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.CardList)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.CardList {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:cardList: ", p), err) }
  return err
}

func (p *Tabs) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetStyle() {
    if err := oprot.WriteFieldBegin("style", thrift.STRING, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:style: ", p), err) }
    if err := oprot.WriteString(string(*p.Style)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.style (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:style: ", p), err) }
  }
  return err
}

func (p *Tabs) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetNextToken() {
    if err := oprot.WriteFieldBegin("nextToken", thrift.STRING, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:nextToken: ", p), err) }
    if err := oprot.WriteString(string(*p.NextToken)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.nextToken (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:nextToken: ", p), err) }
  }
  return err
}

func (p *Tabs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Tabs(%+v)", *p)
}

// Attributes:
//  - BannerName
//  - BannerType
//  - HeadPicture
//  - Description
//  - SubTitle
//  - AdditionalInfos
//  - Order
//  - BannerId
type Banner struct {
  BannerName string `thrift:"bannerName,1" db:"bannerName" json:"bannerName"`
  BannerType string `thrift:"bannerType,2" db:"bannerType" json:"bannerType"`
  HeadPicture string `thrift:"headPicture,3" db:"headPicture" json:"headPicture"`
  Description string `thrift:"description,4" db:"description" json:"description"`
  SubTitle *string `thrift:"subTitle,5" db:"subTitle" json:"subTitle,omitempty"`
  AdditionalInfos []*AdditionalInfo `thrift:"additionalInfos,6" db:"additionalInfos" json:"additionalInfos,omitempty"`
  Order *int32 `thrift:"order,7" db:"order" json:"order,omitempty"`
  BannerId string `thrift:"bannerId,8" db:"bannerId" json:"bannerId"`
}

func NewBanner() *Banner {
  return &Banner{}
}


func (p *Banner) GetBannerName() string {
  return p.BannerName
}

func (p *Banner) GetBannerType() string {
  return p.BannerType
}

func (p *Banner) GetHeadPicture() string {
  return p.HeadPicture
}

func (p *Banner) GetDescription() string {
  return p.Description
}
var Banner_SubTitle_DEFAULT string
func (p *Banner) GetSubTitle() string {
  if !p.IsSetSubTitle() {
    return Banner_SubTitle_DEFAULT
  }
return *p.SubTitle
}
var Banner_AdditionalInfos_DEFAULT []*AdditionalInfo

func (p *Banner) GetAdditionalInfos() []*AdditionalInfo {
  return p.AdditionalInfos
}
var Banner_Order_DEFAULT int32
func (p *Banner) GetOrder() int32 {
  if !p.IsSetOrder() {
    return Banner_Order_DEFAULT
  }
return *p.Order
}

func (p *Banner) GetBannerId() string {
  return p.BannerId
}
func (p *Banner) IsSetSubTitle() bool {
  return p.SubTitle != nil
}

func (p *Banner) IsSetAdditionalInfos() bool {
  return p.AdditionalInfos != nil
}

func (p *Banner) IsSetOrder() bool {
  return p.Order != nil
}

func (p *Banner) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Banner)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.BannerName = v
}
  return nil
}

func (p *Banner)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.BannerType = v
}
  return nil
}

func (p *Banner)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.HeadPicture = v
}
  return nil
}

func (p *Banner)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Description = v
}
  return nil
}

func (p *Banner)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.SubTitle = &v
}
  return nil
}

func (p *Banner)  ReadField6(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*AdditionalInfo, 0, size)
  p.AdditionalInfos =  tSlice
  for i := 0; i < size; i ++ {
    _elem5 := &AdditionalInfo{}
    if err := _elem5.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem5), err)
    }
    p.AdditionalInfos = append(p.AdditionalInfos, _elem5)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Banner)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.Order = &v
}
  return nil
}

func (p *Banner)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.BannerId = v
}
  return nil
}

func (p *Banner) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Banner"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Banner) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("bannerName", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bannerName: ", p), err) }
  if err := oprot.WriteString(string(p.BannerName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bannerName (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bannerName: ", p), err) }
  return err
}

func (p *Banner) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("bannerType", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:bannerType: ", p), err) }
  if err := oprot.WriteString(string(p.BannerType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bannerType (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:bannerType: ", p), err) }
  return err
}

func (p *Banner) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("headPicture", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:headPicture: ", p), err) }
  if err := oprot.WriteString(string(p.HeadPicture)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.headPicture (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:headPicture: ", p), err) }
  return err
}

func (p *Banner) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("description", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:description: ", p), err) }
  if err := oprot.WriteString(string(p.Description)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.description (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:description: ", p), err) }
  return err
}

func (p *Banner) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetSubTitle() {
    if err := oprot.WriteFieldBegin("subTitle", thrift.STRING, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:subTitle: ", p), err) }
    if err := oprot.WriteString(string(*p.SubTitle)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.subTitle (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:subTitle: ", p), err) }
  }
  return err
}

func (p *Banner) writeField6(oprot thrift.TProtocol) (err error) {
  if p.IsSetAdditionalInfos() {
    if err := oprot.WriteFieldBegin("additionalInfos", thrift.LIST, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:additionalInfos: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.AdditionalInfos)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.AdditionalInfos {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:additionalInfos: ", p), err) }
  }
  return err
}

func (p *Banner) writeField7(oprot thrift.TProtocol) (err error) {
  if p.IsSetOrder() {
    if err := oprot.WriteFieldBegin("order", thrift.I32, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:order: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Order)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.order (7) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:order: ", p), err) }
  }
  return err
}

func (p *Banner) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("bannerId", thrift.STRING, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:bannerId: ", p), err) }
  if err := oprot.WriteString(string(p.BannerId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bannerId (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:bannerId: ", p), err) }
  return err
}

func (p *Banner) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Banner(%+v)", *p)
}

// Attributes:
//  - ResultList
//  - SmallFlowTag
//  - Flag
//  - RequestChannel
//  - ResponseType
//  - ListStyle
//  - MoreStyle
//  - HasHead
//  - HasTail
//  - DisableCache
//  - LogId
//  - ServiceName
//  - ResStatus
type Response struct {
  ResultList []*Result_ `thrift:"resultList,1" db:"resultList" json:"resultList"`
  SmallFlowTag string `thrift:"smallFlowTag,2" db:"smallFlowTag" json:"smallFlowTag"`
  Flag int16 `thrift:"flag,3" db:"flag" json:"flag"`
  RequestChannel *string `thrift:"requestChannel,4" db:"requestChannel" json:"requestChannel,omitempty"`
  ResponseType *string `thrift:"responseType,5" db:"responseType" json:"responseType,omitempty"`
  ListStyle string `thrift:"listStyle,6" db:"listStyle" json:"listStyle"`
  MoreStyle string `thrift:"moreStyle,7" db:"moreStyle" json:"moreStyle"`
  HasHead *int8 `thrift:"hasHead,8" db:"hasHead" json:"hasHead,omitempty"`
  HasTail *int8 `thrift:"hasTail,9" db:"hasTail" json:"hasTail,omitempty"`
  DisableCache *bool `thrift:"disableCache,10" db:"disableCache" json:"disableCache,omitempty"`
  LogId *string `thrift:"logId,11" db:"logId" json:"logId,omitempty"`
  ServiceName *string `thrift:"serviceName,12" db:"serviceName" json:"serviceName,omitempty"`
  ResStatus *string `thrift:"resStatus,13" db:"resStatus" json:"resStatus,omitempty"`
}

func NewResponse() *Response {
  return &Response{}
}


func (p *Response) GetResultList() []*Result_ {
  return p.ResultList
}

func (p *Response) GetSmallFlowTag() string {
  return p.SmallFlowTag
}

func (p *Response) GetFlag() int16 {
  return p.Flag
}
var Response_RequestChannel_DEFAULT string
func (p *Response) GetRequestChannel() string {
  if !p.IsSetRequestChannel() {
    return Response_RequestChannel_DEFAULT
  }
return *p.RequestChannel
}
var Response_ResponseType_DEFAULT string
func (p *Response) GetResponseType() string {
  if !p.IsSetResponseType() {
    return Response_ResponseType_DEFAULT
  }
return *p.ResponseType
}

func (p *Response) GetListStyle() string {
  return p.ListStyle
}

func (p *Response) GetMoreStyle() string {
  return p.MoreStyle
}
var Response_HasHead_DEFAULT int8
func (p *Response) GetHasHead() int8 {
  if !p.IsSetHasHead() {
    return Response_HasHead_DEFAULT
  }
return *p.HasHead
}
var Response_HasTail_DEFAULT int8
func (p *Response) GetHasTail() int8 {
  if !p.IsSetHasTail() {
    return Response_HasTail_DEFAULT
  }
return *p.HasTail
}
var Response_DisableCache_DEFAULT bool
func (p *Response) GetDisableCache() bool {
  if !p.IsSetDisableCache() {
    return Response_DisableCache_DEFAULT
  }
return *p.DisableCache
}
var Response_LogId_DEFAULT string
func (p *Response) GetLogId() string {
  if !p.IsSetLogId() {
    return Response_LogId_DEFAULT
  }
return *p.LogId
}
var Response_ServiceName_DEFAULT string
func (p *Response) GetServiceName() string {
  if !p.IsSetServiceName() {
    return Response_ServiceName_DEFAULT
  }
return *p.ServiceName
}
var Response_ResStatus_DEFAULT string
func (p *Response) GetResStatus() string {
  if !p.IsSetResStatus() {
    return Response_ResStatus_DEFAULT
  }
return *p.ResStatus
}
func (p *Response) IsSetRequestChannel() bool {
  return p.RequestChannel != nil
}

func (p *Response) IsSetResponseType() bool {
  return p.ResponseType != nil
}

func (p *Response) IsSetHasHead() bool {
  return p.HasHead != nil
}

func (p *Response) IsSetHasTail() bool {
  return p.HasTail != nil
}

func (p *Response) IsSetDisableCache() bool {
  return p.DisableCache != nil
}

func (p *Response) IsSetLogId() bool {
  return p.LogId != nil
}

func (p *Response) IsSetServiceName() bool {
  return p.ServiceName != nil
}

func (p *Response) IsSetResStatus() bool {
  return p.ResStatus != nil
}

func (p *Response) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.BYTE {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.BYTE {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField11(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField12(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 13:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField13(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Response)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Result_, 0, size)
  p.ResultList =  tSlice
  for i := 0; i < size; i ++ {
    _elem6 := &Result_{}
    if err := _elem6.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem6), err)
    }
    p.ResultList = append(p.ResultList, _elem6)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Response)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.SmallFlowTag = v
}
  return nil
}

func (p *Response)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Flag = v
}
  return nil
}

func (p *Response)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.RequestChannel = &v
}
  return nil
}

func (p *Response)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.ResponseType = &v
}
  return nil
}

func (p *Response)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.ListStyle = v
}
  return nil
}

func (p *Response)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.MoreStyle = v
}
  return nil
}

func (p *Response)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadByte(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  temp := int8(v)
  p.HasHead = &temp
}
  return nil
}

func (p *Response)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadByte(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  temp := int8(v)
  p.HasTail = &temp
}
  return nil
}

func (p *Response)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.DisableCache = &v
}
  return nil
}

func (p *Response)  ReadField11(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.LogId = &v
}
  return nil
}

func (p *Response)  ReadField12(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.ServiceName = &v
}
  return nil
}

func (p *Response)  ReadField13(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 13: ", err)
} else {
  p.ResStatus = &v
}
  return nil
}

func (p *Response) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Response"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
    if err := p.writeField12(oprot); err != nil { return err }
    if err := p.writeField13(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Response) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("resultList", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:resultList: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ResultList)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.ResultList {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:resultList: ", p), err) }
  return err
}

func (p *Response) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("smallFlowTag", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:smallFlowTag: ", p), err) }
  if err := oprot.WriteString(string(p.SmallFlowTag)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.smallFlowTag (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:smallFlowTag: ", p), err) }
  return err
}

func (p *Response) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("flag", thrift.I16, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:flag: ", p), err) }
  if err := oprot.WriteI16(int16(p.Flag)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.flag (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:flag: ", p), err) }
  return err
}

func (p *Response) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetRequestChannel() {
    if err := oprot.WriteFieldBegin("requestChannel", thrift.STRING, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:requestChannel: ", p), err) }
    if err := oprot.WriteString(string(*p.RequestChannel)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.requestChannel (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:requestChannel: ", p), err) }
  }
  return err
}

func (p *Response) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetResponseType() {
    if err := oprot.WriteFieldBegin("responseType", thrift.STRING, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:responseType: ", p), err) }
    if err := oprot.WriteString(string(*p.ResponseType)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.responseType (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:responseType: ", p), err) }
  }
  return err
}

func (p *Response) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("listStyle", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:listStyle: ", p), err) }
  if err := oprot.WriteString(string(p.ListStyle)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.listStyle (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:listStyle: ", p), err) }
  return err
}

func (p *Response) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("moreStyle", thrift.STRING, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:moreStyle: ", p), err) }
  if err := oprot.WriteString(string(p.MoreStyle)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.moreStyle (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:moreStyle: ", p), err) }
  return err
}

func (p *Response) writeField8(oprot thrift.TProtocol) (err error) {
  if p.IsSetHasHead() {
    if err := oprot.WriteFieldBegin("hasHead", thrift.BYTE, 8); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:hasHead: ", p), err) }
    if err := oprot.WriteByte(int8(*p.HasHead)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.hasHead (8) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 8:hasHead: ", p), err) }
  }
  return err
}

func (p *Response) writeField9(oprot thrift.TProtocol) (err error) {
  if p.IsSetHasTail() {
    if err := oprot.WriteFieldBegin("hasTail", thrift.BYTE, 9); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:hasTail: ", p), err) }
    if err := oprot.WriteByte(int8(*p.HasTail)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.hasTail (9) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 9:hasTail: ", p), err) }
  }
  return err
}

func (p *Response) writeField10(oprot thrift.TProtocol) (err error) {
  if p.IsSetDisableCache() {
    if err := oprot.WriteFieldBegin("disableCache", thrift.BOOL, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:disableCache: ", p), err) }
    if err := oprot.WriteBool(bool(*p.DisableCache)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.disableCache (10) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:disableCache: ", p), err) }
  }
  return err
}

func (p *Response) writeField11(oprot thrift.TProtocol) (err error) {
  if p.IsSetLogId() {
    if err := oprot.WriteFieldBegin("logId", thrift.STRING, 11); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:logId: ", p), err) }
    if err := oprot.WriteString(string(*p.LogId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.logId (11) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 11:logId: ", p), err) }
  }
  return err
}

func (p *Response) writeField12(oprot thrift.TProtocol) (err error) {
  if p.IsSetServiceName() {
    if err := oprot.WriteFieldBegin("serviceName", thrift.STRING, 12); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:serviceName: ", p), err) }
    if err := oprot.WriteString(string(*p.ServiceName)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.serviceName (12) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 12:serviceName: ", p), err) }
  }
  return err
}

func (p *Response) writeField13(oprot thrift.TProtocol) (err error) {
  if p.IsSetResStatus() {
    if err := oprot.WriteFieldBegin("resStatus", thrift.STRING, 13); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:resStatus: ", p), err) }
    if err := oprot.WriteString(string(*p.ResStatus)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.resStatus (13) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 13:resStatus: ", p), err) }
  }
  return err
}

func (p *Response) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Response(%+v)", *p)
}

type RecommendService interface {
  // Parameters:
  //  - Word
  Test(ctx context.Context, word string) (r string, err error)
  // Parameters:
  //  - Req
  Recommend(ctx context.Context, req *Request) (r *Response, err error)
  // Parameters:
  //  - Req
  FetchTabs(ctx context.Context, req *Request) (r []*Tabs, err error)
  // Parameters:
  //  - Req
  FetchBannerData(ctx context.Context, req *Request) (r []*Banner, err error)
}

type RecommendServiceClient struct {
  c thrift.TClient
}

// Deprecated: Use NewRecommendService instead
func NewRecommendServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *RecommendServiceClient {
  return &RecommendServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

// Deprecated: Use NewRecommendService instead
func NewRecommendServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *RecommendServiceClient {
  return &RecommendServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewRecommendServiceClient(c thrift.TClient) *RecommendServiceClient {
  return &RecommendServiceClient{
    c: c,
  }
}

// Parameters:
//  - Word
func (p *RecommendServiceClient) Test(ctx context.Context, word string) (r string, err error) {
  var _args7 RecommendServiceTestArgs
  _args7.Word = word
  var _result8 RecommendServiceTestResult
  if err = p.c.Call(ctx, "test", &_args7, &_result8); err != nil {
    return
  }
  return _result8.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *RecommendServiceClient) Recommend(ctx context.Context, req *Request) (r *Response, err error) {
  var _args9 RecommendServiceRecommendArgs
  _args9.Req = req
  var _result10 RecommendServiceRecommendResult
  if err = p.c.Call(ctx, "recommend", &_args9, &_result10); err != nil {
    return
  }
  return _result10.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *RecommendServiceClient) FetchTabs(ctx context.Context, req *Request) (r []*Tabs, err error) {
  var _args11 RecommendServiceFetchTabsArgs
  _args11.Req = req
  var _result12 RecommendServiceFetchTabsResult
  if err = p.c.Call(ctx, "fetchTabs", &_args11, &_result12); err != nil {
    return
  }
  return _result12.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *RecommendServiceClient) FetchBannerData(ctx context.Context, req *Request) (r []*Banner, err error) {
  var _args13 RecommendServiceFetchBannerDataArgs
  _args13.Req = req
  var _result14 RecommendServiceFetchBannerDataResult
  if err = p.c.Call(ctx, "fetchBannerData", &_args13, &_result14); err != nil {
    return
  }
  return _result14.GetSuccess(), nil
}

type RecommendServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler RecommendService
}

func (p *RecommendServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *RecommendServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *RecommendServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewRecommendServiceProcessor(handler RecommendService) *RecommendServiceProcessor {

  self15 := &RecommendServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self15.processorMap["test"] = &recommendServiceProcessorTest{handler:handler}
  self15.processorMap["recommend"] = &recommendServiceProcessorRecommend{handler:handler}
  self15.processorMap["fetchTabs"] = &recommendServiceProcessorFetchTabs{handler:handler}
  self15.processorMap["fetchBannerData"] = &recommendServiceProcessorFetchBannerData{handler:handler}
return self15
}

func (p *RecommendServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x16 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x16.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush(ctx)
  return false, x16

}

type recommendServiceProcessorTest struct {
  handler RecommendService
}

func (p *recommendServiceProcessorTest) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := RecommendServiceTestArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("test", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := RecommendServiceTestResult{}
var retval string
  var err2 error
  if retval, err2 = p.handler.Test(ctx, args.Word); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing test: " + err2.Error())
    oprot.WriteMessageBegin("test", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("test", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type recommendServiceProcessorRecommend struct {
  handler RecommendService
}

func (p *recommendServiceProcessorRecommend) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := RecommendServiceRecommendArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("recommend", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := RecommendServiceRecommendResult{}
var retval *Response
  var err2 error
  if retval, err2 = p.handler.Recommend(ctx, args.Req); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing recommend: " + err2.Error())
    oprot.WriteMessageBegin("recommend", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("recommend", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type recommendServiceProcessorFetchTabs struct {
  handler RecommendService
}

func (p *recommendServiceProcessorFetchTabs) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := RecommendServiceFetchTabsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("fetchTabs", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := RecommendServiceFetchTabsResult{}
var retval []*Tabs
  var err2 error
  if retval, err2 = p.handler.FetchTabs(ctx, args.Req); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing fetchTabs: " + err2.Error())
    oprot.WriteMessageBegin("fetchTabs", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("fetchTabs", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type recommendServiceProcessorFetchBannerData struct {
  handler RecommendService
}

func (p *recommendServiceProcessorFetchBannerData) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := RecommendServiceFetchBannerDataArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("fetchBannerData", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := RecommendServiceFetchBannerDataResult{}
var retval []*Banner
  var err2 error
  if retval, err2 = p.handler.FetchBannerData(ctx, args.Req); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing fetchBannerData: " + err2.Error())
    oprot.WriteMessageBegin("fetchBannerData", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("fetchBannerData", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Word
type RecommendServiceTestArgs struct {
  Word string `thrift:"word,1" db:"word" json:"word"`
}

func NewRecommendServiceTestArgs() *RecommendServiceTestArgs {
  return &RecommendServiceTestArgs{}
}


func (p *RecommendServiceTestArgs) GetWord() string {
  return p.Word
}
func (p *RecommendServiceTestArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RecommendServiceTestArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Word = v
}
  return nil
}

func (p *RecommendServiceTestArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("test_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RecommendServiceTestArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("word", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:word: ", p), err) }
  if err := oprot.WriteString(string(p.Word)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.word (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:word: ", p), err) }
  return err
}

func (p *RecommendServiceTestArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RecommendServiceTestArgs(%+v)", *p)
}

// Attributes:
//  - Success
type RecommendServiceTestResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewRecommendServiceTestResult() *RecommendServiceTestResult {
  return &RecommendServiceTestResult{}
}

var RecommendServiceTestResult_Success_DEFAULT string
func (p *RecommendServiceTestResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return RecommendServiceTestResult_Success_DEFAULT
  }
return *p.Success
}
func (p *RecommendServiceTestResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *RecommendServiceTestResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RecommendServiceTestResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *RecommendServiceTestResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("test_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RecommendServiceTestResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *RecommendServiceTestResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RecommendServiceTestResult(%+v)", *p)
}

// Attributes:
//  - Req
type RecommendServiceRecommendArgs struct {
  Req *Request `thrift:"req,1" db:"req" json:"req"`
}

func NewRecommendServiceRecommendArgs() *RecommendServiceRecommendArgs {
  return &RecommendServiceRecommendArgs{}
}

var RecommendServiceRecommendArgs_Req_DEFAULT *Request
func (p *RecommendServiceRecommendArgs) GetReq() *Request {
  if !p.IsSetReq() {
    return RecommendServiceRecommendArgs_Req_DEFAULT
  }
return p.Req
}
func (p *RecommendServiceRecommendArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *RecommendServiceRecommendArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RecommendServiceRecommendArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Req = &Request{}
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *RecommendServiceRecommendArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("recommend_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RecommendServiceRecommendArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *RecommendServiceRecommendArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RecommendServiceRecommendArgs(%+v)", *p)
}

// Attributes:
//  - Success
type RecommendServiceRecommendResult struct {
  Success *Response `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewRecommendServiceRecommendResult() *RecommendServiceRecommendResult {
  return &RecommendServiceRecommendResult{}
}

var RecommendServiceRecommendResult_Success_DEFAULT *Response
func (p *RecommendServiceRecommendResult) GetSuccess() *Response {
  if !p.IsSetSuccess() {
    return RecommendServiceRecommendResult_Success_DEFAULT
  }
return p.Success
}
func (p *RecommendServiceRecommendResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *RecommendServiceRecommendResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RecommendServiceRecommendResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &Response{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *RecommendServiceRecommendResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("recommend_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RecommendServiceRecommendResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *RecommendServiceRecommendResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RecommendServiceRecommendResult(%+v)", *p)
}

// Attributes:
//  - Req
type RecommendServiceFetchTabsArgs struct {
  Req *Request `thrift:"req,1" db:"req" json:"req"`
}

func NewRecommendServiceFetchTabsArgs() *RecommendServiceFetchTabsArgs {
  return &RecommendServiceFetchTabsArgs{}
}

var RecommendServiceFetchTabsArgs_Req_DEFAULT *Request
func (p *RecommendServiceFetchTabsArgs) GetReq() *Request {
  if !p.IsSetReq() {
    return RecommendServiceFetchTabsArgs_Req_DEFAULT
  }
return p.Req
}
func (p *RecommendServiceFetchTabsArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *RecommendServiceFetchTabsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RecommendServiceFetchTabsArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Req = &Request{}
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *RecommendServiceFetchTabsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("fetchTabs_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RecommendServiceFetchTabsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *RecommendServiceFetchTabsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RecommendServiceFetchTabsArgs(%+v)", *p)
}

// Attributes:
//  - Success
type RecommendServiceFetchTabsResult struct {
  Success []*Tabs `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewRecommendServiceFetchTabsResult() *RecommendServiceFetchTabsResult {
  return &RecommendServiceFetchTabsResult{}
}

var RecommendServiceFetchTabsResult_Success_DEFAULT []*Tabs

func (p *RecommendServiceFetchTabsResult) GetSuccess() []*Tabs {
  return p.Success
}
func (p *RecommendServiceFetchTabsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *RecommendServiceFetchTabsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RecommendServiceFetchTabsResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Tabs, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem17 := &Tabs{}
    if err := _elem17.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem17), err)
    }
    p.Success = append(p.Success, _elem17)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *RecommendServiceFetchTabsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("fetchTabs_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RecommendServiceFetchTabsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *RecommendServiceFetchTabsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RecommendServiceFetchTabsResult(%+v)", *p)
}

// Attributes:
//  - Req
type RecommendServiceFetchBannerDataArgs struct {
  Req *Request `thrift:"req,1" db:"req" json:"req"`
}

func NewRecommendServiceFetchBannerDataArgs() *RecommendServiceFetchBannerDataArgs {
  return &RecommendServiceFetchBannerDataArgs{}
}

var RecommendServiceFetchBannerDataArgs_Req_DEFAULT *Request
func (p *RecommendServiceFetchBannerDataArgs) GetReq() *Request {
  if !p.IsSetReq() {
    return RecommendServiceFetchBannerDataArgs_Req_DEFAULT
  }
return p.Req
}
func (p *RecommendServiceFetchBannerDataArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *RecommendServiceFetchBannerDataArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RecommendServiceFetchBannerDataArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Req = &Request{}
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *RecommendServiceFetchBannerDataArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("fetchBannerData_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RecommendServiceFetchBannerDataArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *RecommendServiceFetchBannerDataArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RecommendServiceFetchBannerDataArgs(%+v)", *p)
}

// Attributes:
//  - Success
type RecommendServiceFetchBannerDataResult struct {
  Success []*Banner `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewRecommendServiceFetchBannerDataResult() *RecommendServiceFetchBannerDataResult {
  return &RecommendServiceFetchBannerDataResult{}
}

var RecommendServiceFetchBannerDataResult_Success_DEFAULT []*Banner

func (p *RecommendServiceFetchBannerDataResult) GetSuccess() []*Banner {
  return p.Success
}
func (p *RecommendServiceFetchBannerDataResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *RecommendServiceFetchBannerDataResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RecommendServiceFetchBannerDataResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Banner, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem18 := &Banner{}
    if err := _elem18.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem18), err)
    }
    p.Success = append(p.Success, _elem18)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *RecommendServiceFetchBannerDataResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("fetchBannerData_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RecommendServiceFetchBannerDataResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *RecommendServiceFetchBannerDataResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RecommendServiceFetchBannerDataResult(%+v)", *p)
}


