#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys

from thrift.transport import TTransport
all_structs = []


class AdditionalInfo(object):
    """
    Attributes:
     - resourceType
     - id
     - name
     - icon
    """


    def __init__(self, resourceType=None, id=None, name=None, icon=None,):
        self.resourceType = resourceType
        self.id = id
        self.name = name
        self.icon = icon

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.resourceType = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.icon = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('AdditionalInfo')
        if self.resourceType is not None:
            oprot.writeFieldBegin('resourceType', TType.STRING, 1)
            oprot.writeString(self.resourceType.encode('utf-8') if sys.version_info[0] == 2 else self.resourceType)
            oprot.writeFieldEnd()
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 2)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 3)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.icon is not None:
            oprot.writeFieldBegin('icon', TType.STRING, 4)
            oprot.writeString(self.icon.encode('utf-8') if sys.version_info[0] == 2 else self.icon)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class LocalFileInfo(object):
    """
    Attributes:
     - fileName
     - title
     - duration
    """


    def __init__(self, fileName=None, title=None, duration=None,):
        self.fileName = fileName
        self.title = title
        self.duration = duration

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.fileName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.title = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.duration = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('LocalFileInfo')
        if self.fileName is not None:
            oprot.writeFieldBegin('fileName', TType.STRING, 1)
            oprot.writeString(self.fileName.encode('utf-8') if sys.version_info[0] == 2 else self.fileName)
            oprot.writeFieldEnd()
        if self.title is not None:
            oprot.writeFieldBegin('title', TType.STRING, 2)
            oprot.writeString(self.title.encode('utf-8') if sys.version_info[0] == 2 else self.title)
            oprot.writeFieldEnd()
        if self.duration is not None:
            oprot.writeFieldBegin('duration', TType.I32, 3)
            oprot.writeI32(self.duration)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Request(object):
    """
    Attributes:
     - interfaceName
     - userId
     - cardId
     - num
     - finalId
     - type
     - resourceId
     - resourceType
     - platformId
     - tabId
     - interfaceNewName
     - localFileInfo
     - country
     - area
     - language
     - networkStatus
     - deviceInfo
     - filterId
     - entranceType
     - languageList
     - nextToken
     - searchContent
     - genresList
     - logId
     - serviceName
     - envOption
     - timeSign
     - execTimeSign
     - execTimeDelay
     - debugOption
     - clientVersion
     - browseLangs
     - sortOpt
     - singerList
     - actorList
     - directorList
     - releaseYears
     - redPoint
    """


    def __init__(self, interfaceName=None, userId=None, cardId=None, num=None, finalId=None, type=None, resourceId=None, resourceType=None, platformId=None, tabId=None, interfaceNewName=None, localFileInfo=None, country=None, area=None, language=None, networkStatus=None, deviceInfo=None, filterId=None, entranceType=None, languageList=None, nextToken=None, searchContent=None, genresList=None, logId=None, serviceName=None, envOption=None, timeSign=None, execTimeSign=None, execTimeDelay=None, debugOption=None, clientVersion=None, browseLangs=None, sortOpt=None, singerList=None, actorList=None, directorList=None, releaseYears=None, redPoint=None,):
        self.interfaceName = interfaceName
        self.userId = userId
        self.cardId = cardId
        self.num = num
        self.finalId = finalId
        self.type = type
        self.resourceId = resourceId
        self.resourceType = resourceType
        self.platformId = platformId
        self.tabId = tabId
        self.interfaceNewName = interfaceNewName
        self.localFileInfo = localFileInfo
        self.country = country
        self.area = area
        self.language = language
        self.networkStatus = networkStatus
        self.deviceInfo = deviceInfo
        self.filterId = filterId
        self.entranceType = entranceType
        self.languageList = languageList
        self.nextToken = nextToken
        self.searchContent = searchContent
        self.genresList = genresList
        self.logId = logId
        self.serviceName = serviceName
        self.envOption = envOption
        self.timeSign = timeSign
        self.execTimeSign = execTimeSign
        self.execTimeDelay = execTimeDelay
        self.debugOption = debugOption
        self.clientVersion = clientVersion
        self.browseLangs = browseLangs
        self.sortOpt = sortOpt
        self.singerList = singerList
        self.actorList = actorList
        self.directorList = directorList
        self.releaseYears = releaseYears
        self.redPoint = redPoint

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.interfaceName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.userId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.cardId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.num = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.finalId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.BYTE:
                    self.type = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.resourceId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.resourceType = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.platformId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.tabId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.interfaceNewName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRUCT:
                    self.localFileInfo = LocalFileInfo()
                    self.localFileInfo.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.STRING:
                    self.country = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.STRING:
                    self.area = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.STRING:
                    self.language = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.STRING:
                    self.networkStatus = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 17:
                if ftype == TType.STRING:
                    self.deviceInfo = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 18:
                if ftype == TType.STRING:
                    self.filterId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 19:
                if ftype == TType.STRING:
                    self.entranceType = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 20:
                if ftype == TType.LIST:
                    self.languageList = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.languageList.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 21:
                if ftype == TType.STRING:
                    self.nextToken = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 22:
                if ftype == TType.STRING:
                    self.searchContent = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 23:
                if ftype == TType.LIST:
                    self.genresList = []
                    (_etype9, _size6) = iprot.readListBegin()
                    for _i10 in range(_size6):
                        _elem11 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.genresList.append(_elem11)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 24:
                if ftype == TType.STRING:
                    self.logId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 25:
                if ftype == TType.STRING:
                    self.serviceName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 26:
                if ftype == TType.STRING:
                    self.envOption = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 27:
                if ftype == TType.STRING:
                    self.timeSign = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 28:
                if ftype == TType.STRING:
                    self.execTimeSign = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 29:
                if ftype == TType.STRING:
                    self.execTimeDelay = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 30:
                if ftype == TType.STRING:
                    self.debugOption = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 31:
                if ftype == TType.STRING:
                    self.clientVersion = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 32:
                if ftype == TType.LIST:
                    self.browseLangs = []
                    (_etype15, _size12) = iprot.readListBegin()
                    for _i16 in range(_size12):
                        _elem17 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.browseLangs.append(_elem17)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 33:
                if ftype == TType.STRING:
                    self.sortOpt = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 34:
                if ftype == TType.LIST:
                    self.singerList = []
                    (_etype21, _size18) = iprot.readListBegin()
                    for _i22 in range(_size18):
                        _elem23 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.singerList.append(_elem23)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 35:
                if ftype == TType.LIST:
                    self.actorList = []
                    (_etype27, _size24) = iprot.readListBegin()
                    for _i28 in range(_size24):
                        _elem29 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.actorList.append(_elem29)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 36:
                if ftype == TType.LIST:
                    self.directorList = []
                    (_etype33, _size30) = iprot.readListBegin()
                    for _i34 in range(_size30):
                        _elem35 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.directorList.append(_elem35)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 37:
                if ftype == TType.LIST:
                    self.releaseYears = []
                    (_etype39, _size36) = iprot.readListBegin()
                    for _i40 in range(_size36):
                        _elem41 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.releaseYears.append(_elem41)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 38:
                if ftype == TType.STRING:
                    self.redPoint = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Request')
        if self.interfaceName is not None:
            oprot.writeFieldBegin('interfaceName', TType.STRING, 1)
            oprot.writeString(self.interfaceName.encode('utf-8') if sys.version_info[0] == 2 else self.interfaceName)
            oprot.writeFieldEnd()
        if self.userId is not None:
            oprot.writeFieldBegin('userId', TType.STRING, 2)
            oprot.writeString(self.userId.encode('utf-8') if sys.version_info[0] == 2 else self.userId)
            oprot.writeFieldEnd()
        if self.cardId is not None:
            oprot.writeFieldBegin('cardId', TType.STRING, 3)
            oprot.writeString(self.cardId.encode('utf-8') if sys.version_info[0] == 2 else self.cardId)
            oprot.writeFieldEnd()
        if self.num is not None:
            oprot.writeFieldBegin('num', TType.I32, 4)
            oprot.writeI32(self.num)
            oprot.writeFieldEnd()
        if self.finalId is not None:
            oprot.writeFieldBegin('finalId', TType.STRING, 5)
            oprot.writeString(self.finalId.encode('utf-8') if sys.version_info[0] == 2 else self.finalId)
            oprot.writeFieldEnd()
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.BYTE, 6)
            oprot.writeByte(self.type)
            oprot.writeFieldEnd()
        if self.resourceId is not None:
            oprot.writeFieldBegin('resourceId', TType.STRING, 7)
            oprot.writeString(self.resourceId.encode('utf-8') if sys.version_info[0] == 2 else self.resourceId)
            oprot.writeFieldEnd()
        if self.resourceType is not None:
            oprot.writeFieldBegin('resourceType', TType.STRING, 8)
            oprot.writeString(self.resourceType.encode('utf-8') if sys.version_info[0] == 2 else self.resourceType)
            oprot.writeFieldEnd()
        if self.platformId is not None:
            oprot.writeFieldBegin('platformId', TType.STRING, 9)
            oprot.writeString(self.platformId.encode('utf-8') if sys.version_info[0] == 2 else self.platformId)
            oprot.writeFieldEnd()
        if self.tabId is not None:
            oprot.writeFieldBegin('tabId', TType.STRING, 10)
            oprot.writeString(self.tabId.encode('utf-8') if sys.version_info[0] == 2 else self.tabId)
            oprot.writeFieldEnd()
        if self.interfaceNewName is not None:
            oprot.writeFieldBegin('interfaceNewName', TType.STRING, 11)
            oprot.writeString(self.interfaceNewName.encode('utf-8') if sys.version_info[0] == 2 else self.interfaceNewName)
            oprot.writeFieldEnd()
        if self.localFileInfo is not None:
            oprot.writeFieldBegin('localFileInfo', TType.STRUCT, 12)
            self.localFileInfo.write(oprot)
            oprot.writeFieldEnd()
        if self.country is not None:
            oprot.writeFieldBegin('country', TType.STRING, 13)
            oprot.writeString(self.country.encode('utf-8') if sys.version_info[0] == 2 else self.country)
            oprot.writeFieldEnd()
        if self.area is not None:
            oprot.writeFieldBegin('area', TType.STRING, 14)
            oprot.writeString(self.area.encode('utf-8') if sys.version_info[0] == 2 else self.area)
            oprot.writeFieldEnd()
        if self.language is not None:
            oprot.writeFieldBegin('language', TType.STRING, 15)
            oprot.writeString(self.language.encode('utf-8') if sys.version_info[0] == 2 else self.language)
            oprot.writeFieldEnd()
        if self.networkStatus is not None:
            oprot.writeFieldBegin('networkStatus', TType.STRING, 16)
            oprot.writeString(self.networkStatus.encode('utf-8') if sys.version_info[0] == 2 else self.networkStatus)
            oprot.writeFieldEnd()
        if self.deviceInfo is not None:
            oprot.writeFieldBegin('deviceInfo', TType.STRING, 17)
            oprot.writeString(self.deviceInfo.encode('utf-8') if sys.version_info[0] == 2 else self.deviceInfo)
            oprot.writeFieldEnd()
        if self.filterId is not None:
            oprot.writeFieldBegin('filterId', TType.STRING, 18)
            oprot.writeString(self.filterId.encode('utf-8') if sys.version_info[0] == 2 else self.filterId)
            oprot.writeFieldEnd()
        if self.entranceType is not None:
            oprot.writeFieldBegin('entranceType', TType.STRING, 19)
            oprot.writeString(self.entranceType.encode('utf-8') if sys.version_info[0] == 2 else self.entranceType)
            oprot.writeFieldEnd()
        if self.languageList is not None:
            oprot.writeFieldBegin('languageList', TType.LIST, 20)
            oprot.writeListBegin(TType.STRING, len(self.languageList))
            for iter42 in self.languageList:
                oprot.writeString(iter42.encode('utf-8') if sys.version_info[0] == 2 else iter42)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.nextToken is not None:
            oprot.writeFieldBegin('nextToken', TType.STRING, 21)
            oprot.writeString(self.nextToken.encode('utf-8') if sys.version_info[0] == 2 else self.nextToken)
            oprot.writeFieldEnd()
        if self.searchContent is not None:
            oprot.writeFieldBegin('searchContent', TType.STRING, 22)
            oprot.writeString(self.searchContent.encode('utf-8') if sys.version_info[0] == 2 else self.searchContent)
            oprot.writeFieldEnd()
        if self.genresList is not None:
            oprot.writeFieldBegin('genresList', TType.LIST, 23)
            oprot.writeListBegin(TType.STRING, len(self.genresList))
            for iter43 in self.genresList:
                oprot.writeString(iter43.encode('utf-8') if sys.version_info[0] == 2 else iter43)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.logId is not None:
            oprot.writeFieldBegin('logId', TType.STRING, 24)
            oprot.writeString(self.logId.encode('utf-8') if sys.version_info[0] == 2 else self.logId)
            oprot.writeFieldEnd()
        if self.serviceName is not None:
            oprot.writeFieldBegin('serviceName', TType.STRING, 25)
            oprot.writeString(self.serviceName.encode('utf-8') if sys.version_info[0] == 2 else self.serviceName)
            oprot.writeFieldEnd()
        if self.envOption is not None:
            oprot.writeFieldBegin('envOption', TType.STRING, 26)
            oprot.writeString(self.envOption.encode('utf-8') if sys.version_info[0] == 2 else self.envOption)
            oprot.writeFieldEnd()
        if self.timeSign is not None:
            oprot.writeFieldBegin('timeSign', TType.STRING, 27)
            oprot.writeString(self.timeSign.encode('utf-8') if sys.version_info[0] == 2 else self.timeSign)
            oprot.writeFieldEnd()
        if self.execTimeSign is not None:
            oprot.writeFieldBegin('execTimeSign', TType.STRING, 28)
            oprot.writeString(self.execTimeSign.encode('utf-8') if sys.version_info[0] == 2 else self.execTimeSign)
            oprot.writeFieldEnd()
        if self.execTimeDelay is not None:
            oprot.writeFieldBegin('execTimeDelay', TType.STRING, 29)
            oprot.writeString(self.execTimeDelay.encode('utf-8') if sys.version_info[0] == 2 else self.execTimeDelay)
            oprot.writeFieldEnd()
        if self.debugOption is not None:
            oprot.writeFieldBegin('debugOption', TType.STRING, 30)
            oprot.writeString(self.debugOption.encode('utf-8') if sys.version_info[0] == 2 else self.debugOption)
            oprot.writeFieldEnd()
        if self.clientVersion is not None:
            oprot.writeFieldBegin('clientVersion', TType.STRING, 31)
            oprot.writeString(self.clientVersion.encode('utf-8') if sys.version_info[0] == 2 else self.clientVersion)
            oprot.writeFieldEnd()
        if self.browseLangs is not None:
            oprot.writeFieldBegin('browseLangs', TType.LIST, 32)
            oprot.writeListBegin(TType.STRING, len(self.browseLangs))
            for iter44 in self.browseLangs:
                oprot.writeString(iter44.encode('utf-8') if sys.version_info[0] == 2 else iter44)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.sortOpt is not None:
            oprot.writeFieldBegin('sortOpt', TType.STRING, 33)
            oprot.writeString(self.sortOpt.encode('utf-8') if sys.version_info[0] == 2 else self.sortOpt)
            oprot.writeFieldEnd()
        if self.singerList is not None:
            oprot.writeFieldBegin('singerList', TType.LIST, 34)
            oprot.writeListBegin(TType.STRING, len(self.singerList))
            for iter45 in self.singerList:
                oprot.writeString(iter45.encode('utf-8') if sys.version_info[0] == 2 else iter45)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.actorList is not None:
            oprot.writeFieldBegin('actorList', TType.LIST, 35)
            oprot.writeListBegin(TType.STRING, len(self.actorList))
            for iter46 in self.actorList:
                oprot.writeString(iter46.encode('utf-8') if sys.version_info[0] == 2 else iter46)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.directorList is not None:
            oprot.writeFieldBegin('directorList', TType.LIST, 36)
            oprot.writeListBegin(TType.STRING, len(self.directorList))
            for iter47 in self.directorList:
                oprot.writeString(iter47.encode('utf-8') if sys.version_info[0] == 2 else iter47)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.releaseYears is not None:
            oprot.writeFieldBegin('releaseYears', TType.LIST, 37)
            oprot.writeListBegin(TType.STRING, len(self.releaseYears))
            for iter48 in self.releaseYears:
                oprot.writeString(iter48.encode('utf-8') if sys.version_info[0] == 2 else iter48)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.redPoint is not None:
            oprot.writeFieldBegin('redPoint', TType.STRING, 38)
            oprot.writeString(self.redPoint.encode('utf-8') if sys.version_info[0] == 2 else self.redPoint)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Genres(object):
    """
    Attributes:
     - genresId
     - genresName
     - backgroundPic
    """


    def __init__(self, genresId=None, genresName=None, backgroundPic=None,):
        self.genresId = genresId
        self.genresName = genresName
        self.backgroundPic = backgroundPic

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.genresId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.genresName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.backgroundPic = []
                    (_etype52, _size49) = iprot.readListBegin()
                    for _i53 in range(_size49):
                        _elem54 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.backgroundPic.append(_elem54)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Genres')
        if self.genresId is not None:
            oprot.writeFieldBegin('genresId', TType.STRING, 1)
            oprot.writeString(self.genresId.encode('utf-8') if sys.version_info[0] == 2 else self.genresId)
            oprot.writeFieldEnd()
        if self.genresName is not None:
            oprot.writeFieldBegin('genresName', TType.STRING, 2)
            oprot.writeString(self.genresName.encode('utf-8') if sys.version_info[0] == 2 else self.genresName)
            oprot.writeFieldEnd()
        if self.backgroundPic is not None:
            oprot.writeFieldBegin('backgroundPic', TType.LIST, 3)
            oprot.writeListBegin(TType.STRING, len(self.backgroundPic))
            for iter55 in self.backgroundPic:
                oprot.writeString(iter55.encode('utf-8') if sys.version_info[0] == 2 else iter55)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Result(object):
    """
    Attributes:
     - id
     - recallSign
     - resultType
     - preLoadTime
     - attachContent
     - languageList
     - releaseDate
     - heat
    """


    def __init__(self, id=None, recallSign=None, resultType=None, preLoadTime=None, attachContent=None, languageList=None, releaseDate=None, heat=None,):
        self.id = id
        self.recallSign = recallSign
        self.resultType = resultType
        self.preLoadTime = preLoadTime
        self.attachContent = attachContent
        self.languageList = languageList
        self.releaseDate = releaseDate
        self.heat = heat

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.recallSign = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.resultType = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.preLoadTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.attachContent = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.LIST:
                    self.languageList = []
                    (_etype59, _size56) = iprot.readListBegin()
                    for _i60 in range(_size56):
                        _elem61 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.languageList.append(_elem61)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I64:
                    self.releaseDate = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.DOUBLE:
                    self.heat = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Result')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 1)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        if self.recallSign is not None:
            oprot.writeFieldBegin('recallSign', TType.I64, 2)
            oprot.writeI64(self.recallSign)
            oprot.writeFieldEnd()
        if self.resultType is not None:
            oprot.writeFieldBegin('resultType', TType.STRING, 3)
            oprot.writeString(self.resultType.encode('utf-8') if sys.version_info[0] == 2 else self.resultType)
            oprot.writeFieldEnd()
        if self.preLoadTime is not None:
            oprot.writeFieldBegin('preLoadTime', TType.I64, 4)
            oprot.writeI64(self.preLoadTime)
            oprot.writeFieldEnd()
        if self.attachContent is not None:
            oprot.writeFieldBegin('attachContent', TType.STRING, 5)
            oprot.writeString(self.attachContent.encode('utf-8') if sys.version_info[0] == 2 else self.attachContent)
            oprot.writeFieldEnd()
        if self.languageList is not None:
            oprot.writeFieldBegin('languageList', TType.LIST, 6)
            oprot.writeListBegin(TType.STRING, len(self.languageList))
            for iter62 in self.languageList:
                oprot.writeString(iter62.encode('utf-8') if sys.version_info[0] == 2 else iter62)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.releaseDate is not None:
            oprot.writeFieldBegin('releaseDate', TType.I64, 7)
            oprot.writeI64(self.releaseDate)
            oprot.writeFieldEnd()
        if self.heat is not None:
            oprot.writeFieldBegin('heat', TType.DOUBLE, 8)
            oprot.writeDouble(self.heat)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Card(object):
    """
    Attributes:
     - cardName
     - cardId
     - listStyle
     - moreStyle
     - icon
     - languageList
     - isRandom
     - cardType
     - description
     - flagName
     - flagColor
     - featuredType
     - originalThumbnail
     - preLoadTime
     - attachContent
     - cardContentType
     - personScore
     - recallType
     - strategyType
     - clientVersionInfo
     - backgroundColorCode
    """


    def __init__(self, cardName=None, cardId=None, listStyle=None, moreStyle=None, icon=None, languageList=None, isRandom=None, cardType=None, description=None, flagName=None, flagColor=None, featuredType=None, originalThumbnail=None, preLoadTime=None, attachContent=None, cardContentType=None, personScore=None, recallType=None, strategyType=None, clientVersionInfo=None, backgroundColorCode=None,):
        self.cardName = cardName
        self.cardId = cardId
        self.listStyle = listStyle
        self.moreStyle = moreStyle
        self.icon = icon
        self.languageList = languageList
        self.isRandom = isRandom
        self.cardType = cardType
        self.description = description
        self.flagName = flagName
        self.flagColor = flagColor
        self.featuredType = featuredType
        self.originalThumbnail = originalThumbnail
        self.preLoadTime = preLoadTime
        self.attachContent = attachContent
        self.cardContentType = cardContentType
        self.personScore = personScore
        self.recallType = recallType
        self.strategyType = strategyType
        self.clientVersionInfo = clientVersionInfo
        self.backgroundColorCode = backgroundColorCode

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.cardName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.cardId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.listStyle = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.moreStyle = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.icon = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.LIST:
                    self.languageList = []
                    (_etype66, _size63) = iprot.readListBegin()
                    for _i67 in range(_size63):
                        _elem68 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.languageList.append(_elem68)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.BOOL:
                    self.isRandom = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I32:
                    self.cardType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.description = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.flagName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.flagColor = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRING:
                    self.featuredType = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.STRING:
                    self.originalThumbnail = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.I64:
                    self.preLoadTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.STRING:
                    self.attachContent = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.STRING:
                    self.cardContentType = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 17:
                if ftype == TType.DOUBLE:
                    self.personScore = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 18:
                if ftype == TType.STRING:
                    self.recallType = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 19:
                if ftype == TType.STRING:
                    self.strategyType = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 20:
                if ftype == TType.STRING:
                    self.clientVersionInfo = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 21:
                if ftype == TType.STRING:
                    self.backgroundColorCode = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Card')
        if self.cardName is not None:
            oprot.writeFieldBegin('cardName', TType.STRING, 1)
            oprot.writeString(self.cardName.encode('utf-8') if sys.version_info[0] == 2 else self.cardName)
            oprot.writeFieldEnd()
        if self.cardId is not None:
            oprot.writeFieldBegin('cardId', TType.STRING, 2)
            oprot.writeString(self.cardId.encode('utf-8') if sys.version_info[0] == 2 else self.cardId)
            oprot.writeFieldEnd()
        if self.listStyle is not None:
            oprot.writeFieldBegin('listStyle', TType.STRING, 3)
            oprot.writeString(self.listStyle.encode('utf-8') if sys.version_info[0] == 2 else self.listStyle)
            oprot.writeFieldEnd()
        if self.moreStyle is not None:
            oprot.writeFieldBegin('moreStyle', TType.STRING, 4)
            oprot.writeString(self.moreStyle.encode('utf-8') if sys.version_info[0] == 2 else self.moreStyle)
            oprot.writeFieldEnd()
        if self.icon is not None:
            oprot.writeFieldBegin('icon', TType.STRING, 5)
            oprot.writeString(self.icon.encode('utf-8') if sys.version_info[0] == 2 else self.icon)
            oprot.writeFieldEnd()
        if self.languageList is not None:
            oprot.writeFieldBegin('languageList', TType.LIST, 6)
            oprot.writeListBegin(TType.STRING, len(self.languageList))
            for iter69 in self.languageList:
                oprot.writeString(iter69.encode('utf-8') if sys.version_info[0] == 2 else iter69)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.isRandom is not None:
            oprot.writeFieldBegin('isRandom', TType.BOOL, 7)
            oprot.writeBool(self.isRandom)
            oprot.writeFieldEnd()
        if self.cardType is not None:
            oprot.writeFieldBegin('cardType', TType.I32, 8)
            oprot.writeI32(self.cardType)
            oprot.writeFieldEnd()
        if self.description is not None:
            oprot.writeFieldBegin('description', TType.STRING, 9)
            oprot.writeString(self.description.encode('utf-8') if sys.version_info[0] == 2 else self.description)
            oprot.writeFieldEnd()
        if self.flagName is not None:
            oprot.writeFieldBegin('flagName', TType.STRING, 10)
            oprot.writeString(self.flagName.encode('utf-8') if sys.version_info[0] == 2 else self.flagName)
            oprot.writeFieldEnd()
        if self.flagColor is not None:
            oprot.writeFieldBegin('flagColor', TType.STRING, 11)
            oprot.writeString(self.flagColor.encode('utf-8') if sys.version_info[0] == 2 else self.flagColor)
            oprot.writeFieldEnd()
        if self.featuredType is not None:
            oprot.writeFieldBegin('featuredType', TType.STRING, 12)
            oprot.writeString(self.featuredType.encode('utf-8') if sys.version_info[0] == 2 else self.featuredType)
            oprot.writeFieldEnd()
        if self.originalThumbnail is not None:
            oprot.writeFieldBegin('originalThumbnail', TType.STRING, 13)
            oprot.writeString(self.originalThumbnail.encode('utf-8') if sys.version_info[0] == 2 else self.originalThumbnail)
            oprot.writeFieldEnd()
        if self.preLoadTime is not None:
            oprot.writeFieldBegin('preLoadTime', TType.I64, 14)
            oprot.writeI64(self.preLoadTime)
            oprot.writeFieldEnd()
        if self.attachContent is not None:
            oprot.writeFieldBegin('attachContent', TType.STRING, 15)
            oprot.writeString(self.attachContent.encode('utf-8') if sys.version_info[0] == 2 else self.attachContent)
            oprot.writeFieldEnd()
        if self.cardContentType is not None:
            oprot.writeFieldBegin('cardContentType', TType.STRING, 16)
            oprot.writeString(self.cardContentType.encode('utf-8') if sys.version_info[0] == 2 else self.cardContentType)
            oprot.writeFieldEnd()
        if self.personScore is not None:
            oprot.writeFieldBegin('personScore', TType.DOUBLE, 17)
            oprot.writeDouble(self.personScore)
            oprot.writeFieldEnd()
        if self.recallType is not None:
            oprot.writeFieldBegin('recallType', TType.STRING, 18)
            oprot.writeString(self.recallType.encode('utf-8') if sys.version_info[0] == 2 else self.recallType)
            oprot.writeFieldEnd()
        if self.strategyType is not None:
            oprot.writeFieldBegin('strategyType', TType.STRING, 19)
            oprot.writeString(self.strategyType.encode('utf-8') if sys.version_info[0] == 2 else self.strategyType)
            oprot.writeFieldEnd()
        if self.clientVersionInfo is not None:
            oprot.writeFieldBegin('clientVersionInfo', TType.STRING, 20)
            oprot.writeString(self.clientVersionInfo.encode('utf-8') if sys.version_info[0] == 2 else self.clientVersionInfo)
            oprot.writeFieldEnd()
        if self.backgroundColorCode is not None:
            oprot.writeFieldBegin('backgroundColorCode', TType.STRING, 21)
            oprot.writeString(self.backgroundColorCode.encode('utf-8') if sys.version_info[0] == 2 else self.backgroundColorCode)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Tabs(object):
    """
    Attributes:
     - tabName
     - tabId
     - cardList
     - style
     - nextToken
     - attachContent
    """


    def __init__(self, tabName=None, tabId=None, cardList=None, style=None, nextToken=None, attachContent=None,):
        self.tabName = tabName
        self.tabId = tabId
        self.cardList = cardList
        self.style = style
        self.nextToken = nextToken
        self.attachContent = attachContent

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.tabName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.tabId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.cardList = []
                    (_etype73, _size70) = iprot.readListBegin()
                    for _i74 in range(_size70):
                        _elem75 = Card()
                        _elem75.read(iprot)
                        self.cardList.append(_elem75)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.style = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.nextToken = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.attachContent = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Tabs')
        if self.tabName is not None:
            oprot.writeFieldBegin('tabName', TType.STRING, 1)
            oprot.writeString(self.tabName.encode('utf-8') if sys.version_info[0] == 2 else self.tabName)
            oprot.writeFieldEnd()
        if self.tabId is not None:
            oprot.writeFieldBegin('tabId', TType.STRING, 2)
            oprot.writeString(self.tabId.encode('utf-8') if sys.version_info[0] == 2 else self.tabId)
            oprot.writeFieldEnd()
        if self.cardList is not None:
            oprot.writeFieldBegin('cardList', TType.LIST, 3)
            oprot.writeListBegin(TType.STRUCT, len(self.cardList))
            for iter76 in self.cardList:
                iter76.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.style is not None:
            oprot.writeFieldBegin('style', TType.STRING, 4)
            oprot.writeString(self.style.encode('utf-8') if sys.version_info[0] == 2 else self.style)
            oprot.writeFieldEnd()
        if self.nextToken is not None:
            oprot.writeFieldBegin('nextToken', TType.STRING, 5)
            oprot.writeString(self.nextToken.encode('utf-8') if sys.version_info[0] == 2 else self.nextToken)
            oprot.writeFieldEnd()
        if self.attachContent is not None:
            oprot.writeFieldBegin('attachContent', TType.STRING, 6)
            oprot.writeString(self.attachContent.encode('utf-8') if sys.version_info[0] == 2 else self.attachContent)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Banner(object):
    """
    Attributes:
     - bannerName
     - bannerType
     - headPicture
     - description
     - subTitle
     - additionalInfos
     - order
     - bannerId
     - preLoadTime
     - attachContent
    """


    def __init__(self, bannerName=None, bannerType=None, headPicture=None, description=None, subTitle=None, additionalInfos=None, order=None, bannerId=None, preLoadTime=None, attachContent=None,):
        self.bannerName = bannerName
        self.bannerType = bannerType
        self.headPicture = headPicture
        self.description = description
        self.subTitle = subTitle
        self.additionalInfos = additionalInfos
        self.order = order
        self.bannerId = bannerId
        self.preLoadTime = preLoadTime
        self.attachContent = attachContent

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.bannerName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.bannerType = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.headPicture = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.description = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.subTitle = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.LIST:
                    self.additionalInfos = []
                    (_etype80, _size77) = iprot.readListBegin()
                    for _i81 in range(_size77):
                        _elem82 = AdditionalInfo()
                        _elem82.read(iprot)
                        self.additionalInfos.append(_elem82)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.order = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.bannerId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.I64:
                    self.preLoadTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.attachContent = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Banner')
        if self.bannerName is not None:
            oprot.writeFieldBegin('bannerName', TType.STRING, 1)
            oprot.writeString(self.bannerName.encode('utf-8') if sys.version_info[0] == 2 else self.bannerName)
            oprot.writeFieldEnd()
        if self.bannerType is not None:
            oprot.writeFieldBegin('bannerType', TType.STRING, 2)
            oprot.writeString(self.bannerType.encode('utf-8') if sys.version_info[0] == 2 else self.bannerType)
            oprot.writeFieldEnd()
        if self.headPicture is not None:
            oprot.writeFieldBegin('headPicture', TType.STRING, 3)
            oprot.writeString(self.headPicture.encode('utf-8') if sys.version_info[0] == 2 else self.headPicture)
            oprot.writeFieldEnd()
        if self.description is not None:
            oprot.writeFieldBegin('description', TType.STRING, 4)
            oprot.writeString(self.description.encode('utf-8') if sys.version_info[0] == 2 else self.description)
            oprot.writeFieldEnd()
        if self.subTitle is not None:
            oprot.writeFieldBegin('subTitle', TType.STRING, 5)
            oprot.writeString(self.subTitle.encode('utf-8') if sys.version_info[0] == 2 else self.subTitle)
            oprot.writeFieldEnd()
        if self.additionalInfos is not None:
            oprot.writeFieldBegin('additionalInfos', TType.LIST, 6)
            oprot.writeListBegin(TType.STRUCT, len(self.additionalInfos))
            for iter83 in self.additionalInfos:
                iter83.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.order is not None:
            oprot.writeFieldBegin('order', TType.I32, 7)
            oprot.writeI32(self.order)
            oprot.writeFieldEnd()
        if self.bannerId is not None:
            oprot.writeFieldBegin('bannerId', TType.STRING, 8)
            oprot.writeString(self.bannerId.encode('utf-8') if sys.version_info[0] == 2 else self.bannerId)
            oprot.writeFieldEnd()
        if self.preLoadTime is not None:
            oprot.writeFieldBegin('preLoadTime', TType.I64, 9)
            oprot.writeI64(self.preLoadTime)
            oprot.writeFieldEnd()
        if self.attachContent is not None:
            oprot.writeFieldBegin('attachContent', TType.STRING, 10)
            oprot.writeString(self.attachContent.encode('utf-8') if sys.version_info[0] == 2 else self.attachContent)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Response(object):
    """
    Attributes:
     - resultList
     - smallFlowTag
     - flag
     - requestChannel
     - responseType
     - listStyle
     - moreStyle
     - hasHead
     - hasTail
     - disableCache
     - logId
     - serviceName
     - resStatus
     - debugInfo
    """


    def __init__(self, resultList=None, smallFlowTag=None, flag=None, requestChannel=None, responseType=None, listStyle=None, moreStyle=None, hasHead=None, hasTail=None, disableCache=None, logId=None, serviceName=None, resStatus=None, debugInfo=None,):
        self.resultList = resultList
        self.smallFlowTag = smallFlowTag
        self.flag = flag
        self.requestChannel = requestChannel
        self.responseType = responseType
        self.listStyle = listStyle
        self.moreStyle = moreStyle
        self.hasHead = hasHead
        self.hasTail = hasTail
        self.disableCache = disableCache
        self.logId = logId
        self.serviceName = serviceName
        self.resStatus = resStatus
        self.debugInfo = debugInfo

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.resultList = []
                    (_etype87, _size84) = iprot.readListBegin()
                    for _i88 in range(_size84):
                        _elem89 = Result()
                        _elem89.read(iprot)
                        self.resultList.append(_elem89)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.smallFlowTag = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I16:
                    self.flag = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.requestChannel = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.responseType = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.listStyle = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.moreStyle = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.BYTE:
                    self.hasHead = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.BYTE:
                    self.hasTail = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.BOOL:
                    self.disableCache = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.logId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRING:
                    self.serviceName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.STRING:
                    self.resStatus = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.STRING:
                    self.debugInfo = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Response')
        if self.resultList is not None:
            oprot.writeFieldBegin('resultList', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.resultList))
            for iter90 in self.resultList:
                iter90.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.smallFlowTag is not None:
            oprot.writeFieldBegin('smallFlowTag', TType.STRING, 2)
            oprot.writeString(self.smallFlowTag.encode('utf-8') if sys.version_info[0] == 2 else self.smallFlowTag)
            oprot.writeFieldEnd()
        if self.flag is not None:
            oprot.writeFieldBegin('flag', TType.I16, 3)
            oprot.writeI16(self.flag)
            oprot.writeFieldEnd()
        if self.requestChannel is not None:
            oprot.writeFieldBegin('requestChannel', TType.STRING, 4)
            oprot.writeString(self.requestChannel.encode('utf-8') if sys.version_info[0] == 2 else self.requestChannel)
            oprot.writeFieldEnd()
        if self.responseType is not None:
            oprot.writeFieldBegin('responseType', TType.STRING, 5)
            oprot.writeString(self.responseType.encode('utf-8') if sys.version_info[0] == 2 else self.responseType)
            oprot.writeFieldEnd()
        if self.listStyle is not None:
            oprot.writeFieldBegin('listStyle', TType.STRING, 6)
            oprot.writeString(self.listStyle.encode('utf-8') if sys.version_info[0] == 2 else self.listStyle)
            oprot.writeFieldEnd()
        if self.moreStyle is not None:
            oprot.writeFieldBegin('moreStyle', TType.STRING, 7)
            oprot.writeString(self.moreStyle.encode('utf-8') if sys.version_info[0] == 2 else self.moreStyle)
            oprot.writeFieldEnd()
        if self.hasHead is not None:
            oprot.writeFieldBegin('hasHead', TType.BYTE, 8)
            oprot.writeByte(self.hasHead)
            oprot.writeFieldEnd()
        if self.hasTail is not None:
            oprot.writeFieldBegin('hasTail', TType.BYTE, 9)
            oprot.writeByte(self.hasTail)
            oprot.writeFieldEnd()
        if self.disableCache is not None:
            oprot.writeFieldBegin('disableCache', TType.BOOL, 10)
            oprot.writeBool(self.disableCache)
            oprot.writeFieldEnd()
        if self.logId is not None:
            oprot.writeFieldBegin('logId', TType.STRING, 11)
            oprot.writeString(self.logId.encode('utf-8') if sys.version_info[0] == 2 else self.logId)
            oprot.writeFieldEnd()
        if self.serviceName is not None:
            oprot.writeFieldBegin('serviceName', TType.STRING, 12)
            oprot.writeString(self.serviceName.encode('utf-8') if sys.version_info[0] == 2 else self.serviceName)
            oprot.writeFieldEnd()
        if self.resStatus is not None:
            oprot.writeFieldBegin('resStatus', TType.STRING, 13)
            oprot.writeString(self.resStatus.encode('utf-8') if sys.version_info[0] == 2 else self.resStatus)
            oprot.writeFieldEnd()
        if self.debugInfo is not None:
            oprot.writeFieldBegin('debugInfo', TType.STRING, 14)
            oprot.writeString(self.debugInfo.encode('utf-8') if sys.version_info[0] == 2 else self.debugInfo)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(AdditionalInfo)
AdditionalInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'resourceType', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'id', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'name', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'icon', 'UTF8', None, ),  # 4
)
all_structs.append(LocalFileInfo)
LocalFileInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'fileName', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'title', 'UTF8', None, ),  # 2
    (3, TType.I32, 'duration', None, None, ),  # 3
)
all_structs.append(Request)
Request.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'interfaceName', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'userId', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'cardId', 'UTF8', None, ),  # 3
    (4, TType.I32, 'num', None, None, ),  # 4
    (5, TType.STRING, 'finalId', 'UTF8', None, ),  # 5
    (6, TType.BYTE, 'type', None, None, ),  # 6
    (7, TType.STRING, 'resourceId', 'UTF8', None, ),  # 7
    (8, TType.STRING, 'resourceType', 'UTF8', None, ),  # 8
    (9, TType.STRING, 'platformId', 'UTF8', None, ),  # 9
    (10, TType.STRING, 'tabId', 'UTF8', None, ),  # 10
    (11, TType.STRING, 'interfaceNewName', 'UTF8', None, ),  # 11
    (12, TType.STRUCT, 'localFileInfo', [LocalFileInfo, None], None, ),  # 12
    (13, TType.STRING, 'country', 'UTF8', None, ),  # 13
    (14, TType.STRING, 'area', 'UTF8', None, ),  # 14
    (15, TType.STRING, 'language', 'UTF8', None, ),  # 15
    (16, TType.STRING, 'networkStatus', 'UTF8', None, ),  # 16
    (17, TType.STRING, 'deviceInfo', 'UTF8', None, ),  # 17
    (18, TType.STRING, 'filterId', 'UTF8', None, ),  # 18
    (19, TType.STRING, 'entranceType', 'UTF8', None, ),  # 19
    (20, TType.LIST, 'languageList', (TType.STRING, 'UTF8', False), None, ),  # 20
    (21, TType.STRING, 'nextToken', 'UTF8', None, ),  # 21
    (22, TType.STRING, 'searchContent', 'UTF8', None, ),  # 22
    (23, TType.LIST, 'genresList', (TType.STRING, 'UTF8', False), None, ),  # 23
    (24, TType.STRING, 'logId', 'UTF8', None, ),  # 24
    (25, TType.STRING, 'serviceName', 'UTF8', None, ),  # 25
    (26, TType.STRING, 'envOption', 'UTF8', None, ),  # 26
    (27, TType.STRING, 'timeSign', 'UTF8', None, ),  # 27
    (28, TType.STRING, 'execTimeSign', 'UTF8', None, ),  # 28
    (29, TType.STRING, 'execTimeDelay', 'UTF8', None, ),  # 29
    (30, TType.STRING, 'debugOption', 'UTF8', None, ),  # 30
    (31, TType.STRING, 'clientVersion', 'UTF8', None, ),  # 31
    (32, TType.LIST, 'browseLangs', (TType.STRING, 'UTF8', False), None, ),  # 32
    (33, TType.STRING, 'sortOpt', 'UTF8', None, ),  # 33
    (34, TType.LIST, 'singerList', (TType.STRING, 'UTF8', False), None, ),  # 34
    (35, TType.LIST, 'actorList', (TType.STRING, 'UTF8', False), None, ),  # 35
    (36, TType.LIST, 'directorList', (TType.STRING, 'UTF8', False), None, ),  # 36
    (37, TType.LIST, 'releaseYears', (TType.STRING, 'UTF8', False), None, ),  # 37
    (38, TType.STRING, 'redPoint', 'UTF8', None, ),  # 38
)
all_structs.append(Genres)
Genres.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'genresId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'genresName', 'UTF8', None, ),  # 2
    (3, TType.LIST, 'backgroundPic', (TType.STRING, 'UTF8', False), None, ),  # 3
)
all_structs.append(Result)
Result.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'id', 'UTF8', None, ),  # 1
    (2, TType.I64, 'recallSign', None, None, ),  # 2
    (3, TType.STRING, 'resultType', 'UTF8', None, ),  # 3
    (4, TType.I64, 'preLoadTime', None, None, ),  # 4
    (5, TType.STRING, 'attachContent', 'UTF8', None, ),  # 5
    (6, TType.LIST, 'languageList', (TType.STRING, 'UTF8', False), None, ),  # 6
    (7, TType.I64, 'releaseDate', None, None, ),  # 7
    (8, TType.DOUBLE, 'heat', None, None, ),  # 8
)
all_structs.append(Card)
Card.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'cardName', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'cardId', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'listStyle', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'moreStyle', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'icon', 'UTF8', None, ),  # 5
    (6, TType.LIST, 'languageList', (TType.STRING, 'UTF8', False), None, ),  # 6
    (7, TType.BOOL, 'isRandom', None, None, ),  # 7
    (8, TType.I32, 'cardType', None, None, ),  # 8
    (9, TType.STRING, 'description', 'UTF8', None, ),  # 9
    (10, TType.STRING, 'flagName', 'UTF8', None, ),  # 10
    (11, TType.STRING, 'flagColor', 'UTF8', None, ),  # 11
    (12, TType.STRING, 'featuredType', 'UTF8', None, ),  # 12
    (13, TType.STRING, 'originalThumbnail', 'UTF8', None, ),  # 13
    (14, TType.I64, 'preLoadTime', None, None, ),  # 14
    (15, TType.STRING, 'attachContent', 'UTF8', None, ),  # 15
    (16, TType.STRING, 'cardContentType', 'UTF8', None, ),  # 16
    (17, TType.DOUBLE, 'personScore', None, None, ),  # 17
    (18, TType.STRING, 'recallType', 'UTF8', None, ),  # 18
    (19, TType.STRING, 'strategyType', 'UTF8', None, ),  # 19
    (20, TType.STRING, 'clientVersionInfo', 'UTF8', None, ),  # 20
    (21, TType.STRING, 'backgroundColorCode', 'UTF8', None, ),  # 21
)
all_structs.append(Tabs)
Tabs.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'tabName', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'tabId', 'UTF8', None, ),  # 2
    (3, TType.LIST, 'cardList', (TType.STRUCT, [Card, None], False), None, ),  # 3
    (4, TType.STRING, 'style', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'nextToken', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'attachContent', 'UTF8', None, ),  # 6
)
all_structs.append(Banner)
Banner.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'bannerName', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'bannerType', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'headPicture', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'description', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'subTitle', 'UTF8', None, ),  # 5
    (6, TType.LIST, 'additionalInfos', (TType.STRUCT, [AdditionalInfo, None], False), None, ),  # 6
    (7, TType.I32, 'order', None, None, ),  # 7
    (8, TType.STRING, 'bannerId', 'UTF8', None, ),  # 8
    (9, TType.I64, 'preLoadTime', None, None, ),  # 9
    (10, TType.STRING, 'attachContent', 'UTF8', None, ),  # 10
)
all_structs.append(Response)
Response.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'resultList', (TType.STRUCT, [Result, None], False), None, ),  # 1
    (2, TType.STRING, 'smallFlowTag', 'UTF8', None, ),  # 2
    (3, TType.I16, 'flag', None, None, ),  # 3
    (4, TType.STRING, 'requestChannel', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'responseType', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'listStyle', 'UTF8', None, ),  # 6
    (7, TType.STRING, 'moreStyle', 'UTF8', None, ),  # 7
    (8, TType.BYTE, 'hasHead', None, None, ),  # 8
    (9, TType.BYTE, 'hasTail', None, None, ),  # 9
    (10, TType.BOOL, 'disableCache', None, None, ),  # 10
    (11, TType.STRING, 'logId', 'UTF8', None, ),  # 11
    (12, TType.STRING, 'serviceName', 'UTF8', None, ),  # 12
    (13, TType.STRING, 'resStatus', 'UTF8', None, ),  # 13
    (14, TType.STRING, 'debugInfo', 'UTF8', None, ),  # 14
)
fix_spec(all_structs)
del all_structs
